package database

import (
	"context"
	"fmt"
	"log"
	"os"

	"ariga.io/atlas/sql/schema"
	"ariga.io/atlas/sql/sqlclient"
	"entgo.io/ent/entc"
	"entgo.io/ent/entc/gen"
	_ "github.com/lib/pq"
)

// SyncSchema 从数据库同步结构到 ENT schema
func SyncSchema() error {
	// 确保目录存在
	schemaDir := "ent/schema"
	if err := os.MkdirAll(schemaDir, 0755); err != nil {
		return fmt.Errorf("failed to create schema directory: %v", err)
	}

	// 从 config 包获取配置
	dbConfig, err := LoadConfig()
	if err != nil {
		return fmt.Errorf("无法加载应用配置: %v", err)
	}

	// 构建 DSN
	dsn := dbConfig.GetDSN()

	log.Printf("使用 DSN: %s", dsn)

	// 使用 Atlas 连接数据库
	ctx := context.Background()
	client, err := sqlclient.Open(ctx, dsn)
	if err != nil {
		return fmt.Errorf("failed to open database connection: %v", err)
	}
	defer client.Close()

	// 检查数据库 Schema
	_, err = client.InspectRealm(ctx, &schema.InspectRealmOption{
		Schemas: []string{dbConfig.Schema},
	})
	if err != nil {
		return fmt.Errorf("failed to inspect schema: %v", err)
	}

	// 生成 Ent Schema（需要手动转换或借助 entc）
	err = entc.Generate("./ent/schema", &gen.Config{
		Header: "// Code generated by entc, DO NOT EDIT.",
	})
	if err != nil {
		return fmt.Errorf("failed to generate ENT schema: %v", err)
	}

	log.Printf("ENT schema generated successfully")
	return nil
}

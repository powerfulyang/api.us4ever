// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"api.us4ever/internal/ent/file"
	"api.us4ever/internal/ent/image"
	"api.us4ever/internal/ent/user"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Image is the model entity for the Image schema.
type Image struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Size holds the value of the "size" field.
	Size int `json:"size,omitempty"`
	// Width holds the value of the "width" field.
	Width int32 `json:"width,omitempty"`
	// Height holds the value of the "height" field.
	Height int32 `json:"height,omitempty"`
	// Exif holds the value of the "exif" field.
	Exif json.RawMessage `json:"exif,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// IsPublic holds the value of the "isPublic" field.
	IsPublic bool `json:"isPublic,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags json.RawMessage `json:"tags,omitempty"`
	// Thumbnail10x holds the value of the "thumbnail_10x" field.
	Thumbnail10x []byte `json:"thumbnail_10x,omitempty"`
	// Thumbnail320xID holds the value of the "thumbnail_320x_id" field.
	Thumbnail320xID string `json:"thumbnail_320x_id,omitempty"`
	// Thumbnail768xID holds the value of the "thumbnail_768x_id" field.
	Thumbnail768xID string `json:"thumbnail_768x_id,omitempty"`
	// CompressedID holds the value of the "compressed_id" field.
	CompressedID string `json:"compressed_id,omitempty"`
	// OriginalID holds the value of the "original_id" field.
	OriginalID string `json:"original_id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// UploadedBy holds the value of the "uploadedBy" field.
	UploadedBy string `json:"uploadedBy,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// ExtraData holds the value of the "extraData" field.
	ExtraData json.RawMessage `json:"extraData,omitempty"`
	// DescriptionVector holds the value of the "description_vector" field.
	DescriptionVector json.RawMessage `json:"description_vector,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImageQuery when eager-loading is set.
	Edges        ImageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ImageEdges holds the relations/edges for other nodes in the graph.
type ImageEdges struct {
	// Compressed holds the value of the compressed edge.
	Compressed *File `json:"compressed,omitempty"`
	// Original holds the value of the original edge.
	Original *File `json:"original,omitempty"`
	// Thumbnail320x holds the value of the thumbnail320x edge.
	Thumbnail320x *File `json:"thumbnail320x,omitempty"`
	// Thumbnail768x holds the value of the thumbnail768x edge.
	Thumbnail768x *File `json:"thumbnail768x,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// MomentImages holds the value of the moment_images edge.
	MomentImages []*MomentImage `json:"moment_images,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// CompressedOrErr returns the Compressed value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImageEdges) CompressedOrErr() (*File, error) {
	if e.Compressed != nil {
		return e.Compressed, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "compressed"}
}

// OriginalOrErr returns the Original value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImageEdges) OriginalOrErr() (*File, error) {
	if e.Original != nil {
		return e.Original, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "original"}
}

// Thumbnail320xOrErr returns the Thumbnail320x value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImageEdges) Thumbnail320xOrErr() (*File, error) {
	if e.Thumbnail320x != nil {
		return e.Thumbnail320x, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "thumbnail320x"}
}

// Thumbnail768xOrErr returns the Thumbnail768x value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImageEdges) Thumbnail768xOrErr() (*File, error) {
	if e.Thumbnail768x != nil {
		return e.Thumbnail768x, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "thumbnail768x"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImageEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// MomentImagesOrErr returns the MomentImages value or an error if the edge
// was not loaded in eager-loading.
func (e ImageEdges) MomentImagesOrErr() ([]*MomentImage, error) {
	if e.loadedTypes[5] {
		return e.MomentImages, nil
	}
	return nil, &NotLoadedError{edge: "moment_images"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Image) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case image.FieldExif, image.FieldTags, image.FieldThumbnail10x, image.FieldExtraData, image.FieldDescriptionVector:
			values[i] = new([]byte)
		case image.FieldIsPublic:
			values[i] = new(sql.NullBool)
		case image.FieldSize, image.FieldWidth, image.FieldHeight:
			values[i] = new(sql.NullInt64)
		case image.FieldID, image.FieldName, image.FieldType, image.FieldHash, image.FieldAddress, image.FieldDescription, image.FieldThumbnail320xID, image.FieldThumbnail768xID, image.FieldCompressedID, image.FieldOriginalID, image.FieldUploadedBy, image.FieldCategory:
			values[i] = new(sql.NullString)
		case image.FieldCreatedAt, image.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Image fields.
func (i *Image) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case image.FieldID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value.Valid {
				i.ID = value.String
			}
		case image.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case image.FieldType:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[j])
			} else if value.Valid {
				i.Type = value.String
			}
		case image.FieldSize:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[j])
			} else if value.Valid {
				i.Size = int(value.Int64)
			}
		case image.FieldWidth:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[j])
			} else if value.Valid {
				i.Width = int32(value.Int64)
			}
		case image.FieldHeight:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[j])
			} else if value.Valid {
				i.Height = int32(value.Int64)
			}
		case image.FieldExif:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field exif", values[j])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &i.Exif); err != nil {
					return fmt.Errorf("unmarshal field exif: %w", err)
				}
			}
		case image.FieldHash:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[j])
			} else if value.Valid {
				i.Hash = value.String
			}
		case image.FieldAddress:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[j])
			} else if value.Valid {
				i.Address = value.String
			}
		case image.FieldIsPublic:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isPublic", values[j])
			} else if value.Valid {
				i.IsPublic = value.Bool
			}
		case image.FieldDescription:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[j])
			} else if value.Valid {
				i.Description = value.String
			}
		case image.FieldTags:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[j])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &i.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case image.FieldThumbnail10x:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail_10x", values[j])
			} else if value != nil {
				i.Thumbnail10x = *value
			}
		case image.FieldThumbnail320xID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail_320x_id", values[j])
			} else if value.Valid {
				i.Thumbnail320xID = value.String
			}
		case image.FieldThumbnail768xID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail_768x_id", values[j])
			} else if value.Valid {
				i.Thumbnail768xID = value.String
			}
		case image.FieldCompressedID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field compressed_id", values[j])
			} else if value.Valid {
				i.CompressedID = value.String
			}
		case image.FieldOriginalID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field original_id", values[j])
			} else if value.Valid {
				i.OriginalID = value.String
			}
		case image.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case image.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case image.FieldUploadedBy:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uploadedBy", values[j])
			} else if value.Valid {
				i.UploadedBy = value.String
			}
		case image.FieldCategory:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[j])
			} else if value.Valid {
				i.Category = value.String
			}
		case image.FieldExtraData:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extraData", values[j])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &i.ExtraData); err != nil {
					return fmt.Errorf("unmarshal field extraData: %w", err)
				}
			}
		case image.FieldDescriptionVector:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field description_vector", values[j])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &i.DescriptionVector); err != nil {
					return fmt.Errorf("unmarshal field description_vector: %w", err)
				}
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Image.
// This includes values selected through modifiers, order, etc.
func (i *Image) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryCompressed queries the "compressed" edge of the Image entity.
func (i *Image) QueryCompressed() *FileQuery {
	return NewImageClient(i.config).QueryCompressed(i)
}

// QueryOriginal queries the "original" edge of the Image entity.
func (i *Image) QueryOriginal() *FileQuery {
	return NewImageClient(i.config).QueryOriginal(i)
}

// QueryThumbnail320x queries the "thumbnail320x" edge of the Image entity.
func (i *Image) QueryThumbnail320x() *FileQuery {
	return NewImageClient(i.config).QueryThumbnail320x(i)
}

// QueryThumbnail768x queries the "thumbnail768x" edge of the Image entity.
func (i *Image) QueryThumbnail768x() *FileQuery {
	return NewImageClient(i.config).QueryThumbnail768x(i)
}

// QueryUser queries the "user" edge of the Image entity.
func (i *Image) QueryUser() *UserQuery {
	return NewImageClient(i.config).QueryUser(i)
}

// QueryMomentImages queries the "moment_images" edge of the Image entity.
func (i *Image) QueryMomentImages() *MomentImageQuery {
	return NewImageClient(i.config).QueryMomentImages(i)
}

// Update returns a builder for updating this Image.
// Note that you need to call Image.Unwrap() before calling this method if this Image
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Image) Update() *ImageUpdateOne {
	return NewImageClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Image entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Image) Unwrap() *Image {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Image is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Image) String() string {
	var builder strings.Builder
	builder.WriteString("Image(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("name=")
	builder.WriteString(i.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(i.Type)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", i.Size))
	builder.WriteString(", ")
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", i.Width))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", i.Height))
	builder.WriteString(", ")
	builder.WriteString("exif=")
	builder.WriteString(fmt.Sprintf("%v", i.Exif))
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(i.Hash)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(i.Address)
	builder.WriteString(", ")
	builder.WriteString("isPublic=")
	builder.WriteString(fmt.Sprintf("%v", i.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(i.Description)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", i.Tags))
	builder.WriteString(", ")
	builder.WriteString("thumbnail_10x=")
	builder.WriteString(fmt.Sprintf("%v", i.Thumbnail10x))
	builder.WriteString(", ")
	builder.WriteString("thumbnail_320x_id=")
	builder.WriteString(i.Thumbnail320xID)
	builder.WriteString(", ")
	builder.WriteString("thumbnail_768x_id=")
	builder.WriteString(i.Thumbnail768xID)
	builder.WriteString(", ")
	builder.WriteString("compressed_id=")
	builder.WriteString(i.CompressedID)
	builder.WriteString(", ")
	builder.WriteString("original_id=")
	builder.WriteString(i.OriginalID)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("uploadedBy=")
	builder.WriteString(i.UploadedBy)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(i.Category)
	builder.WriteString(", ")
	builder.WriteString("extraData=")
	builder.WriteString(fmt.Sprintf("%v", i.ExtraData))
	builder.WriteString(", ")
	builder.WriteString("description_vector=")
	builder.WriteString(fmt.Sprintf("%v", i.DescriptionVector))
	builder.WriteByte(')')
	return builder.String()
}

// Images is a parsable slice of Image.
type Images []*Image

// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BucketsColumns holds the columns for the "buckets" table.
	BucketsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "bucketName", Type: field.TypeString},
		{Name: "provider", Type: field.TypeEnum, Enums: []string{"R2", "TENCENT_COS", "ORACLE_OSS"}},
		{Name: "region", Type: field.TypeString},
		{Name: "endpoint", Type: field.TypeString},
		{Name: "publicUrl", Type: field.TypeString},
		{Name: "accessKey", Type: field.TypeString},
		{Name: "secretKey", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "createdAt", Type: field.TypeTime},
		{Name: "updatedAt", Type: field.TypeTime},
		{Name: "extraData", Type: field.TypeJSON},
		{Name: "category", Type: field.TypeString},
		{Name: "ownerId", Type: field.TypeString, Nullable: true},
	}
	// BucketsTable holds the schema information for the "buckets" table.
	BucketsTable = &schema.Table{
		Name:       "buckets",
		Columns:    BucketsColumns,
		PrimaryKey: []*schema.Column{BucketsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "buckets_users_buckets",
				Columns:    []*schema.Column{BucketsColumns[14]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// FilesColumns holds the columns for the "files" table.
	FilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "hash", Type: field.TypeString},
		{Name: "size", Type: field.TypeInt},
		{Name: "path", Type: field.TypeString},
		{Name: "isPublic", Type: field.TypeBool},
		{Name: "description", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "createdAt", Type: field.TypeTime},
		{Name: "updatedAt", Type: field.TypeTime},
		{Name: "extraData", Type: field.TypeJSON},
		{Name: "category", Type: field.TypeString},
		{Name: "bucketId", Type: field.TypeString, Nullable: true},
		{Name: "uploadedBy", Type: field.TypeString, Nullable: true},
	}
	// FilesTable holds the schema information for the "files" table.
	FilesTable = &schema.Table{
		Name:       "files",
		Columns:    FilesColumns,
		PrimaryKey: []*schema.Column{FilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "files_buckets_files",
				Columns:    []*schema.Column{FilesColumns[13]},
				RefColumns: []*schema.Column{BucketsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "files_users_files",
				Columns:    []*schema.Column{FilesColumns[14]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// GroupsColumns holds the columns for the "groups" table.
	GroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString},
		{Name: "createdAt", Type: field.TypeTime},
		{Name: "updatedAt", Type: field.TypeTime},
	}
	// GroupsTable holds the schema information for the "groups" table.
	GroupsTable = &schema.Table{
		Name:       "groups",
		Columns:    GroupsColumns,
		PrimaryKey: []*schema.Column{GroupsColumns[0]},
	}
	// ImagesColumns holds the columns for the "images" table.
	ImagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "size", Type: field.TypeInt},
		{Name: "width", Type: field.TypeInt32},
		{Name: "height", Type: field.TypeInt32},
		{Name: "exif", Type: field.TypeJSON},
		{Name: "hash", Type: field.TypeString},
		{Name: "address", Type: field.TypeString},
		{Name: "isPublic", Type: field.TypeBool},
		{Name: "description", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "thumbnail_10x", Type: field.TypeBytes},
		{Name: "createdAt", Type: field.TypeTime},
		{Name: "updatedAt", Type: field.TypeTime},
		{Name: "category", Type: field.TypeString},
		{Name: "extraData", Type: field.TypeJSON},
		{Name: "description_vector", Type: field.TypeJSON, Nullable: true},
		{Name: "compressed_id", Type: field.TypeString, Nullable: true},
		{Name: "original_id", Type: field.TypeString, Nullable: true},
		{Name: "thumbnail_320x_id", Type: field.TypeString, Nullable: true},
		{Name: "thumbnail_768x_id", Type: field.TypeString, Nullable: true},
		{Name: "uploadedBy", Type: field.TypeString, Nullable: true},
	}
	// ImagesTable holds the schema information for the "images" table.
	ImagesTable = &schema.Table{
		Name:       "images",
		Columns:    ImagesColumns,
		PrimaryKey: []*schema.Column{ImagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "images_files_Image_compressed",
				Columns:    []*schema.Column{ImagesColumns[18]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "images_files_Image_original",
				Columns:    []*schema.Column{ImagesColumns[19]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "images_files_Image_thumbnail320x",
				Columns:    []*schema.Column{ImagesColumns[20]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "images_files_Image_thumbnail768x",
				Columns:    []*schema.Column{ImagesColumns[21]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "images_users_images",
				Columns:    []*schema.Column{ImagesColumns[22]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// KeepsColumns holds the columns for the "keeps" table.
	KeepsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "title", Type: field.TypeString},
		{Name: "content", Type: field.TypeString},
		{Name: "isPublic", Type: field.TypeBool},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "createdAt", Type: field.TypeTime},
		{Name: "updatedAt", Type: field.TypeTime},
		{Name: "category", Type: field.TypeString},
		{Name: "views", Type: field.TypeInt32},
		{Name: "likes", Type: field.TypeInt32},
		{Name: "summary", Type: field.TypeString},
		{Name: "extraData", Type: field.TypeJSON},
		{Name: "content_vector", Type: field.TypeJSON, Nullable: true},
		{Name: "summary_vector", Type: field.TypeJSON, Nullable: true},
		{Name: "title_vector", Type: field.TypeJSON, Nullable: true},
		{Name: "ownerId", Type: field.TypeString, Nullable: true},
	}
	// KeepsTable holds the schema information for the "keeps" table.
	KeepsTable = &schema.Table{
		Name:       "keeps",
		Columns:    KeepsColumns,
		PrimaryKey: []*schema.Column{KeepsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "keeps_users_keeps",
				Columns:    []*schema.Column{KeepsColumns[15]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MindmapsColumns holds the columns for the "mindmaps" table.
	MindmapsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "title", Type: field.TypeString},
		{Name: "content", Type: field.TypeJSON},
		{Name: "isPublic", Type: field.TypeBool},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "createdAt", Type: field.TypeTime},
		{Name: "updatedAt", Type: field.TypeTime},
		{Name: "views", Type: field.TypeInt32},
		{Name: "likes", Type: field.TypeInt32},
		{Name: "summary", Type: field.TypeString},
		{Name: "extraData", Type: field.TypeJSON},
		{Name: "category", Type: field.TypeString},
		{Name: "ownerId", Type: field.TypeString, Nullable: true},
	}
	// MindmapsTable holds the schema information for the "mindmaps" table.
	MindmapsTable = &schema.Table{
		Name:       "mindmaps",
		Columns:    MindmapsColumns,
		PrimaryKey: []*schema.Column{MindmapsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "mindmaps_users_mindmaps",
				Columns:    []*schema.Column{MindmapsColumns[12]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MomentsColumns holds the columns for the "moments" table.
	MomentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "content", Type: field.TypeString},
		{Name: "category", Type: field.TypeString},
		{Name: "createdAt", Type: field.TypeTime},
		{Name: "updatedAt", Type: field.TypeTime},
		{Name: "isPublic", Type: field.TypeBool},
		{Name: "likes", Type: field.TypeInt32},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "views", Type: field.TypeInt32},
		{Name: "extraData", Type: field.TypeJSON},
		{Name: "content_vector", Type: field.TypeJSON, Nullable: true},
		{Name: "ownerId", Type: field.TypeString, Nullable: true},
	}
	// MomentsTable holds the schema information for the "moments" table.
	MomentsTable = &schema.Table{
		Name:       "moments",
		Columns:    MomentsColumns,
		PrimaryKey: []*schema.Column{MomentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "moments_users_moments",
				Columns:    []*schema.Column{MomentsColumns[11]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MomentImagesColumns holds the columns for the "moment_images" table.
	MomentImagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true, SchemaType: map[string]string{"postgres": "serial"}},
		{Name: "sort", Type: field.TypeInt32},
		{Name: "createdAt", Type: field.TypeTime},
		{Name: "updatedAt", Type: field.TypeTime},
		{Name: "imageId", Type: field.TypeString, Nullable: true},
		{Name: "momentId", Type: field.TypeString, Nullable: true},
	}
	// MomentImagesTable holds the schema information for the "moment_images" table.
	MomentImagesTable = &schema.Table{
		Name:       "moment_images",
		Columns:    MomentImagesColumns,
		PrimaryKey: []*schema.Column{MomentImagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "moment_images_images_moment_images",
				Columns:    []*schema.Column{MomentImagesColumns[4]},
				RefColumns: []*schema.Column{ImagesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "moment_images_moments_moment_images",
				Columns:    []*schema.Column{MomentImagesColumns[5]},
				RefColumns: []*schema.Column{MomentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MomentVideosColumns holds the columns for the "moment_videos" table.
	MomentVideosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint, Increment: true, SchemaType: map[string]string{"postgres": "serial"}},
		{Name: "sort", Type: field.TypeInt32},
		{Name: "createdAt", Type: field.TypeTime},
		{Name: "updatedAt", Type: field.TypeTime},
		{Name: "momentId", Type: field.TypeString, Nullable: true},
		{Name: "videoId", Type: field.TypeString, Nullable: true},
	}
	// MomentVideosTable holds the schema information for the "moment_videos" table.
	MomentVideosTable = &schema.Table{
		Name:       "moment_videos",
		Columns:    MomentVideosColumns,
		PrimaryKey: []*schema.Column{MomentVideosColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "moment_videos_moments_moment_videos",
				Columns:    []*schema.Column{MomentVideosColumns[4]},
				RefColumns: []*schema.Column{MomentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "moment_videos_videos_moment_videos",
				Columns:    []*schema.Column{MomentVideosColumns[5]},
				RefColumns: []*schema.Column{VideosColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TodosColumns holds the columns for the "todos" table.
	TodosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "title", Type: field.TypeString},
		{Name: "content", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeBool},
		{Name: "priority", Type: field.TypeInt32},
		{Name: "dueDate", Type: field.TypeTime, Nullable: true},
		{Name: "isPublic", Type: field.TypeBool},
		{Name: "pinned", Type: field.TypeBool},
		{Name: "createdAt", Type: field.TypeTime},
		{Name: "updatedAt", Type: field.TypeTime},
		{Name: "extraData", Type: field.TypeJSON},
		{Name: "category", Type: field.TypeString},
		{Name: "ownerId", Type: field.TypeString, Nullable: true},
	}
	// TodosTable holds the schema information for the "todos" table.
	TodosTable = &schema.Table{
		Name:       "todos",
		Columns:    TodosColumns,
		PrimaryKey: []*schema.Column{TodosColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "todos_users_todos",
				Columns:    []*schema.Column{TodosColumns[12]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "nickname", Type: field.TypeString},
		{Name: "avatar", Type: field.TypeString},
		{Name: "bio", Type: field.TypeString},
		{Name: "isAdmin", Type: field.TypeBool},
		{Name: "lastLoginIp", Type: field.TypeString},
		{Name: "createdAt", Type: field.TypeTime},
		{Name: "updatedAt", Type: field.TypeTime},
		{Name: "lastLoginAt", Type: field.TypeTime},
		{Name: "groupId", Type: field.TypeString, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_groups_users",
				Columns:    []*schema.Column{UsersColumns[10]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// VideosColumns holds the columns for the "videos" table.
	VideosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "hash", Type: field.TypeString},
		{Name: "size", Type: field.TypeInt},
		{Name: "isPublic", Type: field.TypeBool},
		{Name: "createdAt", Type: field.TypeTime},
		{Name: "updatedAt", Type: field.TypeTime},
		{Name: "duration", Type: field.TypeInt32},
		{Name: "name", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "extraData", Type: field.TypeJSON},
		{Name: "category", Type: field.TypeString},
		{Name: "fileId", Type: field.TypeString, Nullable: true},
		{Name: "posterId", Type: field.TypeString, Nullable: true},
		{Name: "uploadedBy", Type: field.TypeString, Nullable: true},
	}
	// VideosTable holds the schema information for the "videos" table.
	VideosTable = &schema.Table{
		Name:       "videos",
		Columns:    VideosColumns,
		PrimaryKey: []*schema.Column{VideosColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "videos_files_Video_file",
				Columns:    []*schema.Column{VideosColumns[11]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "videos_files_Video_poster",
				Columns:    []*schema.Column{VideosColumns[12]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "videos_users_videos",
				Columns:    []*schema.Column{VideosColumns[13]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BucketsTable,
		FilesTable,
		GroupsTable,
		ImagesTable,
		KeepsTable,
		MindmapsTable,
		MomentsTable,
		MomentImagesTable,
		MomentVideosTable,
		TodosTable,
		UsersTable,
		VideosTable,
	}
)

func init() {
	BucketsTable.ForeignKeys[0].RefTable = UsersTable
	FilesTable.ForeignKeys[0].RefTable = BucketsTable
	FilesTable.ForeignKeys[1].RefTable = UsersTable
	ImagesTable.ForeignKeys[0].RefTable = FilesTable
	ImagesTable.ForeignKeys[1].RefTable = FilesTable
	ImagesTable.ForeignKeys[2].RefTable = FilesTable
	ImagesTable.ForeignKeys[3].RefTable = FilesTable
	ImagesTable.ForeignKeys[4].RefTable = UsersTable
	KeepsTable.ForeignKeys[0].RefTable = UsersTable
	MindmapsTable.ForeignKeys[0].RefTable = UsersTable
	MomentsTable.ForeignKeys[0].RefTable = UsersTable
	MomentImagesTable.ForeignKeys[0].RefTable = ImagesTable
	MomentImagesTable.ForeignKeys[1].RefTable = MomentsTable
	MomentVideosTable.ForeignKeys[0].RefTable = MomentsTable
	MomentVideosTable.ForeignKeys[1].RefTable = VideosTable
	TodosTable.ForeignKeys[0].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = GroupsTable
	VideosTable.ForeignKeys[0].RefTable = FilesTable
	VideosTable.ForeignKeys[1].RefTable = FilesTable
	VideosTable.ForeignKeys[2].RefTable = UsersTable
}

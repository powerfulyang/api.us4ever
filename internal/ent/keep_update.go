// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"api.us4ever/internal/ent/keep"
	"api.us4ever/internal/ent/predicate"
	"api.us4ever/internal/ent/user"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// KeepUpdate is the builder for updating Keep entities.
type KeepUpdate struct {
	config
	hooks    []Hook
	mutation *KeepMutation
}

// Where appends a list predicates to the KeepUpdate builder.
func (ku *KeepUpdate) Where(ps ...predicate.Keep) *KeepUpdate {
	ku.mutation.Where(ps...)
	return ku
}

// SetTitle sets the "title" field.
func (ku *KeepUpdate) SetTitle(s string) *KeepUpdate {
	ku.mutation.SetTitle(s)
	return ku
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ku *KeepUpdate) SetNillableTitle(s *string) *KeepUpdate {
	if s != nil {
		ku.SetTitle(*s)
	}
	return ku
}

// SetContent sets the "content" field.
func (ku *KeepUpdate) SetContent(s string) *KeepUpdate {
	ku.mutation.SetContent(s)
	return ku
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ku *KeepUpdate) SetNillableContent(s *string) *KeepUpdate {
	if s != nil {
		ku.SetContent(*s)
	}
	return ku
}

// SetIsPublic sets the "isPublic" field.
func (ku *KeepUpdate) SetIsPublic(b bool) *KeepUpdate {
	ku.mutation.SetIsPublic(b)
	return ku
}

// SetNillableIsPublic sets the "isPublic" field if the given value is not nil.
func (ku *KeepUpdate) SetNillableIsPublic(b *bool) *KeepUpdate {
	if b != nil {
		ku.SetIsPublic(*b)
	}
	return ku
}

// SetTags sets the "tags" field.
func (ku *KeepUpdate) SetTags(jm json.RawMessage) *KeepUpdate {
	ku.mutation.SetTags(jm)
	return ku
}

// AppendTags appends jm to the "tags" field.
func (ku *KeepUpdate) AppendTags(jm json.RawMessage) *KeepUpdate {
	ku.mutation.AppendTags(jm)
	return ku
}

// SetCreatedAt sets the "createdAt" field.
func (ku *KeepUpdate) SetCreatedAt(t time.Time) *KeepUpdate {
	ku.mutation.SetCreatedAt(t)
	return ku
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (ku *KeepUpdate) SetNillableCreatedAt(t *time.Time) *KeepUpdate {
	if t != nil {
		ku.SetCreatedAt(*t)
	}
	return ku
}

// SetUpdatedAt sets the "updatedAt" field.
func (ku *KeepUpdate) SetUpdatedAt(t time.Time) *KeepUpdate {
	ku.mutation.SetUpdatedAt(t)
	return ku
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (ku *KeepUpdate) SetNillableUpdatedAt(t *time.Time) *KeepUpdate {
	if t != nil {
		ku.SetUpdatedAt(*t)
	}
	return ku
}

// SetOwnerId sets the "ownerId" field.
func (ku *KeepUpdate) SetOwnerId(s string) *KeepUpdate {
	ku.mutation.SetOwnerId(s)
	return ku
}

// SetNillableOwnerId sets the "ownerId" field if the given value is not nil.
func (ku *KeepUpdate) SetNillableOwnerId(s *string) *KeepUpdate {
	if s != nil {
		ku.SetOwnerId(*s)
	}
	return ku
}

// ClearOwnerId clears the value of the "ownerId" field.
func (ku *KeepUpdate) ClearOwnerId() *KeepUpdate {
	ku.mutation.ClearOwnerId()
	return ku
}

// SetCategory sets the "category" field.
func (ku *KeepUpdate) SetCategory(s string) *KeepUpdate {
	ku.mutation.SetCategory(s)
	return ku
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ku *KeepUpdate) SetNillableCategory(s *string) *KeepUpdate {
	if s != nil {
		ku.SetCategory(*s)
	}
	return ku
}

// SetViews sets the "views" field.
func (ku *KeepUpdate) SetViews(i int32) *KeepUpdate {
	ku.mutation.ResetViews()
	ku.mutation.SetViews(i)
	return ku
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (ku *KeepUpdate) SetNillableViews(i *int32) *KeepUpdate {
	if i != nil {
		ku.SetViews(*i)
	}
	return ku
}

// AddViews adds i to the "views" field.
func (ku *KeepUpdate) AddViews(i int32) *KeepUpdate {
	ku.mutation.AddViews(i)
	return ku
}

// SetLikes sets the "likes" field.
func (ku *KeepUpdate) SetLikes(i int32) *KeepUpdate {
	ku.mutation.ResetLikes()
	ku.mutation.SetLikes(i)
	return ku
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (ku *KeepUpdate) SetNillableLikes(i *int32) *KeepUpdate {
	if i != nil {
		ku.SetLikes(*i)
	}
	return ku
}

// AddLikes adds i to the "likes" field.
func (ku *KeepUpdate) AddLikes(i int32) *KeepUpdate {
	ku.mutation.AddLikes(i)
	return ku
}

// SetSummary sets the "summary" field.
func (ku *KeepUpdate) SetSummary(s string) *KeepUpdate {
	ku.mutation.SetSummary(s)
	return ku
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (ku *KeepUpdate) SetNillableSummary(s *string) *KeepUpdate {
	if s != nil {
		ku.SetSummary(*s)
	}
	return ku
}

// SetExtraData sets the "extraData" field.
func (ku *KeepUpdate) SetExtraData(jm json.RawMessage) *KeepUpdate {
	ku.mutation.SetExtraData(jm)
	return ku
}

// AppendExtraData appends jm to the "extraData" field.
func (ku *KeepUpdate) AppendExtraData(jm json.RawMessage) *KeepUpdate {
	ku.mutation.AppendExtraData(jm)
	return ku
}

// SetContentVector sets the "content_vector" field.
func (ku *KeepUpdate) SetContentVector(jm json.RawMessage) *KeepUpdate {
	ku.mutation.SetContentVector(jm)
	return ku
}

// AppendContentVector appends jm to the "content_vector" field.
func (ku *KeepUpdate) AppendContentVector(jm json.RawMessage) *KeepUpdate {
	ku.mutation.AppendContentVector(jm)
	return ku
}

// ClearContentVector clears the value of the "content_vector" field.
func (ku *KeepUpdate) ClearContentVector() *KeepUpdate {
	ku.mutation.ClearContentVector()
	return ku
}

// SetSummaryVector sets the "summary_vector" field.
func (ku *KeepUpdate) SetSummaryVector(jm json.RawMessage) *KeepUpdate {
	ku.mutation.SetSummaryVector(jm)
	return ku
}

// AppendSummaryVector appends jm to the "summary_vector" field.
func (ku *KeepUpdate) AppendSummaryVector(jm json.RawMessage) *KeepUpdate {
	ku.mutation.AppendSummaryVector(jm)
	return ku
}

// ClearSummaryVector clears the value of the "summary_vector" field.
func (ku *KeepUpdate) ClearSummaryVector() *KeepUpdate {
	ku.mutation.ClearSummaryVector()
	return ku
}

// SetTitleVector sets the "title_vector" field.
func (ku *KeepUpdate) SetTitleVector(jm json.RawMessage) *KeepUpdate {
	ku.mutation.SetTitleVector(jm)
	return ku
}

// AppendTitleVector appends jm to the "title_vector" field.
func (ku *KeepUpdate) AppendTitleVector(jm json.RawMessage) *KeepUpdate {
	ku.mutation.AppendTitleVector(jm)
	return ku
}

// ClearTitleVector clears the value of the "title_vector" field.
func (ku *KeepUpdate) ClearTitleVector() *KeepUpdate {
	ku.mutation.ClearTitleVector()
	return ku
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ku *KeepUpdate) SetUserID(id string) *KeepUpdate {
	ku.mutation.SetUserID(id)
	return ku
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ku *KeepUpdate) SetNillableUserID(id *string) *KeepUpdate {
	if id != nil {
		ku = ku.SetUserID(*id)
	}
	return ku
}

// SetUser sets the "user" edge to the User entity.
func (ku *KeepUpdate) SetUser(u *User) *KeepUpdate {
	return ku.SetUserID(u.ID)
}

// Mutation returns the KeepMutation object of the builder.
func (ku *KeepUpdate) Mutation() *KeepMutation {
	return ku.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ku *KeepUpdate) ClearUser() *KeepUpdate {
	ku.mutation.ClearUser()
	return ku
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ku *KeepUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ku.sqlSave, ku.mutation, ku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ku *KeepUpdate) SaveX(ctx context.Context) int {
	affected, err := ku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ku *KeepUpdate) Exec(ctx context.Context) error {
	_, err := ku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ku *KeepUpdate) ExecX(ctx context.Context) {
	if err := ku.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ku *KeepUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(keep.Table, keep.Columns, sqlgraph.NewFieldSpec(keep.FieldID, field.TypeString))
	if ps := ku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ku.mutation.Title(); ok {
		_spec.SetField(keep.FieldTitle, field.TypeString, value)
	}
	if value, ok := ku.mutation.Content(); ok {
		_spec.SetField(keep.FieldContent, field.TypeString, value)
	}
	if value, ok := ku.mutation.IsPublic(); ok {
		_spec.SetField(keep.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := ku.mutation.Tags(); ok {
		_spec.SetField(keep.FieldTags, field.TypeJSON, value)
	}
	if value, ok := ku.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, keep.FieldTags, value)
		})
	}
	if value, ok := ku.mutation.CreatedAt(); ok {
		_spec.SetField(keep.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ku.mutation.UpdatedAt(); ok {
		_spec.SetField(keep.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ku.mutation.Category(); ok {
		_spec.SetField(keep.FieldCategory, field.TypeString, value)
	}
	if value, ok := ku.mutation.Views(); ok {
		_spec.SetField(keep.FieldViews, field.TypeInt32, value)
	}
	if value, ok := ku.mutation.AddedViews(); ok {
		_spec.AddField(keep.FieldViews, field.TypeInt32, value)
	}
	if value, ok := ku.mutation.Likes(); ok {
		_spec.SetField(keep.FieldLikes, field.TypeInt32, value)
	}
	if value, ok := ku.mutation.AddedLikes(); ok {
		_spec.AddField(keep.FieldLikes, field.TypeInt32, value)
	}
	if value, ok := ku.mutation.Summary(); ok {
		_spec.SetField(keep.FieldSummary, field.TypeString, value)
	}
	if value, ok := ku.mutation.ExtraData(); ok {
		_spec.SetField(keep.FieldExtraData, field.TypeJSON, value)
	}
	if value, ok := ku.mutation.AppendedExtraData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, keep.FieldExtraData, value)
		})
	}
	if value, ok := ku.mutation.ContentVector(); ok {
		_spec.SetField(keep.FieldContentVector, field.TypeJSON, value)
	}
	if value, ok := ku.mutation.AppendedContentVector(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, keep.FieldContentVector, value)
		})
	}
	if ku.mutation.ContentVectorCleared() {
		_spec.ClearField(keep.FieldContentVector, field.TypeJSON)
	}
	if value, ok := ku.mutation.SummaryVector(); ok {
		_spec.SetField(keep.FieldSummaryVector, field.TypeJSON, value)
	}
	if value, ok := ku.mutation.AppendedSummaryVector(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, keep.FieldSummaryVector, value)
		})
	}
	if ku.mutation.SummaryVectorCleared() {
		_spec.ClearField(keep.FieldSummaryVector, field.TypeJSON)
	}
	if value, ok := ku.mutation.TitleVector(); ok {
		_spec.SetField(keep.FieldTitleVector, field.TypeJSON, value)
	}
	if value, ok := ku.mutation.AppendedTitleVector(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, keep.FieldTitleVector, value)
		})
	}
	if ku.mutation.TitleVectorCleared() {
		_spec.ClearField(keep.FieldTitleVector, field.TypeJSON)
	}
	if ku.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   keep.UserTable,
			Columns: []string{keep.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   keep.UserTable,
			Columns: []string{keep.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keep.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ku.mutation.done = true
	return n, nil
}

// KeepUpdateOne is the builder for updating a single Keep entity.
type KeepUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KeepMutation
}

// SetTitle sets the "title" field.
func (kuo *KeepUpdateOne) SetTitle(s string) *KeepUpdateOne {
	kuo.mutation.SetTitle(s)
	return kuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (kuo *KeepUpdateOne) SetNillableTitle(s *string) *KeepUpdateOne {
	if s != nil {
		kuo.SetTitle(*s)
	}
	return kuo
}

// SetContent sets the "content" field.
func (kuo *KeepUpdateOne) SetContent(s string) *KeepUpdateOne {
	kuo.mutation.SetContent(s)
	return kuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (kuo *KeepUpdateOne) SetNillableContent(s *string) *KeepUpdateOne {
	if s != nil {
		kuo.SetContent(*s)
	}
	return kuo
}

// SetIsPublic sets the "isPublic" field.
func (kuo *KeepUpdateOne) SetIsPublic(b bool) *KeepUpdateOne {
	kuo.mutation.SetIsPublic(b)
	return kuo
}

// SetNillableIsPublic sets the "isPublic" field if the given value is not nil.
func (kuo *KeepUpdateOne) SetNillableIsPublic(b *bool) *KeepUpdateOne {
	if b != nil {
		kuo.SetIsPublic(*b)
	}
	return kuo
}

// SetTags sets the "tags" field.
func (kuo *KeepUpdateOne) SetTags(jm json.RawMessage) *KeepUpdateOne {
	kuo.mutation.SetTags(jm)
	return kuo
}

// AppendTags appends jm to the "tags" field.
func (kuo *KeepUpdateOne) AppendTags(jm json.RawMessage) *KeepUpdateOne {
	kuo.mutation.AppendTags(jm)
	return kuo
}

// SetCreatedAt sets the "createdAt" field.
func (kuo *KeepUpdateOne) SetCreatedAt(t time.Time) *KeepUpdateOne {
	kuo.mutation.SetCreatedAt(t)
	return kuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (kuo *KeepUpdateOne) SetNillableCreatedAt(t *time.Time) *KeepUpdateOne {
	if t != nil {
		kuo.SetCreatedAt(*t)
	}
	return kuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (kuo *KeepUpdateOne) SetUpdatedAt(t time.Time) *KeepUpdateOne {
	kuo.mutation.SetUpdatedAt(t)
	return kuo
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (kuo *KeepUpdateOne) SetNillableUpdatedAt(t *time.Time) *KeepUpdateOne {
	if t != nil {
		kuo.SetUpdatedAt(*t)
	}
	return kuo
}

// SetOwnerId sets the "ownerId" field.
func (kuo *KeepUpdateOne) SetOwnerId(s string) *KeepUpdateOne {
	kuo.mutation.SetOwnerId(s)
	return kuo
}

// SetNillableOwnerId sets the "ownerId" field if the given value is not nil.
func (kuo *KeepUpdateOne) SetNillableOwnerId(s *string) *KeepUpdateOne {
	if s != nil {
		kuo.SetOwnerId(*s)
	}
	return kuo
}

// ClearOwnerId clears the value of the "ownerId" field.
func (kuo *KeepUpdateOne) ClearOwnerId() *KeepUpdateOne {
	kuo.mutation.ClearOwnerId()
	return kuo
}

// SetCategory sets the "category" field.
func (kuo *KeepUpdateOne) SetCategory(s string) *KeepUpdateOne {
	kuo.mutation.SetCategory(s)
	return kuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (kuo *KeepUpdateOne) SetNillableCategory(s *string) *KeepUpdateOne {
	if s != nil {
		kuo.SetCategory(*s)
	}
	return kuo
}

// SetViews sets the "views" field.
func (kuo *KeepUpdateOne) SetViews(i int32) *KeepUpdateOne {
	kuo.mutation.ResetViews()
	kuo.mutation.SetViews(i)
	return kuo
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (kuo *KeepUpdateOne) SetNillableViews(i *int32) *KeepUpdateOne {
	if i != nil {
		kuo.SetViews(*i)
	}
	return kuo
}

// AddViews adds i to the "views" field.
func (kuo *KeepUpdateOne) AddViews(i int32) *KeepUpdateOne {
	kuo.mutation.AddViews(i)
	return kuo
}

// SetLikes sets the "likes" field.
func (kuo *KeepUpdateOne) SetLikes(i int32) *KeepUpdateOne {
	kuo.mutation.ResetLikes()
	kuo.mutation.SetLikes(i)
	return kuo
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (kuo *KeepUpdateOne) SetNillableLikes(i *int32) *KeepUpdateOne {
	if i != nil {
		kuo.SetLikes(*i)
	}
	return kuo
}

// AddLikes adds i to the "likes" field.
func (kuo *KeepUpdateOne) AddLikes(i int32) *KeepUpdateOne {
	kuo.mutation.AddLikes(i)
	return kuo
}

// SetSummary sets the "summary" field.
func (kuo *KeepUpdateOne) SetSummary(s string) *KeepUpdateOne {
	kuo.mutation.SetSummary(s)
	return kuo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (kuo *KeepUpdateOne) SetNillableSummary(s *string) *KeepUpdateOne {
	if s != nil {
		kuo.SetSummary(*s)
	}
	return kuo
}

// SetExtraData sets the "extraData" field.
func (kuo *KeepUpdateOne) SetExtraData(jm json.RawMessage) *KeepUpdateOne {
	kuo.mutation.SetExtraData(jm)
	return kuo
}

// AppendExtraData appends jm to the "extraData" field.
func (kuo *KeepUpdateOne) AppendExtraData(jm json.RawMessage) *KeepUpdateOne {
	kuo.mutation.AppendExtraData(jm)
	return kuo
}

// SetContentVector sets the "content_vector" field.
func (kuo *KeepUpdateOne) SetContentVector(jm json.RawMessage) *KeepUpdateOne {
	kuo.mutation.SetContentVector(jm)
	return kuo
}

// AppendContentVector appends jm to the "content_vector" field.
func (kuo *KeepUpdateOne) AppendContentVector(jm json.RawMessage) *KeepUpdateOne {
	kuo.mutation.AppendContentVector(jm)
	return kuo
}

// ClearContentVector clears the value of the "content_vector" field.
func (kuo *KeepUpdateOne) ClearContentVector() *KeepUpdateOne {
	kuo.mutation.ClearContentVector()
	return kuo
}

// SetSummaryVector sets the "summary_vector" field.
func (kuo *KeepUpdateOne) SetSummaryVector(jm json.RawMessage) *KeepUpdateOne {
	kuo.mutation.SetSummaryVector(jm)
	return kuo
}

// AppendSummaryVector appends jm to the "summary_vector" field.
func (kuo *KeepUpdateOne) AppendSummaryVector(jm json.RawMessage) *KeepUpdateOne {
	kuo.mutation.AppendSummaryVector(jm)
	return kuo
}

// ClearSummaryVector clears the value of the "summary_vector" field.
func (kuo *KeepUpdateOne) ClearSummaryVector() *KeepUpdateOne {
	kuo.mutation.ClearSummaryVector()
	return kuo
}

// SetTitleVector sets the "title_vector" field.
func (kuo *KeepUpdateOne) SetTitleVector(jm json.RawMessage) *KeepUpdateOne {
	kuo.mutation.SetTitleVector(jm)
	return kuo
}

// AppendTitleVector appends jm to the "title_vector" field.
func (kuo *KeepUpdateOne) AppendTitleVector(jm json.RawMessage) *KeepUpdateOne {
	kuo.mutation.AppendTitleVector(jm)
	return kuo
}

// ClearTitleVector clears the value of the "title_vector" field.
func (kuo *KeepUpdateOne) ClearTitleVector() *KeepUpdateOne {
	kuo.mutation.ClearTitleVector()
	return kuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (kuo *KeepUpdateOne) SetUserID(id string) *KeepUpdateOne {
	kuo.mutation.SetUserID(id)
	return kuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (kuo *KeepUpdateOne) SetNillableUserID(id *string) *KeepUpdateOne {
	if id != nil {
		kuo = kuo.SetUserID(*id)
	}
	return kuo
}

// SetUser sets the "user" edge to the User entity.
func (kuo *KeepUpdateOne) SetUser(u *User) *KeepUpdateOne {
	return kuo.SetUserID(u.ID)
}

// Mutation returns the KeepMutation object of the builder.
func (kuo *KeepUpdateOne) Mutation() *KeepMutation {
	return kuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (kuo *KeepUpdateOne) ClearUser() *KeepUpdateOne {
	kuo.mutation.ClearUser()
	return kuo
}

// Where appends a list predicates to the KeepUpdate builder.
func (kuo *KeepUpdateOne) Where(ps ...predicate.Keep) *KeepUpdateOne {
	kuo.mutation.Where(ps...)
	return kuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kuo *KeepUpdateOne) Select(field string, fields ...string) *KeepUpdateOne {
	kuo.fields = append([]string{field}, fields...)
	return kuo
}

// Save executes the query and returns the updated Keep entity.
func (kuo *KeepUpdateOne) Save(ctx context.Context) (*Keep, error) {
	return withHooks(ctx, kuo.sqlSave, kuo.mutation, kuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kuo *KeepUpdateOne) SaveX(ctx context.Context) *Keep {
	node, err := kuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kuo *KeepUpdateOne) Exec(ctx context.Context) error {
	_, err := kuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kuo *KeepUpdateOne) ExecX(ctx context.Context) {
	if err := kuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kuo *KeepUpdateOne) sqlSave(ctx context.Context) (_node *Keep, err error) {
	_spec := sqlgraph.NewUpdateSpec(keep.Table, keep.Columns, sqlgraph.NewFieldSpec(keep.FieldID, field.TypeString))
	id, ok := kuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Keep.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, keep.FieldID)
		for _, f := range fields {
			if !keep.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != keep.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kuo.mutation.Title(); ok {
		_spec.SetField(keep.FieldTitle, field.TypeString, value)
	}
	if value, ok := kuo.mutation.Content(); ok {
		_spec.SetField(keep.FieldContent, field.TypeString, value)
	}
	if value, ok := kuo.mutation.IsPublic(); ok {
		_spec.SetField(keep.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := kuo.mutation.Tags(); ok {
		_spec.SetField(keep.FieldTags, field.TypeJSON, value)
	}
	if value, ok := kuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, keep.FieldTags, value)
		})
	}
	if value, ok := kuo.mutation.CreatedAt(); ok {
		_spec.SetField(keep.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := kuo.mutation.UpdatedAt(); ok {
		_spec.SetField(keep.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := kuo.mutation.Category(); ok {
		_spec.SetField(keep.FieldCategory, field.TypeString, value)
	}
	if value, ok := kuo.mutation.Views(); ok {
		_spec.SetField(keep.FieldViews, field.TypeInt32, value)
	}
	if value, ok := kuo.mutation.AddedViews(); ok {
		_spec.AddField(keep.FieldViews, field.TypeInt32, value)
	}
	if value, ok := kuo.mutation.Likes(); ok {
		_spec.SetField(keep.FieldLikes, field.TypeInt32, value)
	}
	if value, ok := kuo.mutation.AddedLikes(); ok {
		_spec.AddField(keep.FieldLikes, field.TypeInt32, value)
	}
	if value, ok := kuo.mutation.Summary(); ok {
		_spec.SetField(keep.FieldSummary, field.TypeString, value)
	}
	if value, ok := kuo.mutation.ExtraData(); ok {
		_spec.SetField(keep.FieldExtraData, field.TypeJSON, value)
	}
	if value, ok := kuo.mutation.AppendedExtraData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, keep.FieldExtraData, value)
		})
	}
	if value, ok := kuo.mutation.ContentVector(); ok {
		_spec.SetField(keep.FieldContentVector, field.TypeJSON, value)
	}
	if value, ok := kuo.mutation.AppendedContentVector(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, keep.FieldContentVector, value)
		})
	}
	if kuo.mutation.ContentVectorCleared() {
		_spec.ClearField(keep.FieldContentVector, field.TypeJSON)
	}
	if value, ok := kuo.mutation.SummaryVector(); ok {
		_spec.SetField(keep.FieldSummaryVector, field.TypeJSON, value)
	}
	if value, ok := kuo.mutation.AppendedSummaryVector(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, keep.FieldSummaryVector, value)
		})
	}
	if kuo.mutation.SummaryVectorCleared() {
		_spec.ClearField(keep.FieldSummaryVector, field.TypeJSON)
	}
	if value, ok := kuo.mutation.TitleVector(); ok {
		_spec.SetField(keep.FieldTitleVector, field.TypeJSON, value)
	}
	if value, ok := kuo.mutation.AppendedTitleVector(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, keep.FieldTitleVector, value)
		})
	}
	if kuo.mutation.TitleVectorCleared() {
		_spec.ClearField(keep.FieldTitleVector, field.TypeJSON)
	}
	if kuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   keep.UserTable,
			Columns: []string{keep.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   keep.UserTable,
			Columns: []string{keep.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Keep{config: kuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keep.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	kuo.mutation.done = true
	return _node, nil
}

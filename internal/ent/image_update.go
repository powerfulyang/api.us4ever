// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"api.us4ever/internal/ent/file"
	"api.us4ever/internal/ent/image"
	"api.us4ever/internal/ent/momentimage"
	"api.us4ever/internal/ent/predicate"
	"api.us4ever/internal/ent/user"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ImageUpdate is the builder for updating Image entities.
type ImageUpdate struct {
	config
	hooks    []Hook
	mutation *ImageMutation
}

// Where appends a list predicates to the ImageUpdate builder.
func (iu *ImageUpdate) Where(ps ...predicate.Image) *ImageUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetName sets the "name" field.
func (iu *ImageUpdate) SetName(s string) *ImageUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableName(s *string) *ImageUpdate {
	if s != nil {
		iu.SetName(*s)
	}
	return iu
}

// SetType sets the "type" field.
func (iu *ImageUpdate) SetType(s string) *ImageUpdate {
	iu.mutation.SetType(s)
	return iu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableType(s *string) *ImageUpdate {
	if s != nil {
		iu.SetType(*s)
	}
	return iu
}

// SetSize sets the "size" field.
func (iu *ImageUpdate) SetSize(i int) *ImageUpdate {
	iu.mutation.ResetSize()
	iu.mutation.SetSize(i)
	return iu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableSize(i *int) *ImageUpdate {
	if i != nil {
		iu.SetSize(*i)
	}
	return iu
}

// AddSize adds i to the "size" field.
func (iu *ImageUpdate) AddSize(i int) *ImageUpdate {
	iu.mutation.AddSize(i)
	return iu
}

// SetWidth sets the "width" field.
func (iu *ImageUpdate) SetWidth(i int32) *ImageUpdate {
	iu.mutation.ResetWidth()
	iu.mutation.SetWidth(i)
	return iu
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableWidth(i *int32) *ImageUpdate {
	if i != nil {
		iu.SetWidth(*i)
	}
	return iu
}

// AddWidth adds i to the "width" field.
func (iu *ImageUpdate) AddWidth(i int32) *ImageUpdate {
	iu.mutation.AddWidth(i)
	return iu
}

// SetHeight sets the "height" field.
func (iu *ImageUpdate) SetHeight(i int32) *ImageUpdate {
	iu.mutation.ResetHeight()
	iu.mutation.SetHeight(i)
	return iu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableHeight(i *int32) *ImageUpdate {
	if i != nil {
		iu.SetHeight(*i)
	}
	return iu
}

// AddHeight adds i to the "height" field.
func (iu *ImageUpdate) AddHeight(i int32) *ImageUpdate {
	iu.mutation.AddHeight(i)
	return iu
}

// SetExif sets the "exif" field.
func (iu *ImageUpdate) SetExif(jm json.RawMessage) *ImageUpdate {
	iu.mutation.SetExif(jm)
	return iu
}

// AppendExif appends jm to the "exif" field.
func (iu *ImageUpdate) AppendExif(jm json.RawMessage) *ImageUpdate {
	iu.mutation.AppendExif(jm)
	return iu
}

// SetHash sets the "hash" field.
func (iu *ImageUpdate) SetHash(s string) *ImageUpdate {
	iu.mutation.SetHash(s)
	return iu
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableHash(s *string) *ImageUpdate {
	if s != nil {
		iu.SetHash(*s)
	}
	return iu
}

// SetAddress sets the "address" field.
func (iu *ImageUpdate) SetAddress(s string) *ImageUpdate {
	iu.mutation.SetAddress(s)
	return iu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableAddress(s *string) *ImageUpdate {
	if s != nil {
		iu.SetAddress(*s)
	}
	return iu
}

// SetIsPublic sets the "isPublic" field.
func (iu *ImageUpdate) SetIsPublic(b bool) *ImageUpdate {
	iu.mutation.SetIsPublic(b)
	return iu
}

// SetNillableIsPublic sets the "isPublic" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableIsPublic(b *bool) *ImageUpdate {
	if b != nil {
		iu.SetIsPublic(*b)
	}
	return iu
}

// SetDescription sets the "description" field.
func (iu *ImageUpdate) SetDescription(s string) *ImageUpdate {
	iu.mutation.SetDescription(s)
	return iu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableDescription(s *string) *ImageUpdate {
	if s != nil {
		iu.SetDescription(*s)
	}
	return iu
}

// SetTags sets the "tags" field.
func (iu *ImageUpdate) SetTags(jm json.RawMessage) *ImageUpdate {
	iu.mutation.SetTags(jm)
	return iu
}

// AppendTags appends jm to the "tags" field.
func (iu *ImageUpdate) AppendTags(jm json.RawMessage) *ImageUpdate {
	iu.mutation.AppendTags(jm)
	return iu
}

// SetExtraData sets the "extraData" field.
func (iu *ImageUpdate) SetExtraData(jm json.RawMessage) *ImageUpdate {
	iu.mutation.SetExtraData(jm)
	return iu
}

// AppendExtraData appends jm to the "extraData" field.
func (iu *ImageUpdate) AppendExtraData(jm json.RawMessage) *ImageUpdate {
	iu.mutation.AppendExtraData(jm)
	return iu
}

// SetCategory sets the "category" field.
func (iu *ImageUpdate) SetCategory(s string) *ImageUpdate {
	iu.mutation.SetCategory(s)
	return iu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableCategory(s *string) *ImageUpdate {
	if s != nil {
		iu.SetCategory(*s)
	}
	return iu
}

// SetThumbnail10x sets the "thumbnail_10x" field.
func (iu *ImageUpdate) SetThumbnail10x(b []byte) *ImageUpdate {
	iu.mutation.SetThumbnail10x(b)
	return iu
}

// SetThumbnail320xID sets the "thumbnail_320x_id" field.
func (iu *ImageUpdate) SetThumbnail320xID(s string) *ImageUpdate {
	iu.mutation.SetThumbnail320xID(s)
	return iu
}

// SetNillableThumbnail320xID sets the "thumbnail_320x_id" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableThumbnail320xID(s *string) *ImageUpdate {
	if s != nil {
		iu.SetThumbnail320xID(*s)
	}
	return iu
}

// ClearThumbnail320xID clears the value of the "thumbnail_320x_id" field.
func (iu *ImageUpdate) ClearThumbnail320xID() *ImageUpdate {
	iu.mutation.ClearThumbnail320xID()
	return iu
}

// SetThumbnail768xID sets the "thumbnail_768x_id" field.
func (iu *ImageUpdate) SetThumbnail768xID(s string) *ImageUpdate {
	iu.mutation.SetThumbnail768xID(s)
	return iu
}

// SetNillableThumbnail768xID sets the "thumbnail_768x_id" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableThumbnail768xID(s *string) *ImageUpdate {
	if s != nil {
		iu.SetThumbnail768xID(*s)
	}
	return iu
}

// ClearThumbnail768xID clears the value of the "thumbnail_768x_id" field.
func (iu *ImageUpdate) ClearThumbnail768xID() *ImageUpdate {
	iu.mutation.ClearThumbnail768xID()
	return iu
}

// SetCompressedID sets the "compressed_id" field.
func (iu *ImageUpdate) SetCompressedID(s string) *ImageUpdate {
	iu.mutation.SetCompressedID(s)
	return iu
}

// SetNillableCompressedID sets the "compressed_id" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableCompressedID(s *string) *ImageUpdate {
	if s != nil {
		iu.SetCompressedID(*s)
	}
	return iu
}

// ClearCompressedID clears the value of the "compressed_id" field.
func (iu *ImageUpdate) ClearCompressedID() *ImageUpdate {
	iu.mutation.ClearCompressedID()
	return iu
}

// SetOriginalID sets the "original_id" field.
func (iu *ImageUpdate) SetOriginalID(s string) *ImageUpdate {
	iu.mutation.SetOriginalID(s)
	return iu
}

// SetNillableOriginalID sets the "original_id" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableOriginalID(s *string) *ImageUpdate {
	if s != nil {
		iu.SetOriginalID(*s)
	}
	return iu
}

// ClearOriginalID clears the value of the "original_id" field.
func (iu *ImageUpdate) ClearOriginalID() *ImageUpdate {
	iu.mutation.ClearOriginalID()
	return iu
}

// SetUploadedBy sets the "uploadedBy" field.
func (iu *ImageUpdate) SetUploadedBy(s string) *ImageUpdate {
	iu.mutation.SetUploadedBy(s)
	return iu
}

// SetNillableUploadedBy sets the "uploadedBy" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableUploadedBy(s *string) *ImageUpdate {
	if s != nil {
		iu.SetUploadedBy(*s)
	}
	return iu
}

// ClearUploadedBy clears the value of the "uploadedBy" field.
func (iu *ImageUpdate) ClearUploadedBy() *ImageUpdate {
	iu.mutation.ClearUploadedBy()
	return iu
}

// SetCreatedAt sets the "createdAt" field.
func (iu *ImageUpdate) SetCreatedAt(t time.Time) *ImageUpdate {
	iu.mutation.SetCreatedAt(t)
	return iu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableCreatedAt(t *time.Time) *ImageUpdate {
	if t != nil {
		iu.SetCreatedAt(*t)
	}
	return iu
}

// SetUpdatedAt sets the "updatedAt" field.
func (iu *ImageUpdate) SetUpdatedAt(t time.Time) *ImageUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableUpdatedAt(t *time.Time) *ImageUpdate {
	if t != nil {
		iu.SetUpdatedAt(*t)
	}
	return iu
}

// SetCompressed sets the "compressed" edge to the File entity.
func (iu *ImageUpdate) SetCompressed(f *File) *ImageUpdate {
	return iu.SetCompressedID(f.ID)
}

// SetOriginal sets the "original" edge to the File entity.
func (iu *ImageUpdate) SetOriginal(f *File) *ImageUpdate {
	return iu.SetOriginalID(f.ID)
}

// SetThumbnail320x sets the "thumbnail320x" edge to the File entity.
func (iu *ImageUpdate) SetThumbnail320x(f *File) *ImageUpdate {
	return iu.SetThumbnail320xID(f.ID)
}

// SetThumbnail768x sets the "thumbnail768x" edge to the File entity.
func (iu *ImageUpdate) SetThumbnail768x(f *File) *ImageUpdate {
	return iu.SetThumbnail768xID(f.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (iu *ImageUpdate) SetUserID(id string) *ImageUpdate {
	iu.mutation.SetUserID(id)
	return iu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (iu *ImageUpdate) SetNillableUserID(id *string) *ImageUpdate {
	if id != nil {
		iu = iu.SetUserID(*id)
	}
	return iu
}

// SetUser sets the "user" edge to the User entity.
func (iu *ImageUpdate) SetUser(u *User) *ImageUpdate {
	return iu.SetUserID(u.ID)
}

// AddMomentImageIDs adds the "moment_images" edge to the MomentImage entity by IDs.
func (iu *ImageUpdate) AddMomentImageIDs(ids ...uint) *ImageUpdate {
	iu.mutation.AddMomentImageIDs(ids...)
	return iu
}

// AddMomentImages adds the "moment_images" edges to the MomentImage entity.
func (iu *ImageUpdate) AddMomentImages(m ...*MomentImage) *ImageUpdate {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return iu.AddMomentImageIDs(ids...)
}

// Mutation returns the ImageMutation object of the builder.
func (iu *ImageUpdate) Mutation() *ImageMutation {
	return iu.mutation
}

// ClearCompressed clears the "compressed" edge to the File entity.
func (iu *ImageUpdate) ClearCompressed() *ImageUpdate {
	iu.mutation.ClearCompressed()
	return iu
}

// ClearOriginal clears the "original" edge to the File entity.
func (iu *ImageUpdate) ClearOriginal() *ImageUpdate {
	iu.mutation.ClearOriginal()
	return iu
}

// ClearThumbnail320x clears the "thumbnail320x" edge to the File entity.
func (iu *ImageUpdate) ClearThumbnail320x() *ImageUpdate {
	iu.mutation.ClearThumbnail320x()
	return iu
}

// ClearThumbnail768x clears the "thumbnail768x" edge to the File entity.
func (iu *ImageUpdate) ClearThumbnail768x() *ImageUpdate {
	iu.mutation.ClearThumbnail768x()
	return iu
}

// ClearUser clears the "user" edge to the User entity.
func (iu *ImageUpdate) ClearUser() *ImageUpdate {
	iu.mutation.ClearUser()
	return iu
}

// ClearMomentImages clears all "moment_images" edges to the MomentImage entity.
func (iu *ImageUpdate) ClearMomentImages() *ImageUpdate {
	iu.mutation.ClearMomentImages()
	return iu
}

// RemoveMomentImageIDs removes the "moment_images" edge to MomentImage entities by IDs.
func (iu *ImageUpdate) RemoveMomentImageIDs(ids ...uint) *ImageUpdate {
	iu.mutation.RemoveMomentImageIDs(ids...)
	return iu
}

// RemoveMomentImages removes "moment_images" edges to MomentImage entities.
func (iu *ImageUpdate) RemoveMomentImages(m ...*MomentImage) *ImageUpdate {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return iu.RemoveMomentImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ImageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ImageUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ImageUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ImageUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *ImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(image.Table, image.Columns, sqlgraph.NewFieldSpec(image.FieldID, field.TypeString))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(image.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.GetType(); ok {
		_spec.SetField(image.FieldType, field.TypeString, value)
	}
	if value, ok := iu.mutation.Size(); ok {
		_spec.SetField(image.FieldSize, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedSize(); ok {
		_spec.AddField(image.FieldSize, field.TypeInt, value)
	}
	if value, ok := iu.mutation.Width(); ok {
		_spec.SetField(image.FieldWidth, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedWidth(); ok {
		_spec.AddField(image.FieldWidth, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.Height(); ok {
		_spec.SetField(image.FieldHeight, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedHeight(); ok {
		_spec.AddField(image.FieldHeight, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.Exif(); ok {
		_spec.SetField(image.FieldExif, field.TypeJSON, value)
	}
	if value, ok := iu.mutation.AppendedExif(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, image.FieldExif, value)
		})
	}
	if value, ok := iu.mutation.Hash(); ok {
		_spec.SetField(image.FieldHash, field.TypeString, value)
	}
	if value, ok := iu.mutation.Address(); ok {
		_spec.SetField(image.FieldAddress, field.TypeString, value)
	}
	if value, ok := iu.mutation.IsPublic(); ok {
		_spec.SetField(image.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := iu.mutation.Description(); ok {
		_spec.SetField(image.FieldDescription, field.TypeString, value)
	}
	if value, ok := iu.mutation.Tags(); ok {
		_spec.SetField(image.FieldTags, field.TypeJSON, value)
	}
	if value, ok := iu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, image.FieldTags, value)
		})
	}
	if value, ok := iu.mutation.ExtraData(); ok {
		_spec.SetField(image.FieldExtraData, field.TypeJSON, value)
	}
	if value, ok := iu.mutation.AppendedExtraData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, image.FieldExtraData, value)
		})
	}
	if value, ok := iu.mutation.Category(); ok {
		_spec.SetField(image.FieldCategory, field.TypeString, value)
	}
	if value, ok := iu.mutation.Thumbnail10x(); ok {
		_spec.SetField(image.FieldThumbnail10x, field.TypeBytes, value)
	}
	if value, ok := iu.mutation.CreatedAt(); ok {
		_spec.SetField(image.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(image.FieldUpdatedAt, field.TypeTime, value)
	}
	if iu.mutation.CompressedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.CompressedTable,
			Columns: []string{image.CompressedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CompressedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.CompressedTable,
			Columns: []string{image.CompressedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.OriginalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.OriginalTable,
			Columns: []string{image.OriginalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.OriginalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.OriginalTable,
			Columns: []string{image.OriginalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.Thumbnail320xCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.Thumbnail320xTable,
			Columns: []string{image.Thumbnail320xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.Thumbnail320xIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.Thumbnail320xTable,
			Columns: []string{image.Thumbnail320xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.Thumbnail768xCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.Thumbnail768xTable,
			Columns: []string{image.Thumbnail768xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.Thumbnail768xIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.Thumbnail768xTable,
			Columns: []string{image.Thumbnail768xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.UserTable,
			Columns: []string{image.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.UserTable,
			Columns: []string{image.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.MomentImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   image.MomentImagesTable,
			Columns: []string{image.MomentImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentimage.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedMomentImagesIDs(); len(nodes) > 0 && !iu.mutation.MomentImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   image.MomentImagesTable,
			Columns: []string{image.MomentImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentimage.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.MomentImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   image.MomentImagesTable,
			Columns: []string{image.MomentImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentimage.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{image.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// ImageUpdateOne is the builder for updating a single Image entity.
type ImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImageMutation
}

// SetName sets the "name" field.
func (iuo *ImageUpdateOne) SetName(s string) *ImageUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableName(s *string) *ImageUpdateOne {
	if s != nil {
		iuo.SetName(*s)
	}
	return iuo
}

// SetType sets the "type" field.
func (iuo *ImageUpdateOne) SetType(s string) *ImageUpdateOne {
	iuo.mutation.SetType(s)
	return iuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableType(s *string) *ImageUpdateOne {
	if s != nil {
		iuo.SetType(*s)
	}
	return iuo
}

// SetSize sets the "size" field.
func (iuo *ImageUpdateOne) SetSize(i int) *ImageUpdateOne {
	iuo.mutation.ResetSize()
	iuo.mutation.SetSize(i)
	return iuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableSize(i *int) *ImageUpdateOne {
	if i != nil {
		iuo.SetSize(*i)
	}
	return iuo
}

// AddSize adds i to the "size" field.
func (iuo *ImageUpdateOne) AddSize(i int) *ImageUpdateOne {
	iuo.mutation.AddSize(i)
	return iuo
}

// SetWidth sets the "width" field.
func (iuo *ImageUpdateOne) SetWidth(i int32) *ImageUpdateOne {
	iuo.mutation.ResetWidth()
	iuo.mutation.SetWidth(i)
	return iuo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableWidth(i *int32) *ImageUpdateOne {
	if i != nil {
		iuo.SetWidth(*i)
	}
	return iuo
}

// AddWidth adds i to the "width" field.
func (iuo *ImageUpdateOne) AddWidth(i int32) *ImageUpdateOne {
	iuo.mutation.AddWidth(i)
	return iuo
}

// SetHeight sets the "height" field.
func (iuo *ImageUpdateOne) SetHeight(i int32) *ImageUpdateOne {
	iuo.mutation.ResetHeight()
	iuo.mutation.SetHeight(i)
	return iuo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableHeight(i *int32) *ImageUpdateOne {
	if i != nil {
		iuo.SetHeight(*i)
	}
	return iuo
}

// AddHeight adds i to the "height" field.
func (iuo *ImageUpdateOne) AddHeight(i int32) *ImageUpdateOne {
	iuo.mutation.AddHeight(i)
	return iuo
}

// SetExif sets the "exif" field.
func (iuo *ImageUpdateOne) SetExif(jm json.RawMessage) *ImageUpdateOne {
	iuo.mutation.SetExif(jm)
	return iuo
}

// AppendExif appends jm to the "exif" field.
func (iuo *ImageUpdateOne) AppendExif(jm json.RawMessage) *ImageUpdateOne {
	iuo.mutation.AppendExif(jm)
	return iuo
}

// SetHash sets the "hash" field.
func (iuo *ImageUpdateOne) SetHash(s string) *ImageUpdateOne {
	iuo.mutation.SetHash(s)
	return iuo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableHash(s *string) *ImageUpdateOne {
	if s != nil {
		iuo.SetHash(*s)
	}
	return iuo
}

// SetAddress sets the "address" field.
func (iuo *ImageUpdateOne) SetAddress(s string) *ImageUpdateOne {
	iuo.mutation.SetAddress(s)
	return iuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableAddress(s *string) *ImageUpdateOne {
	if s != nil {
		iuo.SetAddress(*s)
	}
	return iuo
}

// SetIsPublic sets the "isPublic" field.
func (iuo *ImageUpdateOne) SetIsPublic(b bool) *ImageUpdateOne {
	iuo.mutation.SetIsPublic(b)
	return iuo
}

// SetNillableIsPublic sets the "isPublic" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableIsPublic(b *bool) *ImageUpdateOne {
	if b != nil {
		iuo.SetIsPublic(*b)
	}
	return iuo
}

// SetDescription sets the "description" field.
func (iuo *ImageUpdateOne) SetDescription(s string) *ImageUpdateOne {
	iuo.mutation.SetDescription(s)
	return iuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableDescription(s *string) *ImageUpdateOne {
	if s != nil {
		iuo.SetDescription(*s)
	}
	return iuo
}

// SetTags sets the "tags" field.
func (iuo *ImageUpdateOne) SetTags(jm json.RawMessage) *ImageUpdateOne {
	iuo.mutation.SetTags(jm)
	return iuo
}

// AppendTags appends jm to the "tags" field.
func (iuo *ImageUpdateOne) AppendTags(jm json.RawMessage) *ImageUpdateOne {
	iuo.mutation.AppendTags(jm)
	return iuo
}

// SetExtraData sets the "extraData" field.
func (iuo *ImageUpdateOne) SetExtraData(jm json.RawMessage) *ImageUpdateOne {
	iuo.mutation.SetExtraData(jm)
	return iuo
}

// AppendExtraData appends jm to the "extraData" field.
func (iuo *ImageUpdateOne) AppendExtraData(jm json.RawMessage) *ImageUpdateOne {
	iuo.mutation.AppendExtraData(jm)
	return iuo
}

// SetCategory sets the "category" field.
func (iuo *ImageUpdateOne) SetCategory(s string) *ImageUpdateOne {
	iuo.mutation.SetCategory(s)
	return iuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableCategory(s *string) *ImageUpdateOne {
	if s != nil {
		iuo.SetCategory(*s)
	}
	return iuo
}

// SetThumbnail10x sets the "thumbnail_10x" field.
func (iuo *ImageUpdateOne) SetThumbnail10x(b []byte) *ImageUpdateOne {
	iuo.mutation.SetThumbnail10x(b)
	return iuo
}

// SetThumbnail320xID sets the "thumbnail_320x_id" field.
func (iuo *ImageUpdateOne) SetThumbnail320xID(s string) *ImageUpdateOne {
	iuo.mutation.SetThumbnail320xID(s)
	return iuo
}

// SetNillableThumbnail320xID sets the "thumbnail_320x_id" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableThumbnail320xID(s *string) *ImageUpdateOne {
	if s != nil {
		iuo.SetThumbnail320xID(*s)
	}
	return iuo
}

// ClearThumbnail320xID clears the value of the "thumbnail_320x_id" field.
func (iuo *ImageUpdateOne) ClearThumbnail320xID() *ImageUpdateOne {
	iuo.mutation.ClearThumbnail320xID()
	return iuo
}

// SetThumbnail768xID sets the "thumbnail_768x_id" field.
func (iuo *ImageUpdateOne) SetThumbnail768xID(s string) *ImageUpdateOne {
	iuo.mutation.SetThumbnail768xID(s)
	return iuo
}

// SetNillableThumbnail768xID sets the "thumbnail_768x_id" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableThumbnail768xID(s *string) *ImageUpdateOne {
	if s != nil {
		iuo.SetThumbnail768xID(*s)
	}
	return iuo
}

// ClearThumbnail768xID clears the value of the "thumbnail_768x_id" field.
func (iuo *ImageUpdateOne) ClearThumbnail768xID() *ImageUpdateOne {
	iuo.mutation.ClearThumbnail768xID()
	return iuo
}

// SetCompressedID sets the "compressed_id" field.
func (iuo *ImageUpdateOne) SetCompressedID(s string) *ImageUpdateOne {
	iuo.mutation.SetCompressedID(s)
	return iuo
}

// SetNillableCompressedID sets the "compressed_id" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableCompressedID(s *string) *ImageUpdateOne {
	if s != nil {
		iuo.SetCompressedID(*s)
	}
	return iuo
}

// ClearCompressedID clears the value of the "compressed_id" field.
func (iuo *ImageUpdateOne) ClearCompressedID() *ImageUpdateOne {
	iuo.mutation.ClearCompressedID()
	return iuo
}

// SetOriginalID sets the "original_id" field.
func (iuo *ImageUpdateOne) SetOriginalID(s string) *ImageUpdateOne {
	iuo.mutation.SetOriginalID(s)
	return iuo
}

// SetNillableOriginalID sets the "original_id" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableOriginalID(s *string) *ImageUpdateOne {
	if s != nil {
		iuo.SetOriginalID(*s)
	}
	return iuo
}

// ClearOriginalID clears the value of the "original_id" field.
func (iuo *ImageUpdateOne) ClearOriginalID() *ImageUpdateOne {
	iuo.mutation.ClearOriginalID()
	return iuo
}

// SetUploadedBy sets the "uploadedBy" field.
func (iuo *ImageUpdateOne) SetUploadedBy(s string) *ImageUpdateOne {
	iuo.mutation.SetUploadedBy(s)
	return iuo
}

// SetNillableUploadedBy sets the "uploadedBy" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableUploadedBy(s *string) *ImageUpdateOne {
	if s != nil {
		iuo.SetUploadedBy(*s)
	}
	return iuo
}

// ClearUploadedBy clears the value of the "uploadedBy" field.
func (iuo *ImageUpdateOne) ClearUploadedBy() *ImageUpdateOne {
	iuo.mutation.ClearUploadedBy()
	return iuo
}

// SetCreatedAt sets the "createdAt" field.
func (iuo *ImageUpdateOne) SetCreatedAt(t time.Time) *ImageUpdateOne {
	iuo.mutation.SetCreatedAt(t)
	return iuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableCreatedAt(t *time.Time) *ImageUpdateOne {
	if t != nil {
		iuo.SetCreatedAt(*t)
	}
	return iuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (iuo *ImageUpdateOne) SetUpdatedAt(t time.Time) *ImageUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableUpdatedAt(t *time.Time) *ImageUpdateOne {
	if t != nil {
		iuo.SetUpdatedAt(*t)
	}
	return iuo
}

// SetCompressed sets the "compressed" edge to the File entity.
func (iuo *ImageUpdateOne) SetCompressed(f *File) *ImageUpdateOne {
	return iuo.SetCompressedID(f.ID)
}

// SetOriginal sets the "original" edge to the File entity.
func (iuo *ImageUpdateOne) SetOriginal(f *File) *ImageUpdateOne {
	return iuo.SetOriginalID(f.ID)
}

// SetThumbnail320x sets the "thumbnail320x" edge to the File entity.
func (iuo *ImageUpdateOne) SetThumbnail320x(f *File) *ImageUpdateOne {
	return iuo.SetThumbnail320xID(f.ID)
}

// SetThumbnail768x sets the "thumbnail768x" edge to the File entity.
func (iuo *ImageUpdateOne) SetThumbnail768x(f *File) *ImageUpdateOne {
	return iuo.SetThumbnail768xID(f.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (iuo *ImageUpdateOne) SetUserID(id string) *ImageUpdateOne {
	iuo.mutation.SetUserID(id)
	return iuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableUserID(id *string) *ImageUpdateOne {
	if id != nil {
		iuo = iuo.SetUserID(*id)
	}
	return iuo
}

// SetUser sets the "user" edge to the User entity.
func (iuo *ImageUpdateOne) SetUser(u *User) *ImageUpdateOne {
	return iuo.SetUserID(u.ID)
}

// AddMomentImageIDs adds the "moment_images" edge to the MomentImage entity by IDs.
func (iuo *ImageUpdateOne) AddMomentImageIDs(ids ...uint) *ImageUpdateOne {
	iuo.mutation.AddMomentImageIDs(ids...)
	return iuo
}

// AddMomentImages adds the "moment_images" edges to the MomentImage entity.
func (iuo *ImageUpdateOne) AddMomentImages(m ...*MomentImage) *ImageUpdateOne {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return iuo.AddMomentImageIDs(ids...)
}

// Mutation returns the ImageMutation object of the builder.
func (iuo *ImageUpdateOne) Mutation() *ImageMutation {
	return iuo.mutation
}

// ClearCompressed clears the "compressed" edge to the File entity.
func (iuo *ImageUpdateOne) ClearCompressed() *ImageUpdateOne {
	iuo.mutation.ClearCompressed()
	return iuo
}

// ClearOriginal clears the "original" edge to the File entity.
func (iuo *ImageUpdateOne) ClearOriginal() *ImageUpdateOne {
	iuo.mutation.ClearOriginal()
	return iuo
}

// ClearThumbnail320x clears the "thumbnail320x" edge to the File entity.
func (iuo *ImageUpdateOne) ClearThumbnail320x() *ImageUpdateOne {
	iuo.mutation.ClearThumbnail320x()
	return iuo
}

// ClearThumbnail768x clears the "thumbnail768x" edge to the File entity.
func (iuo *ImageUpdateOne) ClearThumbnail768x() *ImageUpdateOne {
	iuo.mutation.ClearThumbnail768x()
	return iuo
}

// ClearUser clears the "user" edge to the User entity.
func (iuo *ImageUpdateOne) ClearUser() *ImageUpdateOne {
	iuo.mutation.ClearUser()
	return iuo
}

// ClearMomentImages clears all "moment_images" edges to the MomentImage entity.
func (iuo *ImageUpdateOne) ClearMomentImages() *ImageUpdateOne {
	iuo.mutation.ClearMomentImages()
	return iuo
}

// RemoveMomentImageIDs removes the "moment_images" edge to MomentImage entities by IDs.
func (iuo *ImageUpdateOne) RemoveMomentImageIDs(ids ...uint) *ImageUpdateOne {
	iuo.mutation.RemoveMomentImageIDs(ids...)
	return iuo
}

// RemoveMomentImages removes "moment_images" edges to MomentImage entities.
func (iuo *ImageUpdateOne) RemoveMomentImages(m ...*MomentImage) *ImageUpdateOne {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return iuo.RemoveMomentImageIDs(ids...)
}

// Where appends a list predicates to the ImageUpdate builder.
func (iuo *ImageUpdateOne) Where(ps ...predicate.Image) *ImageUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ImageUpdateOne) Select(field string, fields ...string) *ImageUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Image entity.
func (iuo *ImageUpdateOne) Save(ctx context.Context) (*Image, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ImageUpdateOne) SaveX(ctx context.Context) *Image {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ImageUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ImageUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *ImageUpdateOne) sqlSave(ctx context.Context) (_node *Image, err error) {
	_spec := sqlgraph.NewUpdateSpec(image.Table, image.Columns, sqlgraph.NewFieldSpec(image.FieldID, field.TypeString))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Image.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, image.FieldID)
		for _, f := range fields {
			if !image.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != image.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(image.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.GetType(); ok {
		_spec.SetField(image.FieldType, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Size(); ok {
		_spec.SetField(image.FieldSize, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedSize(); ok {
		_spec.AddField(image.FieldSize, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.Width(); ok {
		_spec.SetField(image.FieldWidth, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedWidth(); ok {
		_spec.AddField(image.FieldWidth, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.Height(); ok {
		_spec.SetField(image.FieldHeight, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedHeight(); ok {
		_spec.AddField(image.FieldHeight, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.Exif(); ok {
		_spec.SetField(image.FieldExif, field.TypeJSON, value)
	}
	if value, ok := iuo.mutation.AppendedExif(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, image.FieldExif, value)
		})
	}
	if value, ok := iuo.mutation.Hash(); ok {
		_spec.SetField(image.FieldHash, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Address(); ok {
		_spec.SetField(image.FieldAddress, field.TypeString, value)
	}
	if value, ok := iuo.mutation.IsPublic(); ok {
		_spec.SetField(image.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := iuo.mutation.Description(); ok {
		_spec.SetField(image.FieldDescription, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Tags(); ok {
		_spec.SetField(image.FieldTags, field.TypeJSON, value)
	}
	if value, ok := iuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, image.FieldTags, value)
		})
	}
	if value, ok := iuo.mutation.ExtraData(); ok {
		_spec.SetField(image.FieldExtraData, field.TypeJSON, value)
	}
	if value, ok := iuo.mutation.AppendedExtraData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, image.FieldExtraData, value)
		})
	}
	if value, ok := iuo.mutation.Category(); ok {
		_spec.SetField(image.FieldCategory, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Thumbnail10x(); ok {
		_spec.SetField(image.FieldThumbnail10x, field.TypeBytes, value)
	}
	if value, ok := iuo.mutation.CreatedAt(); ok {
		_spec.SetField(image.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(image.FieldUpdatedAt, field.TypeTime, value)
	}
	if iuo.mutation.CompressedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.CompressedTable,
			Columns: []string{image.CompressedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CompressedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.CompressedTable,
			Columns: []string{image.CompressedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.OriginalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.OriginalTable,
			Columns: []string{image.OriginalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.OriginalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.OriginalTable,
			Columns: []string{image.OriginalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.Thumbnail320xCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.Thumbnail320xTable,
			Columns: []string{image.Thumbnail320xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.Thumbnail320xIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.Thumbnail320xTable,
			Columns: []string{image.Thumbnail320xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.Thumbnail768xCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.Thumbnail768xTable,
			Columns: []string{image.Thumbnail768xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.Thumbnail768xIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.Thumbnail768xTable,
			Columns: []string{image.Thumbnail768xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.UserTable,
			Columns: []string{image.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.UserTable,
			Columns: []string{image.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.MomentImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   image.MomentImagesTable,
			Columns: []string{image.MomentImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentimage.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedMomentImagesIDs(); len(nodes) > 0 && !iuo.mutation.MomentImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   image.MomentImagesTable,
			Columns: []string{image.MomentImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentimage.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.MomentImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   image.MomentImagesTable,
			Columns: []string{image.MomentImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentimage.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Image{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{image.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"api.us4ever/internal/ent/moment"
	"api.us4ever/internal/ent/momentvideo"
	"api.us4ever/internal/ent/video"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MomentVideoCreate is the builder for creating a MomentVideo entity.
type MomentVideoCreate struct {
	config
	mutation *MomentVideoMutation
	hooks    []Hook
}

// SetVideoId sets the "videoId" field.
func (mvc *MomentVideoCreate) SetVideoId(s string) *MomentVideoCreate {
	mvc.mutation.SetVideoId(s)
	return mvc
}

// SetNillableVideoId sets the "videoId" field if the given value is not nil.
func (mvc *MomentVideoCreate) SetNillableVideoId(s *string) *MomentVideoCreate {
	if s != nil {
		mvc.SetVideoId(*s)
	}
	return mvc
}

// SetMomentId sets the "momentId" field.
func (mvc *MomentVideoCreate) SetMomentId(s string) *MomentVideoCreate {
	mvc.mutation.SetMomentId(s)
	return mvc
}

// SetNillableMomentId sets the "momentId" field if the given value is not nil.
func (mvc *MomentVideoCreate) SetNillableMomentId(s *string) *MomentVideoCreate {
	if s != nil {
		mvc.SetMomentId(*s)
	}
	return mvc
}

// SetSort sets the "sort" field.
func (mvc *MomentVideoCreate) SetSort(i int32) *MomentVideoCreate {
	mvc.mutation.SetSort(i)
	return mvc
}

// SetCreatedAt sets the "createdAt" field.
func (mvc *MomentVideoCreate) SetCreatedAt(t time.Time) *MomentVideoCreate {
	mvc.mutation.SetCreatedAt(t)
	return mvc
}

// SetUpdatedAt sets the "updatedAt" field.
func (mvc *MomentVideoCreate) SetUpdatedAt(t time.Time) *MomentVideoCreate {
	mvc.mutation.SetUpdatedAt(t)
	return mvc
}

// SetID sets the "id" field.
func (mvc *MomentVideoCreate) SetID(u uint) *MomentVideoCreate {
	mvc.mutation.SetID(u)
	return mvc
}

// SetMomentID sets the "moment" edge to the Moment entity by ID.
func (mvc *MomentVideoCreate) SetMomentID(id string) *MomentVideoCreate {
	mvc.mutation.SetMomentID(id)
	return mvc
}

// SetNillableMomentID sets the "moment" edge to the Moment entity by ID if the given value is not nil.
func (mvc *MomentVideoCreate) SetNillableMomentID(id *string) *MomentVideoCreate {
	if id != nil {
		mvc = mvc.SetMomentID(*id)
	}
	return mvc
}

// SetMoment sets the "moment" edge to the Moment entity.
func (mvc *MomentVideoCreate) SetMoment(m *Moment) *MomentVideoCreate {
	return mvc.SetMomentID(m.ID)
}

// SetVideoID sets the "video" edge to the Video entity by ID.
func (mvc *MomentVideoCreate) SetVideoID(id string) *MomentVideoCreate {
	mvc.mutation.SetVideoID(id)
	return mvc
}

// SetNillableVideoID sets the "video" edge to the Video entity by ID if the given value is not nil.
func (mvc *MomentVideoCreate) SetNillableVideoID(id *string) *MomentVideoCreate {
	if id != nil {
		mvc = mvc.SetVideoID(*id)
	}
	return mvc
}

// SetVideo sets the "video" edge to the Video entity.
func (mvc *MomentVideoCreate) SetVideo(v *Video) *MomentVideoCreate {
	return mvc.SetVideoID(v.ID)
}

// Mutation returns the MomentVideoMutation object of the builder.
func (mvc *MomentVideoCreate) Mutation() *MomentVideoMutation {
	return mvc.mutation
}

// Save creates the MomentVideo in the database.
func (mvc *MomentVideoCreate) Save(ctx context.Context) (*MomentVideo, error) {
	return withHooks(ctx, mvc.sqlSave, mvc.mutation, mvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mvc *MomentVideoCreate) SaveX(ctx context.Context) *MomentVideo {
	v, err := mvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mvc *MomentVideoCreate) Exec(ctx context.Context) error {
	_, err := mvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvc *MomentVideoCreate) ExecX(ctx context.Context) {
	if err := mvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mvc *MomentVideoCreate) check() error {
	if _, ok := mvc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "MomentVideo.sort"`)}
	}
	if _, ok := mvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "MomentVideo.createdAt"`)}
	}
	if _, ok := mvc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "MomentVideo.updatedAt"`)}
	}
	return nil
}

func (mvc *MomentVideoCreate) sqlSave(ctx context.Context) (*MomentVideo, error) {
	if err := mvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	mvc.mutation.id = &_node.ID
	mvc.mutation.done = true
	return _node, nil
}

func (mvc *MomentVideoCreate) createSpec() (*MomentVideo, *sqlgraph.CreateSpec) {
	var (
		_node = &MomentVideo{config: mvc.config}
		_spec = sqlgraph.NewCreateSpec(momentvideo.Table, sqlgraph.NewFieldSpec(momentvideo.FieldID, field.TypeUint))
	)
	if id, ok := mvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mvc.mutation.Sort(); ok {
		_spec.SetField(momentvideo.FieldSort, field.TypeInt32, value)
		_node.Sort = value
	}
	if value, ok := mvc.mutation.CreatedAt(); ok {
		_spec.SetField(momentvideo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mvc.mutation.UpdatedAt(); ok {
		_spec.SetField(momentvideo.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := mvc.mutation.MomentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   momentvideo.MomentTable,
			Columns: []string{momentvideo.MomentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MomentId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mvc.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   momentvideo.VideoTable,
			Columns: []string{momentvideo.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VideoId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MomentVideoCreateBulk is the builder for creating many MomentVideo entities in bulk.
type MomentVideoCreateBulk struct {
	config
	err      error
	builders []*MomentVideoCreate
}

// Save creates the MomentVideo entities in the database.
func (mvcb *MomentVideoCreateBulk) Save(ctx context.Context) ([]*MomentVideo, error) {
	if mvcb.err != nil {
		return nil, mvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mvcb.builders))
	nodes := make([]*MomentVideo, len(mvcb.builders))
	mutators := make([]Mutator, len(mvcb.builders))
	for i := range mvcb.builders {
		func(i int, root context.Context) {
			builder := mvcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MomentVideoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mvcb *MomentVideoCreateBulk) SaveX(ctx context.Context) []*MomentVideo {
	v, err := mvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mvcb *MomentVideoCreateBulk) Exec(ctx context.Context) error {
	_, err := mvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvcb *MomentVideoCreateBulk) ExecX(ctx context.Context) {
	if err := mvcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"api.us4ever/internal/ent/file"
	"api.us4ever/internal/ent/image"
	"api.us4ever/internal/ent/momentimage"
	"api.us4ever/internal/ent/user"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImageCreate is the builder for creating a Image entity.
type ImageCreate struct {
	config
	mutation *ImageMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ic *ImageCreate) SetName(s string) *ImageCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetType sets the "type" field.
func (ic *ImageCreate) SetType(s string) *ImageCreate {
	ic.mutation.SetType(s)
	return ic
}

// SetSize sets the "size" field.
func (ic *ImageCreate) SetSize(i int) *ImageCreate {
	ic.mutation.SetSize(i)
	return ic
}

// SetWidth sets the "width" field.
func (ic *ImageCreate) SetWidth(i int32) *ImageCreate {
	ic.mutation.SetWidth(i)
	return ic
}

// SetHeight sets the "height" field.
func (ic *ImageCreate) SetHeight(i int32) *ImageCreate {
	ic.mutation.SetHeight(i)
	return ic
}

// SetExif sets the "exif" field.
func (ic *ImageCreate) SetExif(jm json.RawMessage) *ImageCreate {
	ic.mutation.SetExif(jm)
	return ic
}

// SetHash sets the "hash" field.
func (ic *ImageCreate) SetHash(s string) *ImageCreate {
	ic.mutation.SetHash(s)
	return ic
}

// SetAddress sets the "address" field.
func (ic *ImageCreate) SetAddress(s string) *ImageCreate {
	ic.mutation.SetAddress(s)
	return ic
}

// SetIsPublic sets the "isPublic" field.
func (ic *ImageCreate) SetIsPublic(b bool) *ImageCreate {
	ic.mutation.SetIsPublic(b)
	return ic
}

// SetDescription sets the "description" field.
func (ic *ImageCreate) SetDescription(s string) *ImageCreate {
	ic.mutation.SetDescription(s)
	return ic
}

// SetTags sets the "tags" field.
func (ic *ImageCreate) SetTags(jm json.RawMessage) *ImageCreate {
	ic.mutation.SetTags(jm)
	return ic
}

// SetExtraData sets the "extraData" field.
func (ic *ImageCreate) SetExtraData(jm json.RawMessage) *ImageCreate {
	ic.mutation.SetExtraData(jm)
	return ic
}

// SetCategory sets the "category" field.
func (ic *ImageCreate) SetCategory(s string) *ImageCreate {
	ic.mutation.SetCategory(s)
	return ic
}

// SetThumbnail10x sets the "thumbnail_10x" field.
func (ic *ImageCreate) SetThumbnail10x(b []byte) *ImageCreate {
	ic.mutation.SetThumbnail10x(b)
	return ic
}

// SetThumbnail320xID sets the "thumbnail_320x_id" field.
func (ic *ImageCreate) SetThumbnail320xID(s string) *ImageCreate {
	ic.mutation.SetThumbnail320xID(s)
	return ic
}

// SetNillableThumbnail320xID sets the "thumbnail_320x_id" field if the given value is not nil.
func (ic *ImageCreate) SetNillableThumbnail320xID(s *string) *ImageCreate {
	if s != nil {
		ic.SetThumbnail320xID(*s)
	}
	return ic
}

// SetThumbnail768xID sets the "thumbnail_768x_id" field.
func (ic *ImageCreate) SetThumbnail768xID(s string) *ImageCreate {
	ic.mutation.SetThumbnail768xID(s)
	return ic
}

// SetNillableThumbnail768xID sets the "thumbnail_768x_id" field if the given value is not nil.
func (ic *ImageCreate) SetNillableThumbnail768xID(s *string) *ImageCreate {
	if s != nil {
		ic.SetThumbnail768xID(*s)
	}
	return ic
}

// SetCompressedID sets the "compressed_id" field.
func (ic *ImageCreate) SetCompressedID(s string) *ImageCreate {
	ic.mutation.SetCompressedID(s)
	return ic
}

// SetNillableCompressedID sets the "compressed_id" field if the given value is not nil.
func (ic *ImageCreate) SetNillableCompressedID(s *string) *ImageCreate {
	if s != nil {
		ic.SetCompressedID(*s)
	}
	return ic
}

// SetOriginalID sets the "original_id" field.
func (ic *ImageCreate) SetOriginalID(s string) *ImageCreate {
	ic.mutation.SetOriginalID(s)
	return ic
}

// SetNillableOriginalID sets the "original_id" field if the given value is not nil.
func (ic *ImageCreate) SetNillableOriginalID(s *string) *ImageCreate {
	if s != nil {
		ic.SetOriginalID(*s)
	}
	return ic
}

// SetUploadedBy sets the "uploadedBy" field.
func (ic *ImageCreate) SetUploadedBy(s string) *ImageCreate {
	ic.mutation.SetUploadedBy(s)
	return ic
}

// SetNillableUploadedBy sets the "uploadedBy" field if the given value is not nil.
func (ic *ImageCreate) SetNillableUploadedBy(s *string) *ImageCreate {
	if s != nil {
		ic.SetUploadedBy(*s)
	}
	return ic
}

// SetCreatedAt sets the "createdAt" field.
func (ic *ImageCreate) SetCreatedAt(t time.Time) *ImageCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetUpdatedAt sets the "updatedAt" field.
func (ic *ImageCreate) SetUpdatedAt(t time.Time) *ImageCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetID sets the "id" field.
func (ic *ImageCreate) SetID(s string) *ImageCreate {
	ic.mutation.SetID(s)
	return ic
}

// SetCompressed sets the "compressed" edge to the File entity.
func (ic *ImageCreate) SetCompressed(f *File) *ImageCreate {
	return ic.SetCompressedID(f.ID)
}

// SetOriginal sets the "original" edge to the File entity.
func (ic *ImageCreate) SetOriginal(f *File) *ImageCreate {
	return ic.SetOriginalID(f.ID)
}

// SetThumbnail320x sets the "thumbnail320x" edge to the File entity.
func (ic *ImageCreate) SetThumbnail320x(f *File) *ImageCreate {
	return ic.SetThumbnail320xID(f.ID)
}

// SetThumbnail768x sets the "thumbnail768x" edge to the File entity.
func (ic *ImageCreate) SetThumbnail768x(f *File) *ImageCreate {
	return ic.SetThumbnail768xID(f.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ic *ImageCreate) SetUserID(id string) *ImageCreate {
	ic.mutation.SetUserID(id)
	return ic
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ic *ImageCreate) SetNillableUserID(id *string) *ImageCreate {
	if id != nil {
		ic = ic.SetUserID(*id)
	}
	return ic
}

// SetUser sets the "user" edge to the User entity.
func (ic *ImageCreate) SetUser(u *User) *ImageCreate {
	return ic.SetUserID(u.ID)
}

// AddMomentImageIDs adds the "moment_images" edge to the MomentImage entity by IDs.
func (ic *ImageCreate) AddMomentImageIDs(ids ...uint) *ImageCreate {
	ic.mutation.AddMomentImageIDs(ids...)
	return ic
}

// AddMomentImages adds the "moment_images" edges to the MomentImage entity.
func (ic *ImageCreate) AddMomentImages(m ...*MomentImage) *ImageCreate {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ic.AddMomentImageIDs(ids...)
}

// Mutation returns the ImageMutation object of the builder.
func (ic *ImageCreate) Mutation() *ImageMutation {
	return ic.mutation
}

// Save creates the Image in the database.
func (ic *ImageCreate) Save(ctx context.Context) (*Image, error) {
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *ImageCreate) SaveX(ctx context.Context) *Image {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *ImageCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *ImageCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *ImageCreate) check() error {
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Image.name"`)}
	}
	if _, ok := ic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Image.type"`)}
	}
	if _, ok := ic.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "Image.size"`)}
	}
	if _, ok := ic.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`ent: missing required field "Image.width"`)}
	}
	if _, ok := ic.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "Image.height"`)}
	}
	if _, ok := ic.mutation.Exif(); !ok {
		return &ValidationError{Name: "exif", err: errors.New(`ent: missing required field "Image.exif"`)}
	}
	if _, ok := ic.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Image.hash"`)}
	}
	if _, ok := ic.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Image.address"`)}
	}
	if _, ok := ic.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "isPublic", err: errors.New(`ent: missing required field "Image.isPublic"`)}
	}
	if _, ok := ic.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Image.description"`)}
	}
	if _, ok := ic.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "Image.tags"`)}
	}
	if _, ok := ic.mutation.ExtraData(); !ok {
		return &ValidationError{Name: "extraData", err: errors.New(`ent: missing required field "Image.extraData"`)}
	}
	if _, ok := ic.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "Image.category"`)}
	}
	if _, ok := ic.mutation.Thumbnail10x(); !ok {
		return &ValidationError{Name: "thumbnail_10x", err: errors.New(`ent: missing required field "Image.thumbnail_10x"`)}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Image.createdAt"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Image.updatedAt"`)}
	}
	return nil
}

func (ic *ImageCreate) sqlSave(ctx context.Context) (*Image, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Image.ID type: %T", _spec.ID.Value)
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *ImageCreate) createSpec() (*Image, *sqlgraph.CreateSpec) {
	var (
		_node = &Image{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(image.Table, sqlgraph.NewFieldSpec(image.FieldID, field.TypeString))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.Name(); ok {
		_spec.SetField(image.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ic.mutation.GetType(); ok {
		_spec.SetField(image.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ic.mutation.Size(); ok {
		_spec.SetField(image.FieldSize, field.TypeInt, value)
		_node.Size = value
	}
	if value, ok := ic.mutation.Width(); ok {
		_spec.SetField(image.FieldWidth, field.TypeInt32, value)
		_node.Width = value
	}
	if value, ok := ic.mutation.Height(); ok {
		_spec.SetField(image.FieldHeight, field.TypeInt32, value)
		_node.Height = value
	}
	if value, ok := ic.mutation.Exif(); ok {
		_spec.SetField(image.FieldExif, field.TypeJSON, value)
		_node.Exif = value
	}
	if value, ok := ic.mutation.Hash(); ok {
		_spec.SetField(image.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := ic.mutation.Address(); ok {
		_spec.SetField(image.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := ic.mutation.IsPublic(); ok {
		_spec.SetField(image.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := ic.mutation.Description(); ok {
		_spec.SetField(image.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ic.mutation.Tags(); ok {
		_spec.SetField(image.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := ic.mutation.ExtraData(); ok {
		_spec.SetField(image.FieldExtraData, field.TypeJSON, value)
		_node.ExtraData = value
	}
	if value, ok := ic.mutation.Category(); ok {
		_spec.SetField(image.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := ic.mutation.Thumbnail10x(); ok {
		_spec.SetField(image.FieldThumbnail10x, field.TypeBytes, value)
		_node.Thumbnail10x = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(image.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(image.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ic.mutation.CompressedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.CompressedTable,
			Columns: []string{image.CompressedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CompressedID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.OriginalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.OriginalTable,
			Columns: []string{image.OriginalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OriginalID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.Thumbnail320xIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.Thumbnail320xTable,
			Columns: []string{image.Thumbnail320xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Thumbnail320xID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.Thumbnail768xIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.Thumbnail768xTable,
			Columns: []string{image.Thumbnail768xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Thumbnail768xID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.UserTable,
			Columns: []string{image.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UploadedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.MomentImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   image.MomentImagesTable,
			Columns: []string{image.MomentImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentimage.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ImageCreateBulk is the builder for creating many Image entities in bulk.
type ImageCreateBulk struct {
	config
	err      error
	builders []*ImageCreate
}

// Save creates the Image entities in the database.
func (icb *ImageCreateBulk) Save(ctx context.Context) ([]*Image, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Image, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *ImageCreateBulk) SaveX(ctx context.Context) []*Image {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *ImageCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *ImageCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

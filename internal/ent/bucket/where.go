// Code generated by ent, DO NOT EDIT.

package bucket

import (
	"time"

	"api.us4ever/internal/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldName, v))
}

// BucketName applies equality check predicate on the "bucketName" field. It's identical to BucketNameEQ.
func BucketName(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldBucketName, v))
}

// Region applies equality check predicate on the "region" field. It's identical to RegionEQ.
func Region(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldRegion, v))
}

// Endpoint applies equality check predicate on the "endpoint" field. It's identical to EndpointEQ.
func Endpoint(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldEndpoint, v))
}

// PublicUrl applies equality check predicate on the "publicUrl" field. It's identical to PublicUrlEQ.
func PublicUrl(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldPublicUrl, v))
}

// AccessKey applies equality check predicate on the "accessKey" field. It's identical to AccessKeyEQ.
func AccessKey(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldAccessKey, v))
}

// SecretKey applies equality check predicate on the "secretKey" field. It's identical to SecretKeyEQ.
func SecretKey(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldSecretKey, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldDescription, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldCategory, v))
}

// OwnerId applies equality check predicate on the "ownerId" field. It's identical to OwnerIdEQ.
func OwnerId(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldOwnerId, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContainsFold(FieldName, v))
}

// BucketNameEQ applies the EQ predicate on the "bucketName" field.
func BucketNameEQ(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldBucketName, v))
}

// BucketNameNEQ applies the NEQ predicate on the "bucketName" field.
func BucketNameNEQ(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNEQ(FieldBucketName, v))
}

// BucketNameIn applies the In predicate on the "bucketName" field.
func BucketNameIn(vs ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldIn(FieldBucketName, vs...))
}

// BucketNameNotIn applies the NotIn predicate on the "bucketName" field.
func BucketNameNotIn(vs ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNotIn(FieldBucketName, vs...))
}

// BucketNameGT applies the GT predicate on the "bucketName" field.
func BucketNameGT(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGT(FieldBucketName, v))
}

// BucketNameGTE applies the GTE predicate on the "bucketName" field.
func BucketNameGTE(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGTE(FieldBucketName, v))
}

// BucketNameLT applies the LT predicate on the "bucketName" field.
func BucketNameLT(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLT(FieldBucketName, v))
}

// BucketNameLTE applies the LTE predicate on the "bucketName" field.
func BucketNameLTE(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLTE(FieldBucketName, v))
}

// BucketNameContains applies the Contains predicate on the "bucketName" field.
func BucketNameContains(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContains(FieldBucketName, v))
}

// BucketNameHasPrefix applies the HasPrefix predicate on the "bucketName" field.
func BucketNameHasPrefix(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldHasPrefix(FieldBucketName, v))
}

// BucketNameHasSuffix applies the HasSuffix predicate on the "bucketName" field.
func BucketNameHasSuffix(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldHasSuffix(FieldBucketName, v))
}

// BucketNameEqualFold applies the EqualFold predicate on the "bucketName" field.
func BucketNameEqualFold(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEqualFold(FieldBucketName, v))
}

// BucketNameContainsFold applies the ContainsFold predicate on the "bucketName" field.
func BucketNameContainsFold(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContainsFold(FieldBucketName, v))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v Provider) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v Provider) predicate.Bucket {
	return predicate.Bucket(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...Provider) predicate.Bucket {
	return predicate.Bucket(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...Provider) predicate.Bucket {
	return predicate.Bucket(sql.FieldNotIn(FieldProvider, vs...))
}

// RegionEQ applies the EQ predicate on the "region" field.
func RegionEQ(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldRegion, v))
}

// RegionNEQ applies the NEQ predicate on the "region" field.
func RegionNEQ(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNEQ(FieldRegion, v))
}

// RegionIn applies the In predicate on the "region" field.
func RegionIn(vs ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldIn(FieldRegion, vs...))
}

// RegionNotIn applies the NotIn predicate on the "region" field.
func RegionNotIn(vs ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNotIn(FieldRegion, vs...))
}

// RegionGT applies the GT predicate on the "region" field.
func RegionGT(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGT(FieldRegion, v))
}

// RegionGTE applies the GTE predicate on the "region" field.
func RegionGTE(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGTE(FieldRegion, v))
}

// RegionLT applies the LT predicate on the "region" field.
func RegionLT(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLT(FieldRegion, v))
}

// RegionLTE applies the LTE predicate on the "region" field.
func RegionLTE(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLTE(FieldRegion, v))
}

// RegionContains applies the Contains predicate on the "region" field.
func RegionContains(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContains(FieldRegion, v))
}

// RegionHasPrefix applies the HasPrefix predicate on the "region" field.
func RegionHasPrefix(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldHasPrefix(FieldRegion, v))
}

// RegionHasSuffix applies the HasSuffix predicate on the "region" field.
func RegionHasSuffix(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldHasSuffix(FieldRegion, v))
}

// RegionEqualFold applies the EqualFold predicate on the "region" field.
func RegionEqualFold(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEqualFold(FieldRegion, v))
}

// RegionContainsFold applies the ContainsFold predicate on the "region" field.
func RegionContainsFold(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContainsFold(FieldRegion, v))
}

// EndpointEQ applies the EQ predicate on the "endpoint" field.
func EndpointEQ(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldEndpoint, v))
}

// EndpointNEQ applies the NEQ predicate on the "endpoint" field.
func EndpointNEQ(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNEQ(FieldEndpoint, v))
}

// EndpointIn applies the In predicate on the "endpoint" field.
func EndpointIn(vs ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldIn(FieldEndpoint, vs...))
}

// EndpointNotIn applies the NotIn predicate on the "endpoint" field.
func EndpointNotIn(vs ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNotIn(FieldEndpoint, vs...))
}

// EndpointGT applies the GT predicate on the "endpoint" field.
func EndpointGT(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGT(FieldEndpoint, v))
}

// EndpointGTE applies the GTE predicate on the "endpoint" field.
func EndpointGTE(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGTE(FieldEndpoint, v))
}

// EndpointLT applies the LT predicate on the "endpoint" field.
func EndpointLT(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLT(FieldEndpoint, v))
}

// EndpointLTE applies the LTE predicate on the "endpoint" field.
func EndpointLTE(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLTE(FieldEndpoint, v))
}

// EndpointContains applies the Contains predicate on the "endpoint" field.
func EndpointContains(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContains(FieldEndpoint, v))
}

// EndpointHasPrefix applies the HasPrefix predicate on the "endpoint" field.
func EndpointHasPrefix(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldHasPrefix(FieldEndpoint, v))
}

// EndpointHasSuffix applies the HasSuffix predicate on the "endpoint" field.
func EndpointHasSuffix(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldHasSuffix(FieldEndpoint, v))
}

// EndpointEqualFold applies the EqualFold predicate on the "endpoint" field.
func EndpointEqualFold(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEqualFold(FieldEndpoint, v))
}

// EndpointContainsFold applies the ContainsFold predicate on the "endpoint" field.
func EndpointContainsFold(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContainsFold(FieldEndpoint, v))
}

// PublicUrlEQ applies the EQ predicate on the "publicUrl" field.
func PublicUrlEQ(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldPublicUrl, v))
}

// PublicUrlNEQ applies the NEQ predicate on the "publicUrl" field.
func PublicUrlNEQ(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNEQ(FieldPublicUrl, v))
}

// PublicUrlIn applies the In predicate on the "publicUrl" field.
func PublicUrlIn(vs ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldIn(FieldPublicUrl, vs...))
}

// PublicUrlNotIn applies the NotIn predicate on the "publicUrl" field.
func PublicUrlNotIn(vs ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNotIn(FieldPublicUrl, vs...))
}

// PublicUrlGT applies the GT predicate on the "publicUrl" field.
func PublicUrlGT(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGT(FieldPublicUrl, v))
}

// PublicUrlGTE applies the GTE predicate on the "publicUrl" field.
func PublicUrlGTE(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGTE(FieldPublicUrl, v))
}

// PublicUrlLT applies the LT predicate on the "publicUrl" field.
func PublicUrlLT(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLT(FieldPublicUrl, v))
}

// PublicUrlLTE applies the LTE predicate on the "publicUrl" field.
func PublicUrlLTE(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLTE(FieldPublicUrl, v))
}

// PublicUrlContains applies the Contains predicate on the "publicUrl" field.
func PublicUrlContains(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContains(FieldPublicUrl, v))
}

// PublicUrlHasPrefix applies the HasPrefix predicate on the "publicUrl" field.
func PublicUrlHasPrefix(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldHasPrefix(FieldPublicUrl, v))
}

// PublicUrlHasSuffix applies the HasSuffix predicate on the "publicUrl" field.
func PublicUrlHasSuffix(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldHasSuffix(FieldPublicUrl, v))
}

// PublicUrlEqualFold applies the EqualFold predicate on the "publicUrl" field.
func PublicUrlEqualFold(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEqualFold(FieldPublicUrl, v))
}

// PublicUrlContainsFold applies the ContainsFold predicate on the "publicUrl" field.
func PublicUrlContainsFold(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContainsFold(FieldPublicUrl, v))
}

// AccessKeyEQ applies the EQ predicate on the "accessKey" field.
func AccessKeyEQ(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldAccessKey, v))
}

// AccessKeyNEQ applies the NEQ predicate on the "accessKey" field.
func AccessKeyNEQ(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNEQ(FieldAccessKey, v))
}

// AccessKeyIn applies the In predicate on the "accessKey" field.
func AccessKeyIn(vs ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldIn(FieldAccessKey, vs...))
}

// AccessKeyNotIn applies the NotIn predicate on the "accessKey" field.
func AccessKeyNotIn(vs ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNotIn(FieldAccessKey, vs...))
}

// AccessKeyGT applies the GT predicate on the "accessKey" field.
func AccessKeyGT(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGT(FieldAccessKey, v))
}

// AccessKeyGTE applies the GTE predicate on the "accessKey" field.
func AccessKeyGTE(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGTE(FieldAccessKey, v))
}

// AccessKeyLT applies the LT predicate on the "accessKey" field.
func AccessKeyLT(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLT(FieldAccessKey, v))
}

// AccessKeyLTE applies the LTE predicate on the "accessKey" field.
func AccessKeyLTE(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLTE(FieldAccessKey, v))
}

// AccessKeyContains applies the Contains predicate on the "accessKey" field.
func AccessKeyContains(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContains(FieldAccessKey, v))
}

// AccessKeyHasPrefix applies the HasPrefix predicate on the "accessKey" field.
func AccessKeyHasPrefix(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldHasPrefix(FieldAccessKey, v))
}

// AccessKeyHasSuffix applies the HasSuffix predicate on the "accessKey" field.
func AccessKeyHasSuffix(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldHasSuffix(FieldAccessKey, v))
}

// AccessKeyEqualFold applies the EqualFold predicate on the "accessKey" field.
func AccessKeyEqualFold(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEqualFold(FieldAccessKey, v))
}

// AccessKeyContainsFold applies the ContainsFold predicate on the "accessKey" field.
func AccessKeyContainsFold(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContainsFold(FieldAccessKey, v))
}

// SecretKeyEQ applies the EQ predicate on the "secretKey" field.
func SecretKeyEQ(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldSecretKey, v))
}

// SecretKeyNEQ applies the NEQ predicate on the "secretKey" field.
func SecretKeyNEQ(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNEQ(FieldSecretKey, v))
}

// SecretKeyIn applies the In predicate on the "secretKey" field.
func SecretKeyIn(vs ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldIn(FieldSecretKey, vs...))
}

// SecretKeyNotIn applies the NotIn predicate on the "secretKey" field.
func SecretKeyNotIn(vs ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNotIn(FieldSecretKey, vs...))
}

// SecretKeyGT applies the GT predicate on the "secretKey" field.
func SecretKeyGT(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGT(FieldSecretKey, v))
}

// SecretKeyGTE applies the GTE predicate on the "secretKey" field.
func SecretKeyGTE(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGTE(FieldSecretKey, v))
}

// SecretKeyLT applies the LT predicate on the "secretKey" field.
func SecretKeyLT(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLT(FieldSecretKey, v))
}

// SecretKeyLTE applies the LTE predicate on the "secretKey" field.
func SecretKeyLTE(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLTE(FieldSecretKey, v))
}

// SecretKeyContains applies the Contains predicate on the "secretKey" field.
func SecretKeyContains(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContains(FieldSecretKey, v))
}

// SecretKeyHasPrefix applies the HasPrefix predicate on the "secretKey" field.
func SecretKeyHasPrefix(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldHasPrefix(FieldSecretKey, v))
}

// SecretKeyHasSuffix applies the HasSuffix predicate on the "secretKey" field.
func SecretKeyHasSuffix(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldHasSuffix(FieldSecretKey, v))
}

// SecretKeyEqualFold applies the EqualFold predicate on the "secretKey" field.
func SecretKeyEqualFold(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEqualFold(FieldSecretKey, v))
}

// SecretKeyContainsFold applies the ContainsFold predicate on the "secretKey" field.
func SecretKeyContainsFold(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContainsFold(FieldSecretKey, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContainsFold(FieldDescription, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContainsFold(FieldCategory, v))
}

// OwnerIdEQ applies the EQ predicate on the "ownerId" field.
func OwnerIdEQ(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldOwnerId, v))
}

// OwnerIdNEQ applies the NEQ predicate on the "ownerId" field.
func OwnerIdNEQ(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNEQ(FieldOwnerId, v))
}

// OwnerIdIn applies the In predicate on the "ownerId" field.
func OwnerIdIn(vs ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldIn(FieldOwnerId, vs...))
}

// OwnerIdNotIn applies the NotIn predicate on the "ownerId" field.
func OwnerIdNotIn(vs ...string) predicate.Bucket {
	return predicate.Bucket(sql.FieldNotIn(FieldOwnerId, vs...))
}

// OwnerIdGT applies the GT predicate on the "ownerId" field.
func OwnerIdGT(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGT(FieldOwnerId, v))
}

// OwnerIdGTE applies the GTE predicate on the "ownerId" field.
func OwnerIdGTE(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldGTE(FieldOwnerId, v))
}

// OwnerIdLT applies the LT predicate on the "ownerId" field.
func OwnerIdLT(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLT(FieldOwnerId, v))
}

// OwnerIdLTE applies the LTE predicate on the "ownerId" field.
func OwnerIdLTE(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldLTE(FieldOwnerId, v))
}

// OwnerIdContains applies the Contains predicate on the "ownerId" field.
func OwnerIdContains(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContains(FieldOwnerId, v))
}

// OwnerIdHasPrefix applies the HasPrefix predicate on the "ownerId" field.
func OwnerIdHasPrefix(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldHasPrefix(FieldOwnerId, v))
}

// OwnerIdHasSuffix applies the HasSuffix predicate on the "ownerId" field.
func OwnerIdHasSuffix(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldHasSuffix(FieldOwnerId, v))
}

// OwnerIdIsNil applies the IsNil predicate on the "ownerId" field.
func OwnerIdIsNil() predicate.Bucket {
	return predicate.Bucket(sql.FieldIsNull(FieldOwnerId))
}

// OwnerIdNotNil applies the NotNil predicate on the "ownerId" field.
func OwnerIdNotNil() predicate.Bucket {
	return predicate.Bucket(sql.FieldNotNull(FieldOwnerId))
}

// OwnerIdEqualFold applies the EqualFold predicate on the "ownerId" field.
func OwnerIdEqualFold(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldEqualFold(FieldOwnerId, v))
}

// OwnerIdContainsFold applies the ContainsFold predicate on the "ownerId" field.
func OwnerIdContainsFold(v string) predicate.Bucket {
	return predicate.Bucket(sql.FieldContainsFold(FieldOwnerId, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Bucket {
	return predicate.Bucket(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Bucket {
	return predicate.Bucket(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Bucket {
	return predicate.Bucket(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Bucket {
	return predicate.Bucket(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Bucket {
	return predicate.Bucket(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Bucket {
	return predicate.Bucket(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Bucket {
	return predicate.Bucket(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Bucket {
	return predicate.Bucket(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Bucket {
	return predicate.Bucket(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Bucket {
	return predicate.Bucket(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Bucket {
	return predicate.Bucket(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Bucket {
	return predicate.Bucket(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Bucket {
	return predicate.Bucket(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Bucket {
	return predicate.Bucket(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Bucket {
	return predicate.Bucket(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Bucket {
	return predicate.Bucket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Bucket {
	return predicate.Bucket(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFiles applies the HasEdge predicate on the "files" edge.
func HasFiles() predicate.Bucket {
	return predicate.Bucket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FilesTable, FilesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFilesWith applies the HasEdge predicate on the "files" edge with a given conditions (other predicates).
func HasFilesWith(preds ...predicate.File) predicate.Bucket {
	return predicate.Bucket(func(s *sql.Selector) {
		step := newFilesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bucket) predicate.Bucket {
	return predicate.Bucket(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bucket) predicate.Bucket {
	return predicate.Bucket(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bucket) predicate.Bucket {
	return predicate.Bucket(sql.NotPredicates(p))
}

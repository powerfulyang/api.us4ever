// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"api.us4ever/internal/ent/file"
	"api.us4ever/internal/ent/momentvideo"
	"api.us4ever/internal/ent/predicate"
	"api.us4ever/internal/ent/user"
	"api.us4ever/internal/ent/video"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// VideoUpdate is the builder for updating Video entities.
type VideoUpdate struct {
	config
	hooks    []Hook
	mutation *VideoMutation
}

// Where appends a list predicates to the VideoUpdate builder.
func (vu *VideoUpdate) Where(ps ...predicate.Video) *VideoUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetName sets the "name" field.
func (vu *VideoUpdate) SetName(s string) *VideoUpdate {
	vu.mutation.SetName(s)
	return vu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableName(s *string) *VideoUpdate {
	if s != nil {
		vu.SetName(*s)
	}
	return vu
}

// SetType sets the "type" field.
func (vu *VideoUpdate) SetType(s string) *VideoUpdate {
	vu.mutation.SetType(s)
	return vu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableType(s *string) *VideoUpdate {
	if s != nil {
		vu.SetType(*s)
	}
	return vu
}

// SetSize sets the "size" field.
func (vu *VideoUpdate) SetSize(i int) *VideoUpdate {
	vu.mutation.ResetSize()
	vu.mutation.SetSize(i)
	return vu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableSize(i *int) *VideoUpdate {
	if i != nil {
		vu.SetSize(*i)
	}
	return vu
}

// AddSize adds i to the "size" field.
func (vu *VideoUpdate) AddSize(i int) *VideoUpdate {
	vu.mutation.AddSize(i)
	return vu
}

// SetHash sets the "hash" field.
func (vu *VideoUpdate) SetHash(s string) *VideoUpdate {
	vu.mutation.SetHash(s)
	return vu
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableHash(s *string) *VideoUpdate {
	if s != nil {
		vu.SetHash(*s)
	}
	return vu
}

// SetDuration sets the "duration" field.
func (vu *VideoUpdate) SetDuration(i int32) *VideoUpdate {
	vu.mutation.ResetDuration()
	vu.mutation.SetDuration(i)
	return vu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableDuration(i *int32) *VideoUpdate {
	if i != nil {
		vu.SetDuration(*i)
	}
	return vu
}

// AddDuration adds i to the "duration" field.
func (vu *VideoUpdate) AddDuration(i int32) *VideoUpdate {
	vu.mutation.AddDuration(i)
	return vu
}

// SetIsPublic sets the "isPublic" field.
func (vu *VideoUpdate) SetIsPublic(b bool) *VideoUpdate {
	vu.mutation.SetIsPublic(b)
	return vu
}

// SetNillableIsPublic sets the "isPublic" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableIsPublic(b *bool) *VideoUpdate {
	if b != nil {
		vu.SetIsPublic(*b)
	}
	return vu
}

// SetExtraData sets the "extraData" field.
func (vu *VideoUpdate) SetExtraData(jm json.RawMessage) *VideoUpdate {
	vu.mutation.SetExtraData(jm)
	return vu
}

// AppendExtraData appends jm to the "extraData" field.
func (vu *VideoUpdate) AppendExtraData(jm json.RawMessage) *VideoUpdate {
	vu.mutation.AppendExtraData(jm)
	return vu
}

// SetCategory sets the "category" field.
func (vu *VideoUpdate) SetCategory(s string) *VideoUpdate {
	vu.mutation.SetCategory(s)
	return vu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableCategory(s *string) *VideoUpdate {
	if s != nil {
		vu.SetCategory(*s)
	}
	return vu
}

// SetPosterId sets the "posterId" field.
func (vu *VideoUpdate) SetPosterId(s string) *VideoUpdate {
	vu.mutation.SetPosterId(s)
	return vu
}

// SetNillablePosterId sets the "posterId" field if the given value is not nil.
func (vu *VideoUpdate) SetNillablePosterId(s *string) *VideoUpdate {
	if s != nil {
		vu.SetPosterId(*s)
	}
	return vu
}

// ClearPosterId clears the value of the "posterId" field.
func (vu *VideoUpdate) ClearPosterId() *VideoUpdate {
	vu.mutation.ClearPosterId()
	return vu
}

// SetFileId sets the "fileId" field.
func (vu *VideoUpdate) SetFileId(s string) *VideoUpdate {
	vu.mutation.SetFileId(s)
	return vu
}

// SetNillableFileId sets the "fileId" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableFileId(s *string) *VideoUpdate {
	if s != nil {
		vu.SetFileId(*s)
	}
	return vu
}

// ClearFileId clears the value of the "fileId" field.
func (vu *VideoUpdate) ClearFileId() *VideoUpdate {
	vu.mutation.ClearFileId()
	return vu
}

// SetUploadedBy sets the "uploadedBy" field.
func (vu *VideoUpdate) SetUploadedBy(s string) *VideoUpdate {
	vu.mutation.SetUploadedBy(s)
	return vu
}

// SetNillableUploadedBy sets the "uploadedBy" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableUploadedBy(s *string) *VideoUpdate {
	if s != nil {
		vu.SetUploadedBy(*s)
	}
	return vu
}

// ClearUploadedBy clears the value of the "uploadedBy" field.
func (vu *VideoUpdate) ClearUploadedBy() *VideoUpdate {
	vu.mutation.ClearUploadedBy()
	return vu
}

// SetCreatedAt sets the "createdAt" field.
func (vu *VideoUpdate) SetCreatedAt(t time.Time) *VideoUpdate {
	vu.mutation.SetCreatedAt(t)
	return vu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableCreatedAt(t *time.Time) *VideoUpdate {
	if t != nil {
		vu.SetCreatedAt(*t)
	}
	return vu
}

// SetUpdatedAt sets the "updatedAt" field.
func (vu *VideoUpdate) SetUpdatedAt(t time.Time) *VideoUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableUpdatedAt(t *time.Time) *VideoUpdate {
	if t != nil {
		vu.SetUpdatedAt(*t)
	}
	return vu
}

// AddMomentVideoIDs adds the "moment_videos" edge to the MomentVideo entity by IDs.
func (vu *VideoUpdate) AddMomentVideoIDs(ids ...uint) *VideoUpdate {
	vu.mutation.AddMomentVideoIDs(ids...)
	return vu
}

// AddMomentVideos adds the "moment_videos" edges to the MomentVideo entity.
func (vu *VideoUpdate) AddMomentVideos(m ...*MomentVideo) *VideoUpdate {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vu.AddMomentVideoIDs(ids...)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (vu *VideoUpdate) SetFileID(id string) *VideoUpdate {
	vu.mutation.SetFileID(id)
	return vu
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (vu *VideoUpdate) SetNillableFileID(id *string) *VideoUpdate {
	if id != nil {
		vu = vu.SetFileID(*id)
	}
	return vu
}

// SetFile sets the "file" edge to the File entity.
func (vu *VideoUpdate) SetFile(f *File) *VideoUpdate {
	return vu.SetFileID(f.ID)
}

// SetPosterID sets the "poster" edge to the File entity by ID.
func (vu *VideoUpdate) SetPosterID(id string) *VideoUpdate {
	vu.mutation.SetPosterID(id)
	return vu
}

// SetNillablePosterID sets the "poster" edge to the File entity by ID if the given value is not nil.
func (vu *VideoUpdate) SetNillablePosterID(id *string) *VideoUpdate {
	if id != nil {
		vu = vu.SetPosterID(*id)
	}
	return vu
}

// SetPoster sets the "poster" edge to the File entity.
func (vu *VideoUpdate) SetPoster(f *File) *VideoUpdate {
	return vu.SetPosterID(f.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (vu *VideoUpdate) SetUserID(id string) *VideoUpdate {
	vu.mutation.SetUserID(id)
	return vu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (vu *VideoUpdate) SetNillableUserID(id *string) *VideoUpdate {
	if id != nil {
		vu = vu.SetUserID(*id)
	}
	return vu
}

// SetUser sets the "user" edge to the User entity.
func (vu *VideoUpdate) SetUser(u *User) *VideoUpdate {
	return vu.SetUserID(u.ID)
}

// Mutation returns the VideoMutation object of the builder.
func (vu *VideoUpdate) Mutation() *VideoMutation {
	return vu.mutation
}

// ClearMomentVideos clears all "moment_videos" edges to the MomentVideo entity.
func (vu *VideoUpdate) ClearMomentVideos() *VideoUpdate {
	vu.mutation.ClearMomentVideos()
	return vu
}

// RemoveMomentVideoIDs removes the "moment_videos" edge to MomentVideo entities by IDs.
func (vu *VideoUpdate) RemoveMomentVideoIDs(ids ...uint) *VideoUpdate {
	vu.mutation.RemoveMomentVideoIDs(ids...)
	return vu
}

// RemoveMomentVideos removes "moment_videos" edges to MomentVideo entities.
func (vu *VideoUpdate) RemoveMomentVideos(m ...*MomentVideo) *VideoUpdate {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vu.RemoveMomentVideoIDs(ids...)
}

// ClearFile clears the "file" edge to the File entity.
func (vu *VideoUpdate) ClearFile() *VideoUpdate {
	vu.mutation.ClearFile()
	return vu
}

// ClearPoster clears the "poster" edge to the File entity.
func (vu *VideoUpdate) ClearPoster() *VideoUpdate {
	vu.mutation.ClearPoster()
	return vu
}

// ClearUser clears the "user" edge to the User entity.
func (vu *VideoUpdate) ClearUser() *VideoUpdate {
	vu.mutation.ClearUser()
	return vu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VideoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VideoUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VideoUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VideoUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *VideoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(video.Table, video.Columns, sqlgraph.NewFieldSpec(video.FieldID, field.TypeString))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Name(); ok {
		_spec.SetField(video.FieldName, field.TypeString, value)
	}
	if value, ok := vu.mutation.GetType(); ok {
		_spec.SetField(video.FieldType, field.TypeString, value)
	}
	if value, ok := vu.mutation.Size(); ok {
		_spec.SetField(video.FieldSize, field.TypeInt, value)
	}
	if value, ok := vu.mutation.AddedSize(); ok {
		_spec.AddField(video.FieldSize, field.TypeInt, value)
	}
	if value, ok := vu.mutation.Hash(); ok {
		_spec.SetField(video.FieldHash, field.TypeString, value)
	}
	if value, ok := vu.mutation.Duration(); ok {
		_spec.SetField(video.FieldDuration, field.TypeInt32, value)
	}
	if value, ok := vu.mutation.AddedDuration(); ok {
		_spec.AddField(video.FieldDuration, field.TypeInt32, value)
	}
	if value, ok := vu.mutation.IsPublic(); ok {
		_spec.SetField(video.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := vu.mutation.ExtraData(); ok {
		_spec.SetField(video.FieldExtraData, field.TypeJSON, value)
	}
	if value, ok := vu.mutation.AppendedExtraData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, video.FieldExtraData, value)
		})
	}
	if value, ok := vu.mutation.Category(); ok {
		_spec.SetField(video.FieldCategory, field.TypeString, value)
	}
	if value, ok := vu.mutation.CreatedAt(); ok {
		_spec.SetField(video.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(video.FieldUpdatedAt, field.TypeTime, value)
	}
	if vu.mutation.MomentVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.MomentVideosTable,
			Columns: []string{video.MomentVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentvideo.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedMomentVideosIDs(); len(nodes) > 0 && !vu.mutation.MomentVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.MomentVideosTable,
			Columns: []string{video.MomentVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentvideo.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.MomentVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.MomentVideosTable,
			Columns: []string{video.MomentVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentvideo.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.FileTable,
			Columns: []string{video.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.FileTable,
			Columns: []string{video.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.PosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.PosterTable,
			Columns: []string{video.PosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.PosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.PosterTable,
			Columns: []string{video.PosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.UserTable,
			Columns: []string{video.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.UserTable,
			Columns: []string{video.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{video.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VideoUpdateOne is the builder for updating a single Video entity.
type VideoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VideoMutation
}

// SetName sets the "name" field.
func (vuo *VideoUpdateOne) SetName(s string) *VideoUpdateOne {
	vuo.mutation.SetName(s)
	return vuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableName(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetName(*s)
	}
	return vuo
}

// SetType sets the "type" field.
func (vuo *VideoUpdateOne) SetType(s string) *VideoUpdateOne {
	vuo.mutation.SetType(s)
	return vuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableType(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetType(*s)
	}
	return vuo
}

// SetSize sets the "size" field.
func (vuo *VideoUpdateOne) SetSize(i int) *VideoUpdateOne {
	vuo.mutation.ResetSize()
	vuo.mutation.SetSize(i)
	return vuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableSize(i *int) *VideoUpdateOne {
	if i != nil {
		vuo.SetSize(*i)
	}
	return vuo
}

// AddSize adds i to the "size" field.
func (vuo *VideoUpdateOne) AddSize(i int) *VideoUpdateOne {
	vuo.mutation.AddSize(i)
	return vuo
}

// SetHash sets the "hash" field.
func (vuo *VideoUpdateOne) SetHash(s string) *VideoUpdateOne {
	vuo.mutation.SetHash(s)
	return vuo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableHash(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetHash(*s)
	}
	return vuo
}

// SetDuration sets the "duration" field.
func (vuo *VideoUpdateOne) SetDuration(i int32) *VideoUpdateOne {
	vuo.mutation.ResetDuration()
	vuo.mutation.SetDuration(i)
	return vuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableDuration(i *int32) *VideoUpdateOne {
	if i != nil {
		vuo.SetDuration(*i)
	}
	return vuo
}

// AddDuration adds i to the "duration" field.
func (vuo *VideoUpdateOne) AddDuration(i int32) *VideoUpdateOne {
	vuo.mutation.AddDuration(i)
	return vuo
}

// SetIsPublic sets the "isPublic" field.
func (vuo *VideoUpdateOne) SetIsPublic(b bool) *VideoUpdateOne {
	vuo.mutation.SetIsPublic(b)
	return vuo
}

// SetNillableIsPublic sets the "isPublic" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableIsPublic(b *bool) *VideoUpdateOne {
	if b != nil {
		vuo.SetIsPublic(*b)
	}
	return vuo
}

// SetExtraData sets the "extraData" field.
func (vuo *VideoUpdateOne) SetExtraData(jm json.RawMessage) *VideoUpdateOne {
	vuo.mutation.SetExtraData(jm)
	return vuo
}

// AppendExtraData appends jm to the "extraData" field.
func (vuo *VideoUpdateOne) AppendExtraData(jm json.RawMessage) *VideoUpdateOne {
	vuo.mutation.AppendExtraData(jm)
	return vuo
}

// SetCategory sets the "category" field.
func (vuo *VideoUpdateOne) SetCategory(s string) *VideoUpdateOne {
	vuo.mutation.SetCategory(s)
	return vuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableCategory(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetCategory(*s)
	}
	return vuo
}

// SetPosterId sets the "posterId" field.
func (vuo *VideoUpdateOne) SetPosterId(s string) *VideoUpdateOne {
	vuo.mutation.SetPosterId(s)
	return vuo
}

// SetNillablePosterId sets the "posterId" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillablePosterId(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetPosterId(*s)
	}
	return vuo
}

// ClearPosterId clears the value of the "posterId" field.
func (vuo *VideoUpdateOne) ClearPosterId() *VideoUpdateOne {
	vuo.mutation.ClearPosterId()
	return vuo
}

// SetFileId sets the "fileId" field.
func (vuo *VideoUpdateOne) SetFileId(s string) *VideoUpdateOne {
	vuo.mutation.SetFileId(s)
	return vuo
}

// SetNillableFileId sets the "fileId" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableFileId(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetFileId(*s)
	}
	return vuo
}

// ClearFileId clears the value of the "fileId" field.
func (vuo *VideoUpdateOne) ClearFileId() *VideoUpdateOne {
	vuo.mutation.ClearFileId()
	return vuo
}

// SetUploadedBy sets the "uploadedBy" field.
func (vuo *VideoUpdateOne) SetUploadedBy(s string) *VideoUpdateOne {
	vuo.mutation.SetUploadedBy(s)
	return vuo
}

// SetNillableUploadedBy sets the "uploadedBy" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableUploadedBy(s *string) *VideoUpdateOne {
	if s != nil {
		vuo.SetUploadedBy(*s)
	}
	return vuo
}

// ClearUploadedBy clears the value of the "uploadedBy" field.
func (vuo *VideoUpdateOne) ClearUploadedBy() *VideoUpdateOne {
	vuo.mutation.ClearUploadedBy()
	return vuo
}

// SetCreatedAt sets the "createdAt" field.
func (vuo *VideoUpdateOne) SetCreatedAt(t time.Time) *VideoUpdateOne {
	vuo.mutation.SetCreatedAt(t)
	return vuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableCreatedAt(t *time.Time) *VideoUpdateOne {
	if t != nil {
		vuo.SetCreatedAt(*t)
	}
	return vuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (vuo *VideoUpdateOne) SetUpdatedAt(t time.Time) *VideoUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableUpdatedAt(t *time.Time) *VideoUpdateOne {
	if t != nil {
		vuo.SetUpdatedAt(*t)
	}
	return vuo
}

// AddMomentVideoIDs adds the "moment_videos" edge to the MomentVideo entity by IDs.
func (vuo *VideoUpdateOne) AddMomentVideoIDs(ids ...uint) *VideoUpdateOne {
	vuo.mutation.AddMomentVideoIDs(ids...)
	return vuo
}

// AddMomentVideos adds the "moment_videos" edges to the MomentVideo entity.
func (vuo *VideoUpdateOne) AddMomentVideos(m ...*MomentVideo) *VideoUpdateOne {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vuo.AddMomentVideoIDs(ids...)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (vuo *VideoUpdateOne) SetFileID(id string) *VideoUpdateOne {
	vuo.mutation.SetFileID(id)
	return vuo
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableFileID(id *string) *VideoUpdateOne {
	if id != nil {
		vuo = vuo.SetFileID(*id)
	}
	return vuo
}

// SetFile sets the "file" edge to the File entity.
func (vuo *VideoUpdateOne) SetFile(f *File) *VideoUpdateOne {
	return vuo.SetFileID(f.ID)
}

// SetPosterID sets the "poster" edge to the File entity by ID.
func (vuo *VideoUpdateOne) SetPosterID(id string) *VideoUpdateOne {
	vuo.mutation.SetPosterID(id)
	return vuo
}

// SetNillablePosterID sets the "poster" edge to the File entity by ID if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillablePosterID(id *string) *VideoUpdateOne {
	if id != nil {
		vuo = vuo.SetPosterID(*id)
	}
	return vuo
}

// SetPoster sets the "poster" edge to the File entity.
func (vuo *VideoUpdateOne) SetPoster(f *File) *VideoUpdateOne {
	return vuo.SetPosterID(f.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (vuo *VideoUpdateOne) SetUserID(id string) *VideoUpdateOne {
	vuo.mutation.SetUserID(id)
	return vuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableUserID(id *string) *VideoUpdateOne {
	if id != nil {
		vuo = vuo.SetUserID(*id)
	}
	return vuo
}

// SetUser sets the "user" edge to the User entity.
func (vuo *VideoUpdateOne) SetUser(u *User) *VideoUpdateOne {
	return vuo.SetUserID(u.ID)
}

// Mutation returns the VideoMutation object of the builder.
func (vuo *VideoUpdateOne) Mutation() *VideoMutation {
	return vuo.mutation
}

// ClearMomentVideos clears all "moment_videos" edges to the MomentVideo entity.
func (vuo *VideoUpdateOne) ClearMomentVideos() *VideoUpdateOne {
	vuo.mutation.ClearMomentVideos()
	return vuo
}

// RemoveMomentVideoIDs removes the "moment_videos" edge to MomentVideo entities by IDs.
func (vuo *VideoUpdateOne) RemoveMomentVideoIDs(ids ...uint) *VideoUpdateOne {
	vuo.mutation.RemoveMomentVideoIDs(ids...)
	return vuo
}

// RemoveMomentVideos removes "moment_videos" edges to MomentVideo entities.
func (vuo *VideoUpdateOne) RemoveMomentVideos(m ...*MomentVideo) *VideoUpdateOne {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vuo.RemoveMomentVideoIDs(ids...)
}

// ClearFile clears the "file" edge to the File entity.
func (vuo *VideoUpdateOne) ClearFile() *VideoUpdateOne {
	vuo.mutation.ClearFile()
	return vuo
}

// ClearPoster clears the "poster" edge to the File entity.
func (vuo *VideoUpdateOne) ClearPoster() *VideoUpdateOne {
	vuo.mutation.ClearPoster()
	return vuo
}

// ClearUser clears the "user" edge to the User entity.
func (vuo *VideoUpdateOne) ClearUser() *VideoUpdateOne {
	vuo.mutation.ClearUser()
	return vuo
}

// Where appends a list predicates to the VideoUpdate builder.
func (vuo *VideoUpdateOne) Where(ps ...predicate.Video) *VideoUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VideoUpdateOne) Select(field string, fields ...string) *VideoUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Video entity.
func (vuo *VideoUpdateOne) Save(ctx context.Context) (*Video, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VideoUpdateOne) SaveX(ctx context.Context) *Video {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VideoUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VideoUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *VideoUpdateOne) sqlSave(ctx context.Context) (_node *Video, err error) {
	_spec := sqlgraph.NewUpdateSpec(video.Table, video.Columns, sqlgraph.NewFieldSpec(video.FieldID, field.TypeString))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Video.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, video.FieldID)
		for _, f := range fields {
			if !video.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != video.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Name(); ok {
		_spec.SetField(video.FieldName, field.TypeString, value)
	}
	if value, ok := vuo.mutation.GetType(); ok {
		_spec.SetField(video.FieldType, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Size(); ok {
		_spec.SetField(video.FieldSize, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.AddedSize(); ok {
		_spec.AddField(video.FieldSize, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.Hash(); ok {
		_spec.SetField(video.FieldHash, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Duration(); ok {
		_spec.SetField(video.FieldDuration, field.TypeInt32, value)
	}
	if value, ok := vuo.mutation.AddedDuration(); ok {
		_spec.AddField(video.FieldDuration, field.TypeInt32, value)
	}
	if value, ok := vuo.mutation.IsPublic(); ok {
		_spec.SetField(video.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := vuo.mutation.ExtraData(); ok {
		_spec.SetField(video.FieldExtraData, field.TypeJSON, value)
	}
	if value, ok := vuo.mutation.AppendedExtraData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, video.FieldExtraData, value)
		})
	}
	if value, ok := vuo.mutation.Category(); ok {
		_spec.SetField(video.FieldCategory, field.TypeString, value)
	}
	if value, ok := vuo.mutation.CreatedAt(); ok {
		_spec.SetField(video.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(video.FieldUpdatedAt, field.TypeTime, value)
	}
	if vuo.mutation.MomentVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.MomentVideosTable,
			Columns: []string{video.MomentVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentvideo.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedMomentVideosIDs(); len(nodes) > 0 && !vuo.mutation.MomentVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.MomentVideosTable,
			Columns: []string{video.MomentVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentvideo.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.MomentVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.MomentVideosTable,
			Columns: []string{video.MomentVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentvideo.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.FileTable,
			Columns: []string{video.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.FileTable,
			Columns: []string{video.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.PosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.PosterTable,
			Columns: []string{video.PosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.PosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.PosterTable,
			Columns: []string{video.PosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.UserTable,
			Columns: []string{video.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.UserTable,
			Columns: []string{video.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Video{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{video.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}

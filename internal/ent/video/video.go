// Code generated by ent, DO NOT EDIT.

package video

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the video type in the database.
	Label = "video"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldIsPublic holds the string denoting the ispublic field in the database.
	FieldIsPublic = "isPublic"
	// FieldPosterId holds the string denoting the posterid field in the database.
	FieldPosterId = "posterId"
	// FieldFileId holds the string denoting the fileid field in the database.
	FieldFileId = "fileId"
	// FieldUploadedBy holds the string denoting the uploadedby field in the database.
	FieldUploadedBy = "uploadedBy"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "createdAt"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updatedAt"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldExtraData holds the string denoting the extradata field in the database.
	FieldExtraData = "extraData"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// EdgeMomentVideos holds the string denoting the moment_videos edge name in mutations.
	EdgeMomentVideos = "moment_videos"
	// EdgeFile holds the string denoting the file edge name in mutations.
	EdgeFile = "file"
	// EdgePoster holds the string denoting the poster edge name in mutations.
	EdgePoster = "poster"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the video in the database.
	Table = "videos"
	// MomentVideosTable is the table that holds the moment_videos relation/edge.
	MomentVideosTable = "moment_videos"
	// MomentVideosInverseTable is the table name for the MomentVideo entity.
	// It exists in this package in order to avoid circular dependency with the "momentvideo" package.
	MomentVideosInverseTable = "moment_videos"
	// MomentVideosColumn is the table column denoting the moment_videos relation/edge.
	MomentVideosColumn = "videoId"
	// FileTable is the table that holds the file relation/edge.
	FileTable = "videos"
	// FileInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FileInverseTable = "files"
	// FileColumn is the table column denoting the file relation/edge.
	FileColumn = "fileId"
	// PosterTable is the table that holds the poster relation/edge.
	PosterTable = "videos"
	// PosterInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	PosterInverseTable = "files"
	// PosterColumn is the table column denoting the poster relation/edge.
	PosterColumn = "posterId"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "videos"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "uploadedBy"
)

// Columns holds all SQL columns for video fields.
var Columns = []string{
	FieldID,
	FieldHash,
	FieldSize,
	FieldIsPublic,
	FieldPosterId,
	FieldFileId,
	FieldUploadedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDuration,
	FieldName,
	FieldType,
	FieldExtraData,
	FieldCategory,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Video queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHash orders the results by the hash field.
func ByHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHash, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByIsPublic orders the results by the isPublic field.
func ByIsPublic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPublic, opts...).ToFunc()
}

// ByPosterId orders the results by the posterId field.
func ByPosterId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosterId, opts...).ToFunc()
}

// ByFileId orders the results by the fileId field.
func ByFileId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileId, opts...).ToFunc()
}

// ByUploadedBy orders the results by the uploadedBy field.
func ByUploadedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploadedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByMomentVideosCount orders the results by moment_videos count.
func ByMomentVideosCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMomentVideosStep(), opts...)
	}
}

// ByMomentVideos orders the results by moment_videos terms.
func ByMomentVideos(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMomentVideosStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFileField orders the results by file field.
func ByFileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFileStep(), sql.OrderByField(field, opts...))
	}
}

// ByPosterField orders the results by poster field.
func ByPosterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPosterStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newMomentVideosStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MomentVideosInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MomentVideosTable, MomentVideosColumn),
	)
}
func newFileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FileTable, FileColumn),
	)
}
func newPosterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PosterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PosterTable, PosterColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}

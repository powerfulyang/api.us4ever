// Code generated by ent, DO NOT EDIT.

package video

import (
	"time"

	"api.us4ever/internal/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldType, v))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v int) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldSize, v))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldHash, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int32) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldDuration, v))
}

// IsPublic applies equality check predicate on the "isPublic" field. It's identical to IsPublicEQ.
func IsPublic(v bool) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldIsPublic, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldCategory, v))
}

// PosterId applies equality check predicate on the "posterId" field. It's identical to PosterIdEQ.
func PosterId(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldPosterId, v))
}

// FileId applies equality check predicate on the "fileId" field. It's identical to FileIdEQ.
func FileId(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldFileId, v))
}

// UploadedBy applies equality check predicate on the "uploadedBy" field. It's identical to UploadedByEQ.
func UploadedBy(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldUploadedBy, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldType, v))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v int) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v int) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...int) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...int) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v int) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v int) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v int) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v int) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldSize, v))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldHash, v))
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldHash, v))
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldHash, v))
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldHash, v))
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldHash, v))
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldHash, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int32) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int32) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int32) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int32) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int32) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int32) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int32) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int32) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldDuration, v))
}

// IsPublicEQ applies the EQ predicate on the "isPublic" field.
func IsPublicEQ(v bool) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldIsPublic, v))
}

// IsPublicNEQ applies the NEQ predicate on the "isPublic" field.
func IsPublicNEQ(v bool) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldIsPublic, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldCategory, v))
}

// PosterIdEQ applies the EQ predicate on the "posterId" field.
func PosterIdEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldPosterId, v))
}

// PosterIdNEQ applies the NEQ predicate on the "posterId" field.
func PosterIdNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldPosterId, v))
}

// PosterIdIn applies the In predicate on the "posterId" field.
func PosterIdIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldPosterId, vs...))
}

// PosterIdNotIn applies the NotIn predicate on the "posterId" field.
func PosterIdNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldPosterId, vs...))
}

// PosterIdGT applies the GT predicate on the "posterId" field.
func PosterIdGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldPosterId, v))
}

// PosterIdGTE applies the GTE predicate on the "posterId" field.
func PosterIdGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldPosterId, v))
}

// PosterIdLT applies the LT predicate on the "posterId" field.
func PosterIdLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldPosterId, v))
}

// PosterIdLTE applies the LTE predicate on the "posterId" field.
func PosterIdLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldPosterId, v))
}

// PosterIdContains applies the Contains predicate on the "posterId" field.
func PosterIdContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldPosterId, v))
}

// PosterIdHasPrefix applies the HasPrefix predicate on the "posterId" field.
func PosterIdHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldPosterId, v))
}

// PosterIdHasSuffix applies the HasSuffix predicate on the "posterId" field.
func PosterIdHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldPosterId, v))
}

// PosterIdIsNil applies the IsNil predicate on the "posterId" field.
func PosterIdIsNil() predicate.Video {
	return predicate.Video(sql.FieldIsNull(FieldPosterId))
}

// PosterIdNotNil applies the NotNil predicate on the "posterId" field.
func PosterIdNotNil() predicate.Video {
	return predicate.Video(sql.FieldNotNull(FieldPosterId))
}

// PosterIdEqualFold applies the EqualFold predicate on the "posterId" field.
func PosterIdEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldPosterId, v))
}

// PosterIdContainsFold applies the ContainsFold predicate on the "posterId" field.
func PosterIdContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldPosterId, v))
}

// FileIdEQ applies the EQ predicate on the "fileId" field.
func FileIdEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldFileId, v))
}

// FileIdNEQ applies the NEQ predicate on the "fileId" field.
func FileIdNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldFileId, v))
}

// FileIdIn applies the In predicate on the "fileId" field.
func FileIdIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldFileId, vs...))
}

// FileIdNotIn applies the NotIn predicate on the "fileId" field.
func FileIdNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldFileId, vs...))
}

// FileIdGT applies the GT predicate on the "fileId" field.
func FileIdGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldFileId, v))
}

// FileIdGTE applies the GTE predicate on the "fileId" field.
func FileIdGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldFileId, v))
}

// FileIdLT applies the LT predicate on the "fileId" field.
func FileIdLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldFileId, v))
}

// FileIdLTE applies the LTE predicate on the "fileId" field.
func FileIdLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldFileId, v))
}

// FileIdContains applies the Contains predicate on the "fileId" field.
func FileIdContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldFileId, v))
}

// FileIdHasPrefix applies the HasPrefix predicate on the "fileId" field.
func FileIdHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldFileId, v))
}

// FileIdHasSuffix applies the HasSuffix predicate on the "fileId" field.
func FileIdHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldFileId, v))
}

// FileIdIsNil applies the IsNil predicate on the "fileId" field.
func FileIdIsNil() predicate.Video {
	return predicate.Video(sql.FieldIsNull(FieldFileId))
}

// FileIdNotNil applies the NotNil predicate on the "fileId" field.
func FileIdNotNil() predicate.Video {
	return predicate.Video(sql.FieldNotNull(FieldFileId))
}

// FileIdEqualFold applies the EqualFold predicate on the "fileId" field.
func FileIdEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldFileId, v))
}

// FileIdContainsFold applies the ContainsFold predicate on the "fileId" field.
func FileIdContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldFileId, v))
}

// UploadedByEQ applies the EQ predicate on the "uploadedBy" field.
func UploadedByEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldUploadedBy, v))
}

// UploadedByNEQ applies the NEQ predicate on the "uploadedBy" field.
func UploadedByNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldUploadedBy, v))
}

// UploadedByIn applies the In predicate on the "uploadedBy" field.
func UploadedByIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldUploadedBy, vs...))
}

// UploadedByNotIn applies the NotIn predicate on the "uploadedBy" field.
func UploadedByNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldUploadedBy, vs...))
}

// UploadedByGT applies the GT predicate on the "uploadedBy" field.
func UploadedByGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldUploadedBy, v))
}

// UploadedByGTE applies the GTE predicate on the "uploadedBy" field.
func UploadedByGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldUploadedBy, v))
}

// UploadedByLT applies the LT predicate on the "uploadedBy" field.
func UploadedByLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldUploadedBy, v))
}

// UploadedByLTE applies the LTE predicate on the "uploadedBy" field.
func UploadedByLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldUploadedBy, v))
}

// UploadedByContains applies the Contains predicate on the "uploadedBy" field.
func UploadedByContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldUploadedBy, v))
}

// UploadedByHasPrefix applies the HasPrefix predicate on the "uploadedBy" field.
func UploadedByHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldUploadedBy, v))
}

// UploadedByHasSuffix applies the HasSuffix predicate on the "uploadedBy" field.
func UploadedByHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldUploadedBy, v))
}

// UploadedByIsNil applies the IsNil predicate on the "uploadedBy" field.
func UploadedByIsNil() predicate.Video {
	return predicate.Video(sql.FieldIsNull(FieldUploadedBy))
}

// UploadedByNotNil applies the NotNil predicate on the "uploadedBy" field.
func UploadedByNotNil() predicate.Video {
	return predicate.Video(sql.FieldNotNull(FieldUploadedBy))
}

// UploadedByEqualFold applies the EqualFold predicate on the "uploadedBy" field.
func UploadedByEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldUploadedBy, v))
}

// UploadedByContainsFold applies the ContainsFold predicate on the "uploadedBy" field.
func UploadedByContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldUploadedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasMomentVideos applies the HasEdge predicate on the "moment_videos" edge.
func HasMomentVideos() predicate.Video {
	return predicate.Video(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MomentVideosTable, MomentVideosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMomentVideosWith applies the HasEdge predicate on the "moment_videos" edge with a given conditions (other predicates).
func HasMomentVideosWith(preds ...predicate.MomentVideo) predicate.Video {
	return predicate.Video(func(s *sql.Selector) {
		step := newMomentVideosStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFile applies the HasEdge predicate on the "file" edge.
func HasFile() predicate.Video {
	return predicate.Video(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FileTable, FileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFileWith applies the HasEdge predicate on the "file" edge with a given conditions (other predicates).
func HasFileWith(preds ...predicate.File) predicate.Video {
	return predicate.Video(func(s *sql.Selector) {
		step := newFileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPoster applies the HasEdge predicate on the "poster" edge.
func HasPoster() predicate.Video {
	return predicate.Video(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PosterTable, PosterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPosterWith applies the HasEdge predicate on the "poster" edge with a given conditions (other predicates).
func HasPosterWith(preds ...predicate.File) predicate.Video {
	return predicate.Video(func(s *sql.Selector) {
		step := newPosterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Video {
	return predicate.Video(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Video {
	return predicate.Video(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Video) predicate.Video {
	return predicate.Video(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Video) predicate.Video {
	return predicate.Video(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Video) predicate.Video {
	return predicate.Video(sql.NotPredicates(p))
}

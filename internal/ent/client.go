// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"reflect"

	"api.us4ever/internal/ent/migrate"
	"api.us4ever/internal/logger"

	"api.us4ever/internal/ent/bucket"
	"api.us4ever/internal/ent/file"
	"api.us4ever/internal/ent/group"
	"api.us4ever/internal/ent/image"
	"api.us4ever/internal/ent/keep"
	"api.us4ever/internal/ent/mindmap"
	"api.us4ever/internal/ent/moment"
	"api.us4ever/internal/ent/momentimage"
	"api.us4ever/internal/ent/momentvideo"
	"api.us4ever/internal/ent/todo"
	"api.us4ever/internal/ent/user"
	"api.us4ever/internal/ent/video"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Bucket is the client for interacting with the Bucket builders.
	Bucket *BucketClient
	// File is the client for interacting with the File builders.
	File *FileClient
	// Group is the client for interacting with the Group builders.
	Group *GroupClient
	// Image is the client for interacting with the Image builders.
	Image *ImageClient
	// Keep is the client for interacting with the Keep builders.
	Keep *KeepClient
	// Mindmap is the client for interacting with the Mindmap builders.
	Mindmap *MindmapClient
	// Moment is the client for interacting with the Moment builders.
	Moment *MomentClient
	// MomentImage is the client for interacting with the MomentImage builders.
	MomentImage *MomentImageClient
	// MomentVideo is the client for interacting with the MomentVideo builders.
	MomentVideo *MomentVideoClient
	// Todo is the client for interacting with the Todo builders.
	Todo *TodoClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Video is the client for interacting with the Video builders.
	Video *VideoClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Bucket = NewBucketClient(c.config)
	c.File = NewFileClient(c.config)
	c.Group = NewGroupClient(c.config)
	c.Image = NewImageClient(c.config)
	c.Keep = NewKeepClient(c.config)
	c.Mindmap = NewMindmapClient(c.config)
	c.Moment = NewMomentClient(c.config)
	c.MomentImage = NewMomentImageClient(c.config)
	c.MomentVideo = NewMomentVideoClient(c.config)
	c.Todo = NewTodoClient(c.config)
	c.User = NewUserClient(c.config)
	c.Video = NewVideoClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	// Create a logger for ENT client
	entLogger, err := logger.New("ent")
	if err != nil {
		panic("failed to create ent logger: " + err.Error())
	}

	cfg := config{
		log: func(args ...any) {
			entLogger.Debug("ent operation", logger.Fields{
				"details": fmt.Sprint(args...),
			})
		},
		hooks: &hooks{},
		inters: &inters{},
	}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Bucket:      NewBucketClient(cfg),
		File:        NewFileClient(cfg),
		Group:       NewGroupClient(cfg),
		Image:       NewImageClient(cfg),
		Keep:        NewKeepClient(cfg),
		Mindmap:     NewMindmapClient(cfg),
		Moment:      NewMomentClient(cfg),
		MomentImage: NewMomentImageClient(cfg),
		MomentVideo: NewMomentVideoClient(cfg),
		Todo:        NewTodoClient(cfg),
		User:        NewUserClient(cfg),
		Video:       NewVideoClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Bucket:      NewBucketClient(cfg),
		File:        NewFileClient(cfg),
		Group:       NewGroupClient(cfg),
		Image:       NewImageClient(cfg),
		Keep:        NewKeepClient(cfg),
		Mindmap:     NewMindmapClient(cfg),
		Moment:      NewMomentClient(cfg),
		MomentImage: NewMomentImageClient(cfg),
		MomentVideo: NewMomentVideoClient(cfg),
		Todo:        NewTodoClient(cfg),
		User:        NewUserClient(cfg),
		Video:       NewVideoClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Bucket.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Bucket, c.File, c.Group, c.Image, c.Keep, c.Mindmap, c.Moment, c.MomentImage,
		c.MomentVideo, c.Todo, c.User, c.Video,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Bucket, c.File, c.Group, c.Image, c.Keep, c.Mindmap, c.Moment, c.MomentImage,
		c.MomentVideo, c.Todo, c.User, c.Video,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BucketMutation:
		return c.Bucket.mutate(ctx, m)
	case *FileMutation:
		return c.File.mutate(ctx, m)
	case *GroupMutation:
		return c.Group.mutate(ctx, m)
	case *ImageMutation:
		return c.Image.mutate(ctx, m)
	case *KeepMutation:
		return c.Keep.mutate(ctx, m)
	case *MindmapMutation:
		return c.Mindmap.mutate(ctx, m)
	case *MomentMutation:
		return c.Moment.mutate(ctx, m)
	case *MomentImageMutation:
		return c.MomentImage.mutate(ctx, m)
	case *MomentVideoMutation:
		return c.MomentVideo.mutate(ctx, m)
	case *TodoMutation:
		return c.Todo.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *VideoMutation:
		return c.Video.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BucketClient is a client for the Bucket schema.
type BucketClient struct {
	config
}

// NewBucketClient returns a client for the Bucket from the given config.
func NewBucketClient(c config) *BucketClient {
	return &BucketClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bucket.Hooks(f(g(h())))`.
func (c *BucketClient) Use(hooks ...Hook) {
	c.hooks.Bucket = append(c.hooks.Bucket, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bucket.Intercept(f(g(h())))`.
func (c *BucketClient) Intercept(interceptors ...Interceptor) {
	c.inters.Bucket = append(c.inters.Bucket, interceptors...)
}

// Create returns a builder for creating a Bucket entity.
func (c *BucketClient) Create() *BucketCreate {
	mutation := newBucketMutation(c.config, OpCreate)
	return &BucketCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Bucket entities.
func (c *BucketClient) CreateBulk(builders ...*BucketCreate) *BucketCreateBulk {
	return &BucketCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BucketClient) MapCreateBulk(slice any, setFunc func(*BucketCreate, int)) *BucketCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BucketCreateBulk{err: fmt.Errorf("calling to BucketClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BucketCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BucketCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Bucket.
func (c *BucketClient) Update() *BucketUpdate {
	mutation := newBucketMutation(c.config, OpUpdate)
	return &BucketUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BucketClient) UpdateOne(b *Bucket) *BucketUpdateOne {
	mutation := newBucketMutation(c.config, OpUpdateOne, withBucket(b))
	return &BucketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BucketClient) UpdateOneID(id string) *BucketUpdateOne {
	mutation := newBucketMutation(c.config, OpUpdateOne, withBucketID(id))
	return &BucketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bucket.
func (c *BucketClient) Delete() *BucketDelete {
	mutation := newBucketMutation(c.config, OpDelete)
	return &BucketDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BucketClient) DeleteOne(b *Bucket) *BucketDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BucketClient) DeleteOneID(id string) *BucketDeleteOne {
	builder := c.Delete().Where(bucket.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BucketDeleteOne{builder}
}

// Query returns a query builder for Bucket.
func (c *BucketClient) Query() *BucketQuery {
	return &BucketQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBucket},
		inters: c.Interceptors(),
	}
}

// Get returns a Bucket entity by its id.
func (c *BucketClient) Get(ctx context.Context, id string) (*Bucket, error) {
	return c.Query().Where(bucket.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BucketClient) GetX(ctx context.Context, id string) *Bucket {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Bucket.
func (c *BucketClient) QueryUser(b *Bucket) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bucket.Table, bucket.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bucket.UserTable, bucket.UserColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFiles queries the files edge of a Bucket.
func (c *BucketClient) QueryFiles(b *Bucket) *FileQuery {
	query := (&FileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bucket.Table, bucket.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bucket.FilesTable, bucket.FilesColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BucketClient) Hooks() []Hook {
	return c.hooks.Bucket
}

// Interceptors returns the client interceptors.
func (c *BucketClient) Interceptors() []Interceptor {
	return c.inters.Bucket
}

func (c *BucketClient) mutate(ctx context.Context, m *BucketMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BucketCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BucketUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BucketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BucketDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Bucket mutation op: %q", m.Op())
	}
}

// FileClient is a client for the File schema.
type FileClient struct {
	config
}

// NewFileClient returns a client for the File from the given config.
func NewFileClient(c config) *FileClient {
	return &FileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `file.Hooks(f(g(h())))`.
func (c *FileClient) Use(hooks ...Hook) {
	c.hooks.File = append(c.hooks.File, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `file.Intercept(f(g(h())))`.
func (c *FileClient) Intercept(interceptors ...Interceptor) {
	c.inters.File = append(c.inters.File, interceptors...)
}

// Create returns a builder for creating a File entity.
func (c *FileClient) Create() *FileCreate {
	mutation := newFileMutation(c.config, OpCreate)
	return &FileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of File entities.
func (c *FileClient) CreateBulk(builders ...*FileCreate) *FileCreateBulk {
	return &FileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FileClient) MapCreateBulk(slice any, setFunc func(*FileCreate, int)) *FileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FileCreateBulk{err: fmt.Errorf("calling to FileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for File.
func (c *FileClient) Update() *FileUpdate {
	mutation := newFileMutation(c.config, OpUpdate)
	return &FileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileClient) UpdateOne(f *File) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFile(f))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FileClient) UpdateOneID(id string) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFileID(id))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for File.
func (c *FileClient) Delete() *FileDelete {
	mutation := newFileMutation(c.config, OpDelete)
	return &FileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FileClient) DeleteOne(f *File) *FileDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FileClient) DeleteOneID(id string) *FileDeleteOne {
	builder := c.Delete().Where(file.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FileDeleteOne{builder}
}

// Query returns a query builder for File.
func (c *FileClient) Query() *FileQuery {
	return &FileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFile},
		inters: c.Interceptors(),
	}
}

// Get returns a File entity by its id.
func (c *FileClient) Get(ctx context.Context, id string) (*File, error) {
	return c.Query().Where(file.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileClient) GetX(ctx context.Context, id string) *File {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBucket queries the bucket edge of a File.
func (c *FileClient) QueryBucket(f *File) *BucketQuery {
	query := (&BucketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(bucket.Table, bucket.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, file.BucketTable, file.BucketColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a File.
func (c *FileClient) QueryUser(f *File) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, file.UserTable, file.UserColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImageCompressed queries the Image_compressed edge of a File.
func (c *FileClient) QueryImageCompressed(f *File) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, file.ImageCompressedTable, file.ImageCompressedColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImageOriginal queries the Image_original edge of a File.
func (c *FileClient) QueryImageOriginal(f *File) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, file.ImageOriginalTable, file.ImageOriginalColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImageThumbnail320x queries the Image_thumbnail320x edge of a File.
func (c *FileClient) QueryImageThumbnail320x(f *File) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, file.ImageThumbnail320xTable, file.ImageThumbnail320xColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImageThumbnail768x queries the Image_thumbnail768x edge of a File.
func (c *FileClient) QueryImageThumbnail768x(f *File) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, file.ImageThumbnail768xTable, file.ImageThumbnail768xColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVideoFile queries the Video_file edge of a File.
func (c *FileClient) QueryVideoFile(f *File) *VideoQuery {
	query := (&VideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(video.Table, video.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, file.VideoFileTable, file.VideoFileColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVideoPoster queries the Video_poster edge of a File.
func (c *FileClient) QueryVideoPoster(f *File) *VideoQuery {
	query := (&VideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(video.Table, video.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, file.VideoPosterTable, file.VideoPosterColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FileClient) Hooks() []Hook {
	return c.hooks.File
}

// Interceptors returns the client interceptors.
func (c *FileClient) Interceptors() []Interceptor {
	return c.inters.File
}

func (c *FileClient) mutate(ctx context.Context, m *FileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown File mutation op: %q", m.Op())
	}
}

// GroupClient is a client for the Group schema.
type GroupClient struct {
	config
}

// NewGroupClient returns a client for the Group from the given config.
func NewGroupClient(c config) *GroupClient {
	return &GroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `group.Hooks(f(g(h())))`.
func (c *GroupClient) Use(hooks ...Hook) {
	c.hooks.Group = append(c.hooks.Group, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `group.Intercept(f(g(h())))`.
func (c *GroupClient) Intercept(interceptors ...Interceptor) {
	c.inters.Group = append(c.inters.Group, interceptors...)
}

// Create returns a builder for creating a Group entity.
func (c *GroupClient) Create() *GroupCreate {
	mutation := newGroupMutation(c.config, OpCreate)
	return &GroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Group entities.
func (c *GroupClient) CreateBulk(builders ...*GroupCreate) *GroupCreateBulk {
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GroupClient) MapCreateBulk(slice any, setFunc func(*GroupCreate, int)) *GroupCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GroupCreateBulk{err: fmt.Errorf("calling to GroupClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GroupCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Group.
func (c *GroupClient) Update() *GroupUpdate {
	mutation := newGroupMutation(c.config, OpUpdate)
	return &GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupClient) UpdateOne(gr *Group) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroup(gr))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupClient) UpdateOneID(id string) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroupID(id))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Group.
func (c *GroupClient) Delete() *GroupDelete {
	mutation := newGroupMutation(c.config, OpDelete)
	return &GroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupClient) DeleteOne(gr *Group) *GroupDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupClient) DeleteOneID(id string) *GroupDeleteOne {
	builder := c.Delete().Where(group.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupDeleteOne{builder}
}

// Query returns a query builder for Group.
func (c *GroupClient) Query() *GroupQuery {
	return &GroupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroup},
		inters: c.Interceptors(),
	}
}

// Get returns a Group entity by its id.
func (c *GroupClient) Get(ctx context.Context, id string) (*Group, error) {
	return c.Query().Where(group.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupClient) GetX(ctx context.Context, id string) *Group {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Group.
func (c *GroupClient) QueryUsers(gr *Group) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, group.UsersTable, group.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupClient) Hooks() []Hook {
	return c.hooks.Group
}

// Interceptors returns the client interceptors.
func (c *GroupClient) Interceptors() []Interceptor {
	return c.inters.Group
}

func (c *GroupClient) mutate(ctx context.Context, m *GroupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Group mutation op: %q", m.Op())
	}
}

// ImageClient is a client for the Image schema.
type ImageClient struct {
	config
}

// NewImageClient returns a client for the Image from the given config.
func NewImageClient(c config) *ImageClient {
	return &ImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `image.Hooks(f(g(h())))`.
func (c *ImageClient) Use(hooks ...Hook) {
	c.hooks.Image = append(c.hooks.Image, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `image.Intercept(f(g(h())))`.
func (c *ImageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Image = append(c.inters.Image, interceptors...)
}

// Create returns a builder for creating a Image entity.
func (c *ImageClient) Create() *ImageCreate {
	mutation := newImageMutation(c.config, OpCreate)
	return &ImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Image entities.
func (c *ImageClient) CreateBulk(builders ...*ImageCreate) *ImageCreateBulk {
	return &ImageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ImageClient) MapCreateBulk(slice any, setFunc func(*ImageCreate, int)) *ImageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ImageCreateBulk{err: fmt.Errorf("calling to ImageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ImageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Image.
func (c *ImageClient) Update() *ImageUpdate {
	mutation := newImageMutation(c.config, OpUpdate)
	return &ImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImageClient) UpdateOne(i *Image) *ImageUpdateOne {
	mutation := newImageMutation(c.config, OpUpdateOne, withImage(i))
	return &ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImageClient) UpdateOneID(id string) *ImageUpdateOne {
	mutation := newImageMutation(c.config, OpUpdateOne, withImageID(id))
	return &ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Image.
func (c *ImageClient) Delete() *ImageDelete {
	mutation := newImageMutation(c.config, OpDelete)
	return &ImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ImageClient) DeleteOne(i *Image) *ImageDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ImageClient) DeleteOneID(id string) *ImageDeleteOne {
	builder := c.Delete().Where(image.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImageDeleteOne{builder}
}

// Query returns a query builder for Image.
func (c *ImageClient) Query() *ImageQuery {
	return &ImageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeImage},
		inters: c.Interceptors(),
	}
}

// Get returns a Image entity by its id.
func (c *ImageClient) Get(ctx context.Context, id string) (*Image, error) {
	return c.Query().Where(image.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImageClient) GetX(ctx context.Context, id string) *Image {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCompressed queries the compressed edge of a Image.
func (c *ImageClient) QueryCompressed(i *Image) *FileQuery {
	query := (&FileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, image.CompressedTable, image.CompressedColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOriginal queries the original edge of a Image.
func (c *ImageClient) QueryOriginal(i *Image) *FileQuery {
	query := (&FileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, image.OriginalTable, image.OriginalColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryThumbnail320x queries the thumbnail320x edge of a Image.
func (c *ImageClient) QueryThumbnail320x(i *Image) *FileQuery {
	query := (&FileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, image.Thumbnail320xTable, image.Thumbnail320xColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryThumbnail768x queries the thumbnail768x edge of a Image.
func (c *ImageClient) QueryThumbnail768x(i *Image) *FileQuery {
	query := (&FileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, image.Thumbnail768xTable, image.Thumbnail768xColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Image.
func (c *ImageClient) QueryUser(i *Image) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, image.UserTable, image.UserColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMomentImages queries the moment_images edge of a Image.
func (c *ImageClient) QueryMomentImages(i *Image) *MomentImageQuery {
	query := (&MomentImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(momentimage.Table, momentimage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, image.MomentImagesTable, image.MomentImagesColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ImageClient) Hooks() []Hook {
	return c.hooks.Image
}

// Interceptors returns the client interceptors.
func (c *ImageClient) Interceptors() []Interceptor {
	return c.inters.Image
}

func (c *ImageClient) mutate(ctx context.Context, m *ImageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ImageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ImageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ImageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Image mutation op: %q", m.Op())
	}
}

// KeepClient is a client for the Keep schema.
type KeepClient struct {
	config
}

// NewKeepClient returns a client for the Keep from the given config.
func NewKeepClient(c config) *KeepClient {
	return &KeepClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `keep.Hooks(f(g(h())))`.
func (c *KeepClient) Use(hooks ...Hook) {
	c.hooks.Keep = append(c.hooks.Keep, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `keep.Intercept(f(g(h())))`.
func (c *KeepClient) Intercept(interceptors ...Interceptor) {
	c.inters.Keep = append(c.inters.Keep, interceptors...)
}

// Create returns a builder for creating a Keep entity.
func (c *KeepClient) Create() *KeepCreate {
	mutation := newKeepMutation(c.config, OpCreate)
	return &KeepCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Keep entities.
func (c *KeepClient) CreateBulk(builders ...*KeepCreate) *KeepCreateBulk {
	return &KeepCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *KeepClient) MapCreateBulk(slice any, setFunc func(*KeepCreate, int)) *KeepCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &KeepCreateBulk{err: fmt.Errorf("calling to KeepClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*KeepCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &KeepCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Keep.
func (c *KeepClient) Update() *KeepUpdate {
	mutation := newKeepMutation(c.config, OpUpdate)
	return &KeepUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KeepClient) UpdateOne(k *Keep) *KeepUpdateOne {
	mutation := newKeepMutation(c.config, OpUpdateOne, withKeep(k))
	return &KeepUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KeepClient) UpdateOneID(id string) *KeepUpdateOne {
	mutation := newKeepMutation(c.config, OpUpdateOne, withKeepID(id))
	return &KeepUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Keep.
func (c *KeepClient) Delete() *KeepDelete {
	mutation := newKeepMutation(c.config, OpDelete)
	return &KeepDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *KeepClient) DeleteOne(k *Keep) *KeepDeleteOne {
	return c.DeleteOneID(k.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *KeepClient) DeleteOneID(id string) *KeepDeleteOne {
	builder := c.Delete().Where(keep.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KeepDeleteOne{builder}
}

// Query returns a query builder for Keep.
func (c *KeepClient) Query() *KeepQuery {
	return &KeepQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeKeep},
		inters: c.Interceptors(),
	}
}

// Get returns a Keep entity by its id.
func (c *KeepClient) Get(ctx context.Context, id string) (*Keep, error) {
	return c.Query().Where(keep.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KeepClient) GetX(ctx context.Context, id string) *Keep {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Keep.
func (c *KeepClient) QueryUser(k *Keep) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := k.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(keep.Table, keep.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, keep.UserTable, keep.UserColumn),
		)
		fromV = sqlgraph.Neighbors(k.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KeepClient) Hooks() []Hook {
	return c.hooks.Keep
}

// Interceptors returns the client interceptors.
func (c *KeepClient) Interceptors() []Interceptor {
	return c.inters.Keep
}

func (c *KeepClient) mutate(ctx context.Context, m *KeepMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&KeepCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&KeepUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&KeepUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&KeepDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Keep mutation op: %q", m.Op())
	}
}

// MindmapClient is a client for the Mindmap schema.
type MindmapClient struct {
	config
}

// NewMindmapClient returns a client for the Mindmap from the given config.
func NewMindmapClient(c config) *MindmapClient {
	return &MindmapClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mindmap.Hooks(f(g(h())))`.
func (c *MindmapClient) Use(hooks ...Hook) {
	c.hooks.Mindmap = append(c.hooks.Mindmap, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `mindmap.Intercept(f(g(h())))`.
func (c *MindmapClient) Intercept(interceptors ...Interceptor) {
	c.inters.Mindmap = append(c.inters.Mindmap, interceptors...)
}

// Create returns a builder for creating a Mindmap entity.
func (c *MindmapClient) Create() *MindmapCreate {
	mutation := newMindmapMutation(c.config, OpCreate)
	return &MindmapCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Mindmap entities.
func (c *MindmapClient) CreateBulk(builders ...*MindmapCreate) *MindmapCreateBulk {
	return &MindmapCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MindmapClient) MapCreateBulk(slice any, setFunc func(*MindmapCreate, int)) *MindmapCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MindmapCreateBulk{err: fmt.Errorf("calling to MindmapClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MindmapCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MindmapCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Mindmap.
func (c *MindmapClient) Update() *MindmapUpdate {
	mutation := newMindmapMutation(c.config, OpUpdate)
	return &MindmapUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MindmapClient) UpdateOne(m *Mindmap) *MindmapUpdateOne {
	mutation := newMindmapMutation(c.config, OpUpdateOne, withMindmap(m))
	return &MindmapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MindmapClient) UpdateOneID(id string) *MindmapUpdateOne {
	mutation := newMindmapMutation(c.config, OpUpdateOne, withMindmapID(id))
	return &MindmapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Mindmap.
func (c *MindmapClient) Delete() *MindmapDelete {
	mutation := newMindmapMutation(c.config, OpDelete)
	return &MindmapDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MindmapClient) DeleteOne(m *Mindmap) *MindmapDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MindmapClient) DeleteOneID(id string) *MindmapDeleteOne {
	builder := c.Delete().Where(mindmap.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MindmapDeleteOne{builder}
}

// Query returns a query builder for Mindmap.
func (c *MindmapClient) Query() *MindmapQuery {
	return &MindmapQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMindmap},
		inters: c.Interceptors(),
	}
}

// Get returns a Mindmap entity by its id.
func (c *MindmapClient) Get(ctx context.Context, id string) (*Mindmap, error) {
	return c.Query().Where(mindmap.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MindmapClient) GetX(ctx context.Context, id string) *Mindmap {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Mindmap.
func (c *MindmapClient) QueryUser(m *Mindmap) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mindmap.Table, mindmap.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mindmap.UserTable, mindmap.UserColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MindmapClient) Hooks() []Hook {
	return c.hooks.Mindmap
}

// Interceptors returns the client interceptors.
func (c *MindmapClient) Interceptors() []Interceptor {
	return c.inters.Mindmap
}

func (c *MindmapClient) mutate(ctx context.Context, m *MindmapMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MindmapCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MindmapUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MindmapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MindmapDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Mindmap mutation op: %q", m.Op())
	}
}

// MomentClient is a client for the Moment schema.
type MomentClient struct {
	config
}

// NewMomentClient returns a client for the Moment from the given config.
func NewMomentClient(c config) *MomentClient {
	return &MomentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `moment.Hooks(f(g(h())))`.
func (c *MomentClient) Use(hooks ...Hook) {
	c.hooks.Moment = append(c.hooks.Moment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `moment.Intercept(f(g(h())))`.
func (c *MomentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Moment = append(c.inters.Moment, interceptors...)
}

// Create returns a builder for creating a Moment entity.
func (c *MomentClient) Create() *MomentCreate {
	mutation := newMomentMutation(c.config, OpCreate)
	return &MomentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Moment entities.
func (c *MomentClient) CreateBulk(builders ...*MomentCreate) *MomentCreateBulk {
	return &MomentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MomentClient) MapCreateBulk(slice any, setFunc func(*MomentCreate, int)) *MomentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MomentCreateBulk{err: fmt.Errorf("calling to MomentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MomentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MomentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Moment.
func (c *MomentClient) Update() *MomentUpdate {
	mutation := newMomentMutation(c.config, OpUpdate)
	return &MomentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MomentClient) UpdateOne(m *Moment) *MomentUpdateOne {
	mutation := newMomentMutation(c.config, OpUpdateOne, withMoment(m))
	return &MomentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MomentClient) UpdateOneID(id string) *MomentUpdateOne {
	mutation := newMomentMutation(c.config, OpUpdateOne, withMomentID(id))
	return &MomentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Moment.
func (c *MomentClient) Delete() *MomentDelete {
	mutation := newMomentMutation(c.config, OpDelete)
	return &MomentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MomentClient) DeleteOne(m *Moment) *MomentDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MomentClient) DeleteOneID(id string) *MomentDeleteOne {
	builder := c.Delete().Where(moment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MomentDeleteOne{builder}
}

// Query returns a query builder for Moment.
func (c *MomentClient) Query() *MomentQuery {
	return &MomentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMoment},
		inters: c.Interceptors(),
	}
}

// Get returns a Moment entity by its id.
func (c *MomentClient) Get(ctx context.Context, id string) (*Moment, error) {
	return c.Query().Where(moment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MomentClient) GetX(ctx context.Context, id string) *Moment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMomentImages queries the moment_images edge of a Moment.
func (c *MomentClient) QueryMomentImages(m *Moment) *MomentImageQuery {
	query := (&MomentImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(moment.Table, moment.FieldID, id),
			sqlgraph.To(momentimage.Table, momentimage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, moment.MomentImagesTable, moment.MomentImagesColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMomentVideos queries the moment_videos edge of a Moment.
func (c *MomentClient) QueryMomentVideos(m *Moment) *MomentVideoQuery {
	query := (&MomentVideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(moment.Table, moment.FieldID, id),
			sqlgraph.To(momentvideo.Table, momentvideo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, moment.MomentVideosTable, moment.MomentVideosColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Moment.
func (c *MomentClient) QueryUser(m *Moment) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(moment.Table, moment.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, moment.UserTable, moment.UserColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MomentClient) Hooks() []Hook {
	return c.hooks.Moment
}

// Interceptors returns the client interceptors.
func (c *MomentClient) Interceptors() []Interceptor {
	return c.inters.Moment
}

func (c *MomentClient) mutate(ctx context.Context, m *MomentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MomentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MomentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MomentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MomentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Moment mutation op: %q", m.Op())
	}
}

// MomentImageClient is a client for the MomentImage schema.
type MomentImageClient struct {
	config
}

// NewMomentImageClient returns a client for the MomentImage from the given config.
func NewMomentImageClient(c config) *MomentImageClient {
	return &MomentImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `momentimage.Hooks(f(g(h())))`.
func (c *MomentImageClient) Use(hooks ...Hook) {
	c.hooks.MomentImage = append(c.hooks.MomentImage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `momentimage.Intercept(f(g(h())))`.
func (c *MomentImageClient) Intercept(interceptors ...Interceptor) {
	c.inters.MomentImage = append(c.inters.MomentImage, interceptors...)
}

// Create returns a builder for creating a MomentImage entity.
func (c *MomentImageClient) Create() *MomentImageCreate {
	mutation := newMomentImageMutation(c.config, OpCreate)
	return &MomentImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MomentImage entities.
func (c *MomentImageClient) CreateBulk(builders ...*MomentImageCreate) *MomentImageCreateBulk {
	return &MomentImageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MomentImageClient) MapCreateBulk(slice any, setFunc func(*MomentImageCreate, int)) *MomentImageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MomentImageCreateBulk{err: fmt.Errorf("calling to MomentImageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MomentImageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MomentImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MomentImage.
func (c *MomentImageClient) Update() *MomentImageUpdate {
	mutation := newMomentImageMutation(c.config, OpUpdate)
	return &MomentImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MomentImageClient) UpdateOne(mi *MomentImage) *MomentImageUpdateOne {
	mutation := newMomentImageMutation(c.config, OpUpdateOne, withMomentImage(mi))
	return &MomentImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MomentImageClient) UpdateOneID(id uint) *MomentImageUpdateOne {
	mutation := newMomentImageMutation(c.config, OpUpdateOne, withMomentImageID(id))
	return &MomentImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MomentImage.
func (c *MomentImageClient) Delete() *MomentImageDelete {
	mutation := newMomentImageMutation(c.config, OpDelete)
	return &MomentImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MomentImageClient) DeleteOne(mi *MomentImage) *MomentImageDeleteOne {
	return c.DeleteOneID(mi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MomentImageClient) DeleteOneID(id uint) *MomentImageDeleteOne {
	builder := c.Delete().Where(momentimage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MomentImageDeleteOne{builder}
}

// Query returns a query builder for MomentImage.
func (c *MomentImageClient) Query() *MomentImageQuery {
	return &MomentImageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMomentImage},
		inters: c.Interceptors(),
	}
}

// Get returns a MomentImage entity by its id.
func (c *MomentImageClient) Get(ctx context.Context, id uint) (*MomentImage, error) {
	return c.Query().Where(momentimage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MomentImageClient) GetX(ctx context.Context, id uint) *MomentImage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryImage queries the image edge of a MomentImage.
func (c *MomentImageClient) QueryImage(mi *MomentImage) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(momentimage.Table, momentimage.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, momentimage.ImageTable, momentimage.ImageColumn),
		)
		fromV = sqlgraph.Neighbors(mi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMoment queries the moment edge of a MomentImage.
func (c *MomentImageClient) QueryMoment(mi *MomentImage) *MomentQuery {
	query := (&MomentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(momentimage.Table, momentimage.FieldID, id),
			sqlgraph.To(moment.Table, moment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, momentimage.MomentTable, momentimage.MomentColumn),
		)
		fromV = sqlgraph.Neighbors(mi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MomentImageClient) Hooks() []Hook {
	return c.hooks.MomentImage
}

// Interceptors returns the client interceptors.
func (c *MomentImageClient) Interceptors() []Interceptor {
	return c.inters.MomentImage
}

func (c *MomentImageClient) mutate(ctx context.Context, m *MomentImageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MomentImageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MomentImageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MomentImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MomentImageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MomentImage mutation op: %q", m.Op())
	}
}

// MomentVideoClient is a client for the MomentVideo schema.
type MomentVideoClient struct {
	config
}

// NewMomentVideoClient returns a client for the MomentVideo from the given config.
func NewMomentVideoClient(c config) *MomentVideoClient {
	return &MomentVideoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `momentvideo.Hooks(f(g(h())))`.
func (c *MomentVideoClient) Use(hooks ...Hook) {
	c.hooks.MomentVideo = append(c.hooks.MomentVideo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `momentvideo.Intercept(f(g(h())))`.
func (c *MomentVideoClient) Intercept(interceptors ...Interceptor) {
	c.inters.MomentVideo = append(c.inters.MomentVideo, interceptors...)
}

// Create returns a builder for creating a MomentVideo entity.
func (c *MomentVideoClient) Create() *MomentVideoCreate {
	mutation := newMomentVideoMutation(c.config, OpCreate)
	return &MomentVideoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MomentVideo entities.
func (c *MomentVideoClient) CreateBulk(builders ...*MomentVideoCreate) *MomentVideoCreateBulk {
	return &MomentVideoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MomentVideoClient) MapCreateBulk(slice any, setFunc func(*MomentVideoCreate, int)) *MomentVideoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MomentVideoCreateBulk{err: fmt.Errorf("calling to MomentVideoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MomentVideoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MomentVideoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MomentVideo.
func (c *MomentVideoClient) Update() *MomentVideoUpdate {
	mutation := newMomentVideoMutation(c.config, OpUpdate)
	return &MomentVideoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MomentVideoClient) UpdateOne(mv *MomentVideo) *MomentVideoUpdateOne {
	mutation := newMomentVideoMutation(c.config, OpUpdateOne, withMomentVideo(mv))
	return &MomentVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MomentVideoClient) UpdateOneID(id uint) *MomentVideoUpdateOne {
	mutation := newMomentVideoMutation(c.config, OpUpdateOne, withMomentVideoID(id))
	return &MomentVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MomentVideo.
func (c *MomentVideoClient) Delete() *MomentVideoDelete {
	mutation := newMomentVideoMutation(c.config, OpDelete)
	return &MomentVideoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MomentVideoClient) DeleteOne(mv *MomentVideo) *MomentVideoDeleteOne {
	return c.DeleteOneID(mv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MomentVideoClient) DeleteOneID(id uint) *MomentVideoDeleteOne {
	builder := c.Delete().Where(momentvideo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MomentVideoDeleteOne{builder}
}

// Query returns a query builder for MomentVideo.
func (c *MomentVideoClient) Query() *MomentVideoQuery {
	return &MomentVideoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMomentVideo},
		inters: c.Interceptors(),
	}
}

// Get returns a MomentVideo entity by its id.
func (c *MomentVideoClient) Get(ctx context.Context, id uint) (*MomentVideo, error) {
	return c.Query().Where(momentvideo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MomentVideoClient) GetX(ctx context.Context, id uint) *MomentVideo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMoment queries the moment edge of a MomentVideo.
func (c *MomentVideoClient) QueryMoment(mv *MomentVideo) *MomentQuery {
	query := (&MomentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(momentvideo.Table, momentvideo.FieldID, id),
			sqlgraph.To(moment.Table, moment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, momentvideo.MomentTable, momentvideo.MomentColumn),
		)
		fromV = sqlgraph.Neighbors(mv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVideo queries the video edge of a MomentVideo.
func (c *MomentVideoClient) QueryVideo(mv *MomentVideo) *VideoQuery {
	query := (&VideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(momentvideo.Table, momentvideo.FieldID, id),
			sqlgraph.To(video.Table, video.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, momentvideo.VideoTable, momentvideo.VideoColumn),
		)
		fromV = sqlgraph.Neighbors(mv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MomentVideoClient) Hooks() []Hook {
	return c.hooks.MomentVideo
}

// Interceptors returns the client interceptors.
func (c *MomentVideoClient) Interceptors() []Interceptor {
	return c.inters.MomentVideo
}

func (c *MomentVideoClient) mutate(ctx context.Context, m *MomentVideoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MomentVideoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MomentVideoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MomentVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MomentVideoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MomentVideo mutation op: %q", m.Op())
	}
}

// TodoClient is a client for the Todo schema.
type TodoClient struct {
	config
}

// NewTodoClient returns a client for the Todo from the given config.
func NewTodoClient(c config) *TodoClient {
	return &TodoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `todo.Hooks(f(g(h())))`.
func (c *TodoClient) Use(hooks ...Hook) {
	c.hooks.Todo = append(c.hooks.Todo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `todo.Intercept(f(g(h())))`.
func (c *TodoClient) Intercept(interceptors ...Interceptor) {
	c.inters.Todo = append(c.inters.Todo, interceptors...)
}

// Create returns a builder for creating a Todo entity.
func (c *TodoClient) Create() *TodoCreate {
	mutation := newTodoMutation(c.config, OpCreate)
	return &TodoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Todo entities.
func (c *TodoClient) CreateBulk(builders ...*TodoCreate) *TodoCreateBulk {
	return &TodoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TodoClient) MapCreateBulk(slice any, setFunc func(*TodoCreate, int)) *TodoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TodoCreateBulk{err: fmt.Errorf("calling to TodoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TodoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TodoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Todo.
func (c *TodoClient) Update() *TodoUpdate {
	mutation := newTodoMutation(c.config, OpUpdate)
	return &TodoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TodoClient) UpdateOne(t *Todo) *TodoUpdateOne {
	mutation := newTodoMutation(c.config, OpUpdateOne, withTodo(t))
	return &TodoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TodoClient) UpdateOneID(id string) *TodoUpdateOne {
	mutation := newTodoMutation(c.config, OpUpdateOne, withTodoID(id))
	return &TodoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Todo.
func (c *TodoClient) Delete() *TodoDelete {
	mutation := newTodoMutation(c.config, OpDelete)
	return &TodoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TodoClient) DeleteOne(t *Todo) *TodoDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TodoClient) DeleteOneID(id string) *TodoDeleteOne {
	builder := c.Delete().Where(todo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TodoDeleteOne{builder}
}

// Query returns a query builder for Todo.
func (c *TodoClient) Query() *TodoQuery {
	return &TodoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTodo},
		inters: c.Interceptors(),
	}
}

// Get returns a Todo entity by its id.
func (c *TodoClient) Get(ctx context.Context, id string) (*Todo, error) {
	return c.Query().Where(todo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TodoClient) GetX(ctx context.Context, id string) *Todo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Todo.
func (c *TodoClient) QueryUser(t *Todo) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(todo.Table, todo.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, todo.UserTable, todo.UserColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TodoClient) Hooks() []Hook {
	return c.hooks.Todo
}

// Interceptors returns the client interceptors.
func (c *TodoClient) Interceptors() []Interceptor {
	return c.inters.Todo
}

func (c *TodoClient) mutate(ctx context.Context, m *TodoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TodoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TodoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TodoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TodoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Todo mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBuckets queries the buckets edge of a User.
func (c *UserClient) QueryBuckets(u *User) *BucketQuery {
	query := (&BucketClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(bucket.Table, bucket.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.BucketsTable, user.BucketsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFiles queries the files edge of a User.
func (c *UserClient) QueryFiles(u *User) *FileQuery {
	query := (&FileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FilesTable, user.FilesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImages queries the images edge of a User.
func (c *UserClient) QueryImages(u *User) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ImagesTable, user.ImagesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKeeps queries the keeps edge of a User.
func (c *UserClient) QueryKeeps(u *User) *KeepQuery {
	query := (&KeepClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(keep.Table, keep.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.KeepsTable, user.KeepsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMindmaps queries the mindmaps edge of a User.
func (c *UserClient) QueryMindmaps(u *User) *MindmapQuery {
	query := (&MindmapClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(mindmap.Table, mindmap.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MindmapsTable, user.MindmapsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMoments queries the moments edge of a User.
func (c *UserClient) QueryMoments(u *User) *MomentQuery {
	query := (&MomentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(moment.Table, moment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MomentsTable, user.MomentsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTodos queries the todos edge of a User.
func (c *UserClient) QueryTodos(u *User) *TodoQuery {
	query := (&TodoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(todo.Table, todo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TodosTable, user.TodosColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroup queries the group edge of a User.
func (c *UserClient) QueryGroup(u *User) *GroupQuery {
	query := (&GroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.GroupTable, user.GroupColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVideos queries the videos edge of a User.
func (c *UserClient) QueryVideos(u *User) *VideoQuery {
	query := (&VideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(video.Table, video.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.VideosTable, user.VideosColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// VideoClient is a client for the Video schema.
type VideoClient struct {
	config
}

// NewVideoClient returns a client for the Video from the given config.
func NewVideoClient(c config) *VideoClient {
	return &VideoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `video.Hooks(f(g(h())))`.
func (c *VideoClient) Use(hooks ...Hook) {
	c.hooks.Video = append(c.hooks.Video, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `video.Intercept(f(g(h())))`.
func (c *VideoClient) Intercept(interceptors ...Interceptor) {
	c.inters.Video = append(c.inters.Video, interceptors...)
}

// Create returns a builder for creating a Video entity.
func (c *VideoClient) Create() *VideoCreate {
	mutation := newVideoMutation(c.config, OpCreate)
	return &VideoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Video entities.
func (c *VideoClient) CreateBulk(builders ...*VideoCreate) *VideoCreateBulk {
	return &VideoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VideoClient) MapCreateBulk(slice any, setFunc func(*VideoCreate, int)) *VideoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VideoCreateBulk{err: fmt.Errorf("calling to VideoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VideoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VideoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Video.
func (c *VideoClient) Update() *VideoUpdate {
	mutation := newVideoMutation(c.config, OpUpdate)
	return &VideoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VideoClient) UpdateOne(v *Video) *VideoUpdateOne {
	mutation := newVideoMutation(c.config, OpUpdateOne, withVideo(v))
	return &VideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VideoClient) UpdateOneID(id string) *VideoUpdateOne {
	mutation := newVideoMutation(c.config, OpUpdateOne, withVideoID(id))
	return &VideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Video.
func (c *VideoClient) Delete() *VideoDelete {
	mutation := newVideoMutation(c.config, OpDelete)
	return &VideoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VideoClient) DeleteOne(v *Video) *VideoDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VideoClient) DeleteOneID(id string) *VideoDeleteOne {
	builder := c.Delete().Where(video.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VideoDeleteOne{builder}
}

// Query returns a query builder for Video.
func (c *VideoClient) Query() *VideoQuery {
	return &VideoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVideo},
		inters: c.Interceptors(),
	}
}

// Get returns a Video entity by its id.
func (c *VideoClient) Get(ctx context.Context, id string) (*Video, error) {
	return c.Query().Where(video.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VideoClient) GetX(ctx context.Context, id string) *Video {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMomentVideos queries the moment_videos edge of a Video.
func (c *VideoClient) QueryMomentVideos(v *Video) *MomentVideoQuery {
	query := (&MomentVideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(video.Table, video.FieldID, id),
			sqlgraph.To(momentvideo.Table, momentvideo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, video.MomentVideosTable, video.MomentVideosColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFile queries the file edge of a Video.
func (c *VideoClient) QueryFile(v *Video) *FileQuery {
	query := (&FileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(video.Table, video.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, video.FileTable, video.FileColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPoster queries the poster edge of a Video.
func (c *VideoClient) QueryPoster(v *Video) *FileQuery {
	query := (&FileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(video.Table, video.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, video.PosterTable, video.PosterColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Video.
func (c *VideoClient) QueryUser(v *Video) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(video.Table, video.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, video.UserTable, video.UserColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VideoClient) Hooks() []Hook {
	return c.hooks.Video
}

// Interceptors returns the client interceptors.
func (c *VideoClient) Interceptors() []Interceptor {
	return c.inters.Video
}

func (c *VideoClient) mutate(ctx context.Context, m *VideoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VideoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VideoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VideoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Video mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Bucket, File, Group, Image, Keep, Mindmap, Moment, MomentImage, MomentVideo,
		Todo, User, Video []ent.Hook
	}
	inters struct {
		Bucket, File, Group, Image, Keep, Mindmap, Moment, MomentImage, MomentVideo,
		Todo, User, Video []ent.Interceptor
	}
)

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"api.us4ever/internal/ent/image"
	"api.us4ever/internal/ent/moment"
	"api.us4ever/internal/ent/momentimage"
	"api.us4ever/internal/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MomentImageUpdate is the builder for updating MomentImage entities.
type MomentImageUpdate struct {
	config
	hooks    []Hook
	mutation *MomentImageMutation
}

// Where appends a list predicates to the MomentImageUpdate builder.
func (miu *MomentImageUpdate) Where(ps ...predicate.MomentImage) *MomentImageUpdate {
	miu.mutation.Where(ps...)
	return miu
}

// SetImageId sets the "imageId" field.
func (miu *MomentImageUpdate) SetImageId(s string) *MomentImageUpdate {
	miu.mutation.SetImageId(s)
	return miu
}

// SetNillableImageId sets the "imageId" field if the given value is not nil.
func (miu *MomentImageUpdate) SetNillableImageId(s *string) *MomentImageUpdate {
	if s != nil {
		miu.SetImageId(*s)
	}
	return miu
}

// ClearImageId clears the value of the "imageId" field.
func (miu *MomentImageUpdate) ClearImageId() *MomentImageUpdate {
	miu.mutation.ClearImageId()
	return miu
}

// SetMomentId sets the "momentId" field.
func (miu *MomentImageUpdate) SetMomentId(s string) *MomentImageUpdate {
	miu.mutation.SetMomentId(s)
	return miu
}

// SetNillableMomentId sets the "momentId" field if the given value is not nil.
func (miu *MomentImageUpdate) SetNillableMomentId(s *string) *MomentImageUpdate {
	if s != nil {
		miu.SetMomentId(*s)
	}
	return miu
}

// ClearMomentId clears the value of the "momentId" field.
func (miu *MomentImageUpdate) ClearMomentId() *MomentImageUpdate {
	miu.mutation.ClearMomentId()
	return miu
}

// SetSort sets the "sort" field.
func (miu *MomentImageUpdate) SetSort(i int32) *MomentImageUpdate {
	miu.mutation.ResetSort()
	miu.mutation.SetSort(i)
	return miu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (miu *MomentImageUpdate) SetNillableSort(i *int32) *MomentImageUpdate {
	if i != nil {
		miu.SetSort(*i)
	}
	return miu
}

// AddSort adds i to the "sort" field.
func (miu *MomentImageUpdate) AddSort(i int32) *MomentImageUpdate {
	miu.mutation.AddSort(i)
	return miu
}

// SetCreatedAt sets the "createdAt" field.
func (miu *MomentImageUpdate) SetCreatedAt(t time.Time) *MomentImageUpdate {
	miu.mutation.SetCreatedAt(t)
	return miu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (miu *MomentImageUpdate) SetNillableCreatedAt(t *time.Time) *MomentImageUpdate {
	if t != nil {
		miu.SetCreatedAt(*t)
	}
	return miu
}

// SetUpdatedAt sets the "updatedAt" field.
func (miu *MomentImageUpdate) SetUpdatedAt(t time.Time) *MomentImageUpdate {
	miu.mutation.SetUpdatedAt(t)
	return miu
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (miu *MomentImageUpdate) SetNillableUpdatedAt(t *time.Time) *MomentImageUpdate {
	if t != nil {
		miu.SetUpdatedAt(*t)
	}
	return miu
}

// SetImageID sets the "image" edge to the Image entity by ID.
func (miu *MomentImageUpdate) SetImageID(id string) *MomentImageUpdate {
	miu.mutation.SetImageID(id)
	return miu
}

// SetNillableImageID sets the "image" edge to the Image entity by ID if the given value is not nil.
func (miu *MomentImageUpdate) SetNillableImageID(id *string) *MomentImageUpdate {
	if id != nil {
		miu = miu.SetImageID(*id)
	}
	return miu
}

// SetImage sets the "image" edge to the Image entity.
func (miu *MomentImageUpdate) SetImage(i *Image) *MomentImageUpdate {
	return miu.SetImageID(i.ID)
}

// SetMomentID sets the "moment" edge to the Moment entity by ID.
func (miu *MomentImageUpdate) SetMomentID(id string) *MomentImageUpdate {
	miu.mutation.SetMomentID(id)
	return miu
}

// SetNillableMomentID sets the "moment" edge to the Moment entity by ID if the given value is not nil.
func (miu *MomentImageUpdate) SetNillableMomentID(id *string) *MomentImageUpdate {
	if id != nil {
		miu = miu.SetMomentID(*id)
	}
	return miu
}

// SetMoment sets the "moment" edge to the Moment entity.
func (miu *MomentImageUpdate) SetMoment(m *Moment) *MomentImageUpdate {
	return miu.SetMomentID(m.ID)
}

// Mutation returns the MomentImageMutation object of the builder.
func (miu *MomentImageUpdate) Mutation() *MomentImageMutation {
	return miu.mutation
}

// ClearImage clears the "image" edge to the Image entity.
func (miu *MomentImageUpdate) ClearImage() *MomentImageUpdate {
	miu.mutation.ClearImage()
	return miu
}

// ClearMoment clears the "moment" edge to the Moment entity.
func (miu *MomentImageUpdate) ClearMoment() *MomentImageUpdate {
	miu.mutation.ClearMoment()
	return miu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (miu *MomentImageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, miu.sqlSave, miu.mutation, miu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (miu *MomentImageUpdate) SaveX(ctx context.Context) int {
	affected, err := miu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (miu *MomentImageUpdate) Exec(ctx context.Context) error {
	_, err := miu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miu *MomentImageUpdate) ExecX(ctx context.Context) {
	if err := miu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (miu *MomentImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(momentimage.Table, momentimage.Columns, sqlgraph.NewFieldSpec(momentimage.FieldID, field.TypeUint))
	if ps := miu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miu.mutation.Sort(); ok {
		_spec.SetField(momentimage.FieldSort, field.TypeInt32, value)
	}
	if value, ok := miu.mutation.AddedSort(); ok {
		_spec.AddField(momentimage.FieldSort, field.TypeInt32, value)
	}
	if value, ok := miu.mutation.CreatedAt(); ok {
		_spec.SetField(momentimage.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := miu.mutation.UpdatedAt(); ok {
		_spec.SetField(momentimage.FieldUpdatedAt, field.TypeTime, value)
	}
	if miu.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   momentimage.ImageTable,
			Columns: []string{momentimage.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   momentimage.ImageTable,
			Columns: []string{momentimage.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if miu.mutation.MomentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   momentimage.MomentTable,
			Columns: []string{momentimage.MomentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.MomentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   momentimage.MomentTable,
			Columns: []string{momentimage.MomentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, miu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{momentimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	miu.mutation.done = true
	return n, nil
}

// MomentImageUpdateOne is the builder for updating a single MomentImage entity.
type MomentImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MomentImageMutation
}

// SetImageId sets the "imageId" field.
func (miuo *MomentImageUpdateOne) SetImageId(s string) *MomentImageUpdateOne {
	miuo.mutation.SetImageId(s)
	return miuo
}

// SetNillableImageId sets the "imageId" field if the given value is not nil.
func (miuo *MomentImageUpdateOne) SetNillableImageId(s *string) *MomentImageUpdateOne {
	if s != nil {
		miuo.SetImageId(*s)
	}
	return miuo
}

// ClearImageId clears the value of the "imageId" field.
func (miuo *MomentImageUpdateOne) ClearImageId() *MomentImageUpdateOne {
	miuo.mutation.ClearImageId()
	return miuo
}

// SetMomentId sets the "momentId" field.
func (miuo *MomentImageUpdateOne) SetMomentId(s string) *MomentImageUpdateOne {
	miuo.mutation.SetMomentId(s)
	return miuo
}

// SetNillableMomentId sets the "momentId" field if the given value is not nil.
func (miuo *MomentImageUpdateOne) SetNillableMomentId(s *string) *MomentImageUpdateOne {
	if s != nil {
		miuo.SetMomentId(*s)
	}
	return miuo
}

// ClearMomentId clears the value of the "momentId" field.
func (miuo *MomentImageUpdateOne) ClearMomentId() *MomentImageUpdateOne {
	miuo.mutation.ClearMomentId()
	return miuo
}

// SetSort sets the "sort" field.
func (miuo *MomentImageUpdateOne) SetSort(i int32) *MomentImageUpdateOne {
	miuo.mutation.ResetSort()
	miuo.mutation.SetSort(i)
	return miuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (miuo *MomentImageUpdateOne) SetNillableSort(i *int32) *MomentImageUpdateOne {
	if i != nil {
		miuo.SetSort(*i)
	}
	return miuo
}

// AddSort adds i to the "sort" field.
func (miuo *MomentImageUpdateOne) AddSort(i int32) *MomentImageUpdateOne {
	miuo.mutation.AddSort(i)
	return miuo
}

// SetCreatedAt sets the "createdAt" field.
func (miuo *MomentImageUpdateOne) SetCreatedAt(t time.Time) *MomentImageUpdateOne {
	miuo.mutation.SetCreatedAt(t)
	return miuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (miuo *MomentImageUpdateOne) SetNillableCreatedAt(t *time.Time) *MomentImageUpdateOne {
	if t != nil {
		miuo.SetCreatedAt(*t)
	}
	return miuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (miuo *MomentImageUpdateOne) SetUpdatedAt(t time.Time) *MomentImageUpdateOne {
	miuo.mutation.SetUpdatedAt(t)
	return miuo
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (miuo *MomentImageUpdateOne) SetNillableUpdatedAt(t *time.Time) *MomentImageUpdateOne {
	if t != nil {
		miuo.SetUpdatedAt(*t)
	}
	return miuo
}

// SetImageID sets the "image" edge to the Image entity by ID.
func (miuo *MomentImageUpdateOne) SetImageID(id string) *MomentImageUpdateOne {
	miuo.mutation.SetImageID(id)
	return miuo
}

// SetNillableImageID sets the "image" edge to the Image entity by ID if the given value is not nil.
func (miuo *MomentImageUpdateOne) SetNillableImageID(id *string) *MomentImageUpdateOne {
	if id != nil {
		miuo = miuo.SetImageID(*id)
	}
	return miuo
}

// SetImage sets the "image" edge to the Image entity.
func (miuo *MomentImageUpdateOne) SetImage(i *Image) *MomentImageUpdateOne {
	return miuo.SetImageID(i.ID)
}

// SetMomentID sets the "moment" edge to the Moment entity by ID.
func (miuo *MomentImageUpdateOne) SetMomentID(id string) *MomentImageUpdateOne {
	miuo.mutation.SetMomentID(id)
	return miuo
}

// SetNillableMomentID sets the "moment" edge to the Moment entity by ID if the given value is not nil.
func (miuo *MomentImageUpdateOne) SetNillableMomentID(id *string) *MomentImageUpdateOne {
	if id != nil {
		miuo = miuo.SetMomentID(*id)
	}
	return miuo
}

// SetMoment sets the "moment" edge to the Moment entity.
func (miuo *MomentImageUpdateOne) SetMoment(m *Moment) *MomentImageUpdateOne {
	return miuo.SetMomentID(m.ID)
}

// Mutation returns the MomentImageMutation object of the builder.
func (miuo *MomentImageUpdateOne) Mutation() *MomentImageMutation {
	return miuo.mutation
}

// ClearImage clears the "image" edge to the Image entity.
func (miuo *MomentImageUpdateOne) ClearImage() *MomentImageUpdateOne {
	miuo.mutation.ClearImage()
	return miuo
}

// ClearMoment clears the "moment" edge to the Moment entity.
func (miuo *MomentImageUpdateOne) ClearMoment() *MomentImageUpdateOne {
	miuo.mutation.ClearMoment()
	return miuo
}

// Where appends a list predicates to the MomentImageUpdate builder.
func (miuo *MomentImageUpdateOne) Where(ps ...predicate.MomentImage) *MomentImageUpdateOne {
	miuo.mutation.Where(ps...)
	return miuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (miuo *MomentImageUpdateOne) Select(field string, fields ...string) *MomentImageUpdateOne {
	miuo.fields = append([]string{field}, fields...)
	return miuo
}

// Save executes the query and returns the updated MomentImage entity.
func (miuo *MomentImageUpdateOne) Save(ctx context.Context) (*MomentImage, error) {
	return withHooks(ctx, miuo.sqlSave, miuo.mutation, miuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (miuo *MomentImageUpdateOne) SaveX(ctx context.Context) *MomentImage {
	node, err := miuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (miuo *MomentImageUpdateOne) Exec(ctx context.Context) error {
	_, err := miuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miuo *MomentImageUpdateOne) ExecX(ctx context.Context) {
	if err := miuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (miuo *MomentImageUpdateOne) sqlSave(ctx context.Context) (_node *MomentImage, err error) {
	_spec := sqlgraph.NewUpdateSpec(momentimage.Table, momentimage.Columns, sqlgraph.NewFieldSpec(momentimage.FieldID, field.TypeUint))
	id, ok := miuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MomentImage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := miuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, momentimage.FieldID)
		for _, f := range fields {
			if !momentimage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != momentimage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := miuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miuo.mutation.Sort(); ok {
		_spec.SetField(momentimage.FieldSort, field.TypeInt32, value)
	}
	if value, ok := miuo.mutation.AddedSort(); ok {
		_spec.AddField(momentimage.FieldSort, field.TypeInt32, value)
	}
	if value, ok := miuo.mutation.CreatedAt(); ok {
		_spec.SetField(momentimage.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := miuo.mutation.UpdatedAt(); ok {
		_spec.SetField(momentimage.FieldUpdatedAt, field.TypeTime, value)
	}
	if miuo.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   momentimage.ImageTable,
			Columns: []string{momentimage.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   momentimage.ImageTable,
			Columns: []string{momentimage.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if miuo.mutation.MomentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   momentimage.MomentTable,
			Columns: []string{momentimage.MomentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.MomentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   momentimage.MomentTable,
			Columns: []string{momentimage.MomentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MomentImage{config: miuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, miuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{momentimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	miuo.mutation.done = true
	return _node, nil
}

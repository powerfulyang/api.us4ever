// Code generated by ent, DO NOT EDIT.

package momentvideo

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the momentvideo type in the database.
	Label = "moment_video"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVideoId holds the string denoting the videoid field in the database.
	FieldVideoId = "videoId"
	// FieldMomentId holds the string denoting the momentid field in the database.
	FieldMomentId = "momentId"
	// FieldSort holds the string denoting the sort field in the database.
	FieldSort = "sort"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "createdAt"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updatedAt"
	// EdgeMoment holds the string denoting the moment edge name in mutations.
	EdgeMoment = "moment"
	// EdgeVideo holds the string denoting the video edge name in mutations.
	EdgeVideo = "video"
	// Table holds the table name of the momentvideo in the database.
	Table = "moment_videos"
	// MomentTable is the table that holds the moment relation/edge.
	MomentTable = "moment_videos"
	// MomentInverseTable is the table name for the Moment entity.
	// It exists in this package in order to avoid circular dependency with the "moment" package.
	MomentInverseTable = "moments"
	// MomentColumn is the table column denoting the moment relation/edge.
	MomentColumn = "momentId"
	// VideoTable is the table that holds the video relation/edge.
	VideoTable = "moment_videos"
	// VideoInverseTable is the table name for the Video entity.
	// It exists in this package in order to avoid circular dependency with the "video" package.
	VideoInverseTable = "videos"
	// VideoColumn is the table column denoting the video relation/edge.
	VideoColumn = "videoId"
)

// Columns holds all SQL columns for momentvideo fields.
var Columns = []string{
	FieldID,
	FieldVideoId,
	FieldMomentId,
	FieldSort,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the MomentVideo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVideoId orders the results by the videoId field.
func ByVideoId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoId, opts...).ToFunc()
}

// ByMomentId orders the results by the momentId field.
func ByMomentId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMomentId, opts...).ToFunc()
}

// BySort orders the results by the sort field.
func BySort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSort, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByMomentField orders the results by moment field.
func ByMomentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMomentStep(), sql.OrderByField(field, opts...))
	}
}

// ByVideoField orders the results by video field.
func ByVideoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVideoStep(), sql.OrderByField(field, opts...))
	}
}
func newMomentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MomentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MomentTable, MomentColumn),
	)
}
func newVideoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VideoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, VideoTable, VideoColumn),
	)
}

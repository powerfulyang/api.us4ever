// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"api.us4ever/internal/ent/file"
	"api.us4ever/internal/ent/momentvideo"
	"api.us4ever/internal/ent/user"
	"api.us4ever/internal/ent/video"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VideoCreate is the builder for creating a Video entity.
type VideoCreate struct {
	config
	mutation *VideoMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (vc *VideoCreate) SetName(s string) *VideoCreate {
	vc.mutation.SetName(s)
	return vc
}

// SetType sets the "type" field.
func (vc *VideoCreate) SetType(s string) *VideoCreate {
	vc.mutation.SetType(s)
	return vc
}

// SetSize sets the "size" field.
func (vc *VideoCreate) SetSize(i int) *VideoCreate {
	vc.mutation.SetSize(i)
	return vc
}

// SetHash sets the "hash" field.
func (vc *VideoCreate) SetHash(s string) *VideoCreate {
	vc.mutation.SetHash(s)
	return vc
}

// SetDuration sets the "duration" field.
func (vc *VideoCreate) SetDuration(i int32) *VideoCreate {
	vc.mutation.SetDuration(i)
	return vc
}

// SetIsPublic sets the "isPublic" field.
func (vc *VideoCreate) SetIsPublic(b bool) *VideoCreate {
	vc.mutation.SetIsPublic(b)
	return vc
}

// SetExtraData sets the "extraData" field.
func (vc *VideoCreate) SetExtraData(jm json.RawMessage) *VideoCreate {
	vc.mutation.SetExtraData(jm)
	return vc
}

// SetCategory sets the "category" field.
func (vc *VideoCreate) SetCategory(s string) *VideoCreate {
	vc.mutation.SetCategory(s)
	return vc
}

// SetPosterId sets the "posterId" field.
func (vc *VideoCreate) SetPosterId(s string) *VideoCreate {
	vc.mutation.SetPosterId(s)
	return vc
}

// SetNillablePosterId sets the "posterId" field if the given value is not nil.
func (vc *VideoCreate) SetNillablePosterId(s *string) *VideoCreate {
	if s != nil {
		vc.SetPosterId(*s)
	}
	return vc
}

// SetFileId sets the "fileId" field.
func (vc *VideoCreate) SetFileId(s string) *VideoCreate {
	vc.mutation.SetFileId(s)
	return vc
}

// SetNillableFileId sets the "fileId" field if the given value is not nil.
func (vc *VideoCreate) SetNillableFileId(s *string) *VideoCreate {
	if s != nil {
		vc.SetFileId(*s)
	}
	return vc
}

// SetUploadedBy sets the "uploadedBy" field.
func (vc *VideoCreate) SetUploadedBy(s string) *VideoCreate {
	vc.mutation.SetUploadedBy(s)
	return vc
}

// SetNillableUploadedBy sets the "uploadedBy" field if the given value is not nil.
func (vc *VideoCreate) SetNillableUploadedBy(s *string) *VideoCreate {
	if s != nil {
		vc.SetUploadedBy(*s)
	}
	return vc
}

// SetCreatedAt sets the "createdAt" field.
func (vc *VideoCreate) SetCreatedAt(t time.Time) *VideoCreate {
	vc.mutation.SetCreatedAt(t)
	return vc
}

// SetUpdatedAt sets the "updatedAt" field.
func (vc *VideoCreate) SetUpdatedAt(t time.Time) *VideoCreate {
	vc.mutation.SetUpdatedAt(t)
	return vc
}

// SetID sets the "id" field.
func (vc *VideoCreate) SetID(s string) *VideoCreate {
	vc.mutation.SetID(s)
	return vc
}

// AddMomentVideoIDs adds the "moment_videos" edge to the MomentVideo entity by IDs.
func (vc *VideoCreate) AddMomentVideoIDs(ids ...uint) *VideoCreate {
	vc.mutation.AddMomentVideoIDs(ids...)
	return vc
}

// AddMomentVideos adds the "moment_videos" edges to the MomentVideo entity.
func (vc *VideoCreate) AddMomentVideos(m ...*MomentVideo) *VideoCreate {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vc.AddMomentVideoIDs(ids...)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (vc *VideoCreate) SetFileID(id string) *VideoCreate {
	vc.mutation.SetFileID(id)
	return vc
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (vc *VideoCreate) SetNillableFileID(id *string) *VideoCreate {
	if id != nil {
		vc = vc.SetFileID(*id)
	}
	return vc
}

// SetFile sets the "file" edge to the File entity.
func (vc *VideoCreate) SetFile(f *File) *VideoCreate {
	return vc.SetFileID(f.ID)
}

// SetPosterID sets the "poster" edge to the File entity by ID.
func (vc *VideoCreate) SetPosterID(id string) *VideoCreate {
	vc.mutation.SetPosterID(id)
	return vc
}

// SetNillablePosterID sets the "poster" edge to the File entity by ID if the given value is not nil.
func (vc *VideoCreate) SetNillablePosterID(id *string) *VideoCreate {
	if id != nil {
		vc = vc.SetPosterID(*id)
	}
	return vc
}

// SetPoster sets the "poster" edge to the File entity.
func (vc *VideoCreate) SetPoster(f *File) *VideoCreate {
	return vc.SetPosterID(f.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (vc *VideoCreate) SetUserID(id string) *VideoCreate {
	vc.mutation.SetUserID(id)
	return vc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (vc *VideoCreate) SetNillableUserID(id *string) *VideoCreate {
	if id != nil {
		vc = vc.SetUserID(*id)
	}
	return vc
}

// SetUser sets the "user" edge to the User entity.
func (vc *VideoCreate) SetUser(u *User) *VideoCreate {
	return vc.SetUserID(u.ID)
}

// Mutation returns the VideoMutation object of the builder.
func (vc *VideoCreate) Mutation() *VideoMutation {
	return vc.mutation
}

// Save creates the Video in the database.
func (vc *VideoCreate) Save(ctx context.Context) (*Video, error) {
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VideoCreate) SaveX(ctx context.Context) *Video {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VideoCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VideoCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VideoCreate) check() error {
	if _, ok := vc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Video.name"`)}
	}
	if _, ok := vc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Video.type"`)}
	}
	if _, ok := vc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "Video.size"`)}
	}
	if _, ok := vc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Video.hash"`)}
	}
	if _, ok := vc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "Video.duration"`)}
	}
	if _, ok := vc.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "isPublic", err: errors.New(`ent: missing required field "Video.isPublic"`)}
	}
	if _, ok := vc.mutation.ExtraData(); !ok {
		return &ValidationError{Name: "extraData", err: errors.New(`ent: missing required field "Video.extraData"`)}
	}
	if _, ok := vc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "Video.category"`)}
	}
	if _, ok := vc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Video.createdAt"`)}
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Video.updatedAt"`)}
	}
	return nil
}

func (vc *VideoCreate) sqlSave(ctx context.Context) (*Video, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Video.ID type: %T", _spec.ID.Value)
		}
	}
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VideoCreate) createSpec() (*Video, *sqlgraph.CreateSpec) {
	var (
		_node = &Video{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(video.Table, sqlgraph.NewFieldSpec(video.FieldID, field.TypeString))
	)
	if id, ok := vc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vc.mutation.Name(); ok {
		_spec.SetField(video.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := vc.mutation.GetType(); ok {
		_spec.SetField(video.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := vc.mutation.Size(); ok {
		_spec.SetField(video.FieldSize, field.TypeInt, value)
		_node.Size = value
	}
	if value, ok := vc.mutation.Hash(); ok {
		_spec.SetField(video.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := vc.mutation.Duration(); ok {
		_spec.SetField(video.FieldDuration, field.TypeInt32, value)
		_node.Duration = value
	}
	if value, ok := vc.mutation.IsPublic(); ok {
		_spec.SetField(video.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := vc.mutation.ExtraData(); ok {
		_spec.SetField(video.FieldExtraData, field.TypeJSON, value)
		_node.ExtraData = value
	}
	if value, ok := vc.mutation.Category(); ok {
		_spec.SetField(video.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := vc.mutation.CreatedAt(); ok {
		_spec.SetField(video.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vc.mutation.UpdatedAt(); ok {
		_spec.SetField(video.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := vc.mutation.MomentVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   video.MomentVideosTable,
			Columns: []string{video.MomentVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentvideo.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.FileTable,
			Columns: []string{video.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FileId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.PosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.PosterTable,
			Columns: []string{video.PosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PosterId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.UserTable,
			Columns: []string{video.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UploadedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VideoCreateBulk is the builder for creating many Video entities in bulk.
type VideoCreateBulk struct {
	config
	err      error
	builders []*VideoCreate
}

// Save creates the Video entities in the database.
func (vcb *VideoCreateBulk) Save(ctx context.Context) ([]*Video, error) {
	if vcb.err != nil {
		return nil, vcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Video, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VideoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VideoCreateBulk) SaveX(ctx context.Context) []*Video {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VideoCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VideoCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}

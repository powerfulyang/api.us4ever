// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"api.us4ever/internal/ent/bucket"
	"api.us4ever/internal/ent/file"
	"api.us4ever/internal/ent/predicate"
	"api.us4ever/internal/ent/user"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// BucketUpdate is the builder for updating Bucket entities.
type BucketUpdate struct {
	config
	hooks    []Hook
	mutation *BucketMutation
}

// Where appends a list predicates to the BucketUpdate builder.
func (bu *BucketUpdate) Where(ps ...predicate.Bucket) *BucketUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetName sets the "name" field.
func (bu *BucketUpdate) SetName(s string) *BucketUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bu *BucketUpdate) SetNillableName(s *string) *BucketUpdate {
	if s != nil {
		bu.SetName(*s)
	}
	return bu
}

// SetBucketName sets the "bucketName" field.
func (bu *BucketUpdate) SetBucketName(s string) *BucketUpdate {
	bu.mutation.SetBucketName(s)
	return bu
}

// SetNillableBucketName sets the "bucketName" field if the given value is not nil.
func (bu *BucketUpdate) SetNillableBucketName(s *string) *BucketUpdate {
	if s != nil {
		bu.SetBucketName(*s)
	}
	return bu
}

// SetProvider sets the "provider" field.
func (bu *BucketUpdate) SetProvider(b bucket.Provider) *BucketUpdate {
	bu.mutation.SetProvider(b)
	return bu
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (bu *BucketUpdate) SetNillableProvider(b *bucket.Provider) *BucketUpdate {
	if b != nil {
		bu.SetProvider(*b)
	}
	return bu
}

// SetRegion sets the "region" field.
func (bu *BucketUpdate) SetRegion(s string) *BucketUpdate {
	bu.mutation.SetRegion(s)
	return bu
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (bu *BucketUpdate) SetNillableRegion(s *string) *BucketUpdate {
	if s != nil {
		bu.SetRegion(*s)
	}
	return bu
}

// SetEndpoint sets the "endpoint" field.
func (bu *BucketUpdate) SetEndpoint(s string) *BucketUpdate {
	bu.mutation.SetEndpoint(s)
	return bu
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (bu *BucketUpdate) SetNillableEndpoint(s *string) *BucketUpdate {
	if s != nil {
		bu.SetEndpoint(*s)
	}
	return bu
}

// SetPublicUrl sets the "publicUrl" field.
func (bu *BucketUpdate) SetPublicUrl(s string) *BucketUpdate {
	bu.mutation.SetPublicUrl(s)
	return bu
}

// SetNillablePublicUrl sets the "publicUrl" field if the given value is not nil.
func (bu *BucketUpdate) SetNillablePublicUrl(s *string) *BucketUpdate {
	if s != nil {
		bu.SetPublicUrl(*s)
	}
	return bu
}

// SetAccessKey sets the "accessKey" field.
func (bu *BucketUpdate) SetAccessKey(s string) *BucketUpdate {
	bu.mutation.SetAccessKey(s)
	return bu
}

// SetNillableAccessKey sets the "accessKey" field if the given value is not nil.
func (bu *BucketUpdate) SetNillableAccessKey(s *string) *BucketUpdate {
	if s != nil {
		bu.SetAccessKey(*s)
	}
	return bu
}

// SetSecretKey sets the "secretKey" field.
func (bu *BucketUpdate) SetSecretKey(s string) *BucketUpdate {
	bu.mutation.SetSecretKey(s)
	return bu
}

// SetNillableSecretKey sets the "secretKey" field if the given value is not nil.
func (bu *BucketUpdate) SetNillableSecretKey(s *string) *BucketUpdate {
	if s != nil {
		bu.SetSecretKey(*s)
	}
	return bu
}

// SetDescription sets the "description" field.
func (bu *BucketUpdate) SetDescription(s string) *BucketUpdate {
	bu.mutation.SetDescription(s)
	return bu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bu *BucketUpdate) SetNillableDescription(s *string) *BucketUpdate {
	if s != nil {
		bu.SetDescription(*s)
	}
	return bu
}

// SetCreatedAt sets the "createdAt" field.
func (bu *BucketUpdate) SetCreatedAt(t time.Time) *BucketUpdate {
	bu.mutation.SetCreatedAt(t)
	return bu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (bu *BucketUpdate) SetNillableCreatedAt(t *time.Time) *BucketUpdate {
	if t != nil {
		bu.SetCreatedAt(*t)
	}
	return bu
}

// SetUpdatedAt sets the "updatedAt" field.
func (bu *BucketUpdate) SetUpdatedAt(t time.Time) *BucketUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (bu *BucketUpdate) SetNillableUpdatedAt(t *time.Time) *BucketUpdate {
	if t != nil {
		bu.SetUpdatedAt(*t)
	}
	return bu
}

// SetOwnerId sets the "ownerId" field.
func (bu *BucketUpdate) SetOwnerId(s string) *BucketUpdate {
	bu.mutation.SetOwnerId(s)
	return bu
}

// SetNillableOwnerId sets the "ownerId" field if the given value is not nil.
func (bu *BucketUpdate) SetNillableOwnerId(s *string) *BucketUpdate {
	if s != nil {
		bu.SetOwnerId(*s)
	}
	return bu
}

// ClearOwnerId clears the value of the "ownerId" field.
func (bu *BucketUpdate) ClearOwnerId() *BucketUpdate {
	bu.mutation.ClearOwnerId()
	return bu
}

// SetExtraData sets the "extraData" field.
func (bu *BucketUpdate) SetExtraData(jm json.RawMessage) *BucketUpdate {
	bu.mutation.SetExtraData(jm)
	return bu
}

// AppendExtraData appends jm to the "extraData" field.
func (bu *BucketUpdate) AppendExtraData(jm json.RawMessage) *BucketUpdate {
	bu.mutation.AppendExtraData(jm)
	return bu
}

// SetCategory sets the "category" field.
func (bu *BucketUpdate) SetCategory(s string) *BucketUpdate {
	bu.mutation.SetCategory(s)
	return bu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (bu *BucketUpdate) SetNillableCategory(s *string) *BucketUpdate {
	if s != nil {
		bu.SetCategory(*s)
	}
	return bu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bu *BucketUpdate) SetUserID(id string) *BucketUpdate {
	bu.mutation.SetUserID(id)
	return bu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (bu *BucketUpdate) SetNillableUserID(id *string) *BucketUpdate {
	if id != nil {
		bu = bu.SetUserID(*id)
	}
	return bu
}

// SetUser sets the "user" edge to the User entity.
func (bu *BucketUpdate) SetUser(u *User) *BucketUpdate {
	return bu.SetUserID(u.ID)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (bu *BucketUpdate) AddFileIDs(ids ...string) *BucketUpdate {
	bu.mutation.AddFileIDs(ids...)
	return bu
}

// AddFiles adds the "files" edges to the File entity.
func (bu *BucketUpdate) AddFiles(f ...*File) *BucketUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return bu.AddFileIDs(ids...)
}

// Mutation returns the BucketMutation object of the builder.
func (bu *BucketUpdate) Mutation() *BucketMutation {
	return bu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bu *BucketUpdate) ClearUser() *BucketUpdate {
	bu.mutation.ClearUser()
	return bu
}

// ClearFiles clears all "files" edges to the File entity.
func (bu *BucketUpdate) ClearFiles() *BucketUpdate {
	bu.mutation.ClearFiles()
	return bu
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (bu *BucketUpdate) RemoveFileIDs(ids ...string) *BucketUpdate {
	bu.mutation.RemoveFileIDs(ids...)
	return bu
}

// RemoveFiles removes "files" edges to File entities.
func (bu *BucketUpdate) RemoveFiles(f ...*File) *BucketUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return bu.RemoveFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BucketUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BucketUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BucketUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BucketUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BucketUpdate) check() error {
	if v, ok := bu.mutation.Provider(); ok {
		if err := bucket.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "Bucket.provider": %w`, err)}
		}
	}
	return nil
}

func (bu *BucketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bucket.Table, bucket.Columns, sqlgraph.NewFieldSpec(bucket.FieldID, field.TypeString))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.SetField(bucket.FieldName, field.TypeString, value)
	}
	if value, ok := bu.mutation.BucketName(); ok {
		_spec.SetField(bucket.FieldBucketName, field.TypeString, value)
	}
	if value, ok := bu.mutation.Provider(); ok {
		_spec.SetField(bucket.FieldProvider, field.TypeEnum, value)
	}
	if value, ok := bu.mutation.Region(); ok {
		_spec.SetField(bucket.FieldRegion, field.TypeString, value)
	}
	if value, ok := bu.mutation.Endpoint(); ok {
		_spec.SetField(bucket.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := bu.mutation.PublicUrl(); ok {
		_spec.SetField(bucket.FieldPublicUrl, field.TypeString, value)
	}
	if value, ok := bu.mutation.AccessKey(); ok {
		_spec.SetField(bucket.FieldAccessKey, field.TypeString, value)
	}
	if value, ok := bu.mutation.SecretKey(); ok {
		_spec.SetField(bucket.FieldSecretKey, field.TypeString, value)
	}
	if value, ok := bu.mutation.Description(); ok {
		_spec.SetField(bucket.FieldDescription, field.TypeString, value)
	}
	if value, ok := bu.mutation.CreatedAt(); ok {
		_spec.SetField(bucket.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(bucket.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.ExtraData(); ok {
		_spec.SetField(bucket.FieldExtraData, field.TypeJSON, value)
	}
	if value, ok := bu.mutation.AppendedExtraData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, bucket.FieldExtraData, value)
		})
	}
	if value, ok := bu.mutation.Category(); ok {
		_spec.SetField(bucket.FieldCategory, field.TypeString, value)
	}
	if bu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bucket.UserTable,
			Columns: []string{bucket.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bucket.UserTable,
			Columns: []string{bucket.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bucket.FilesTable,
			Columns: []string{bucket.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !bu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bucket.FilesTable,
			Columns: []string{bucket.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bucket.FilesTable,
			Columns: []string{bucket.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bucket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BucketUpdateOne is the builder for updating a single Bucket entity.
type BucketUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BucketMutation
}

// SetName sets the "name" field.
func (buo *BucketUpdateOne) SetName(s string) *BucketUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (buo *BucketUpdateOne) SetNillableName(s *string) *BucketUpdateOne {
	if s != nil {
		buo.SetName(*s)
	}
	return buo
}

// SetBucketName sets the "bucketName" field.
func (buo *BucketUpdateOne) SetBucketName(s string) *BucketUpdateOne {
	buo.mutation.SetBucketName(s)
	return buo
}

// SetNillableBucketName sets the "bucketName" field if the given value is not nil.
func (buo *BucketUpdateOne) SetNillableBucketName(s *string) *BucketUpdateOne {
	if s != nil {
		buo.SetBucketName(*s)
	}
	return buo
}

// SetProvider sets the "provider" field.
func (buo *BucketUpdateOne) SetProvider(b bucket.Provider) *BucketUpdateOne {
	buo.mutation.SetProvider(b)
	return buo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (buo *BucketUpdateOne) SetNillableProvider(b *bucket.Provider) *BucketUpdateOne {
	if b != nil {
		buo.SetProvider(*b)
	}
	return buo
}

// SetRegion sets the "region" field.
func (buo *BucketUpdateOne) SetRegion(s string) *BucketUpdateOne {
	buo.mutation.SetRegion(s)
	return buo
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (buo *BucketUpdateOne) SetNillableRegion(s *string) *BucketUpdateOne {
	if s != nil {
		buo.SetRegion(*s)
	}
	return buo
}

// SetEndpoint sets the "endpoint" field.
func (buo *BucketUpdateOne) SetEndpoint(s string) *BucketUpdateOne {
	buo.mutation.SetEndpoint(s)
	return buo
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (buo *BucketUpdateOne) SetNillableEndpoint(s *string) *BucketUpdateOne {
	if s != nil {
		buo.SetEndpoint(*s)
	}
	return buo
}

// SetPublicUrl sets the "publicUrl" field.
func (buo *BucketUpdateOne) SetPublicUrl(s string) *BucketUpdateOne {
	buo.mutation.SetPublicUrl(s)
	return buo
}

// SetNillablePublicUrl sets the "publicUrl" field if the given value is not nil.
func (buo *BucketUpdateOne) SetNillablePublicUrl(s *string) *BucketUpdateOne {
	if s != nil {
		buo.SetPublicUrl(*s)
	}
	return buo
}

// SetAccessKey sets the "accessKey" field.
func (buo *BucketUpdateOne) SetAccessKey(s string) *BucketUpdateOne {
	buo.mutation.SetAccessKey(s)
	return buo
}

// SetNillableAccessKey sets the "accessKey" field if the given value is not nil.
func (buo *BucketUpdateOne) SetNillableAccessKey(s *string) *BucketUpdateOne {
	if s != nil {
		buo.SetAccessKey(*s)
	}
	return buo
}

// SetSecretKey sets the "secretKey" field.
func (buo *BucketUpdateOne) SetSecretKey(s string) *BucketUpdateOne {
	buo.mutation.SetSecretKey(s)
	return buo
}

// SetNillableSecretKey sets the "secretKey" field if the given value is not nil.
func (buo *BucketUpdateOne) SetNillableSecretKey(s *string) *BucketUpdateOne {
	if s != nil {
		buo.SetSecretKey(*s)
	}
	return buo
}

// SetDescription sets the "description" field.
func (buo *BucketUpdateOne) SetDescription(s string) *BucketUpdateOne {
	buo.mutation.SetDescription(s)
	return buo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (buo *BucketUpdateOne) SetNillableDescription(s *string) *BucketUpdateOne {
	if s != nil {
		buo.SetDescription(*s)
	}
	return buo
}

// SetCreatedAt sets the "createdAt" field.
func (buo *BucketUpdateOne) SetCreatedAt(t time.Time) *BucketUpdateOne {
	buo.mutation.SetCreatedAt(t)
	return buo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (buo *BucketUpdateOne) SetNillableCreatedAt(t *time.Time) *BucketUpdateOne {
	if t != nil {
		buo.SetCreatedAt(*t)
	}
	return buo
}

// SetUpdatedAt sets the "updatedAt" field.
func (buo *BucketUpdateOne) SetUpdatedAt(t time.Time) *BucketUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (buo *BucketUpdateOne) SetNillableUpdatedAt(t *time.Time) *BucketUpdateOne {
	if t != nil {
		buo.SetUpdatedAt(*t)
	}
	return buo
}

// SetOwnerId sets the "ownerId" field.
func (buo *BucketUpdateOne) SetOwnerId(s string) *BucketUpdateOne {
	buo.mutation.SetOwnerId(s)
	return buo
}

// SetNillableOwnerId sets the "ownerId" field if the given value is not nil.
func (buo *BucketUpdateOne) SetNillableOwnerId(s *string) *BucketUpdateOne {
	if s != nil {
		buo.SetOwnerId(*s)
	}
	return buo
}

// ClearOwnerId clears the value of the "ownerId" field.
func (buo *BucketUpdateOne) ClearOwnerId() *BucketUpdateOne {
	buo.mutation.ClearOwnerId()
	return buo
}

// SetExtraData sets the "extraData" field.
func (buo *BucketUpdateOne) SetExtraData(jm json.RawMessage) *BucketUpdateOne {
	buo.mutation.SetExtraData(jm)
	return buo
}

// AppendExtraData appends jm to the "extraData" field.
func (buo *BucketUpdateOne) AppendExtraData(jm json.RawMessage) *BucketUpdateOne {
	buo.mutation.AppendExtraData(jm)
	return buo
}

// SetCategory sets the "category" field.
func (buo *BucketUpdateOne) SetCategory(s string) *BucketUpdateOne {
	buo.mutation.SetCategory(s)
	return buo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (buo *BucketUpdateOne) SetNillableCategory(s *string) *BucketUpdateOne {
	if s != nil {
		buo.SetCategory(*s)
	}
	return buo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (buo *BucketUpdateOne) SetUserID(id string) *BucketUpdateOne {
	buo.mutation.SetUserID(id)
	return buo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (buo *BucketUpdateOne) SetNillableUserID(id *string) *BucketUpdateOne {
	if id != nil {
		buo = buo.SetUserID(*id)
	}
	return buo
}

// SetUser sets the "user" edge to the User entity.
func (buo *BucketUpdateOne) SetUser(u *User) *BucketUpdateOne {
	return buo.SetUserID(u.ID)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (buo *BucketUpdateOne) AddFileIDs(ids ...string) *BucketUpdateOne {
	buo.mutation.AddFileIDs(ids...)
	return buo
}

// AddFiles adds the "files" edges to the File entity.
func (buo *BucketUpdateOne) AddFiles(f ...*File) *BucketUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return buo.AddFileIDs(ids...)
}

// Mutation returns the BucketMutation object of the builder.
func (buo *BucketUpdateOne) Mutation() *BucketMutation {
	return buo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (buo *BucketUpdateOne) ClearUser() *BucketUpdateOne {
	buo.mutation.ClearUser()
	return buo
}

// ClearFiles clears all "files" edges to the File entity.
func (buo *BucketUpdateOne) ClearFiles() *BucketUpdateOne {
	buo.mutation.ClearFiles()
	return buo
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (buo *BucketUpdateOne) RemoveFileIDs(ids ...string) *BucketUpdateOne {
	buo.mutation.RemoveFileIDs(ids...)
	return buo
}

// RemoveFiles removes "files" edges to File entities.
func (buo *BucketUpdateOne) RemoveFiles(f ...*File) *BucketUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return buo.RemoveFileIDs(ids...)
}

// Where appends a list predicates to the BucketUpdate builder.
func (buo *BucketUpdateOne) Where(ps ...predicate.Bucket) *BucketUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BucketUpdateOne) Select(field string, fields ...string) *BucketUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bucket entity.
func (buo *BucketUpdateOne) Save(ctx context.Context) (*Bucket, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BucketUpdateOne) SaveX(ctx context.Context) *Bucket {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BucketUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BucketUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BucketUpdateOne) check() error {
	if v, ok := buo.mutation.Provider(); ok {
		if err := bucket.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "Bucket.provider": %w`, err)}
		}
	}
	return nil
}

func (buo *BucketUpdateOne) sqlSave(ctx context.Context) (_node *Bucket, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bucket.Table, bucket.Columns, sqlgraph.NewFieldSpec(bucket.FieldID, field.TypeString))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bucket.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bucket.FieldID)
		for _, f := range fields {
			if !bucket.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bucket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.SetField(bucket.FieldName, field.TypeString, value)
	}
	if value, ok := buo.mutation.BucketName(); ok {
		_spec.SetField(bucket.FieldBucketName, field.TypeString, value)
	}
	if value, ok := buo.mutation.Provider(); ok {
		_spec.SetField(bucket.FieldProvider, field.TypeEnum, value)
	}
	if value, ok := buo.mutation.Region(); ok {
		_spec.SetField(bucket.FieldRegion, field.TypeString, value)
	}
	if value, ok := buo.mutation.Endpoint(); ok {
		_spec.SetField(bucket.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := buo.mutation.PublicUrl(); ok {
		_spec.SetField(bucket.FieldPublicUrl, field.TypeString, value)
	}
	if value, ok := buo.mutation.AccessKey(); ok {
		_spec.SetField(bucket.FieldAccessKey, field.TypeString, value)
	}
	if value, ok := buo.mutation.SecretKey(); ok {
		_spec.SetField(bucket.FieldSecretKey, field.TypeString, value)
	}
	if value, ok := buo.mutation.Description(); ok {
		_spec.SetField(bucket.FieldDescription, field.TypeString, value)
	}
	if value, ok := buo.mutation.CreatedAt(); ok {
		_spec.SetField(bucket.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(bucket.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.ExtraData(); ok {
		_spec.SetField(bucket.FieldExtraData, field.TypeJSON, value)
	}
	if value, ok := buo.mutation.AppendedExtraData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, bucket.FieldExtraData, value)
		})
	}
	if value, ok := buo.mutation.Category(); ok {
		_spec.SetField(bucket.FieldCategory, field.TypeString, value)
	}
	if buo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bucket.UserTable,
			Columns: []string{bucket.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bucket.UserTable,
			Columns: []string{bucket.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bucket.FilesTable,
			Columns: []string{bucket.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !buo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bucket.FilesTable,
			Columns: []string{bucket.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bucket.FilesTable,
			Columns: []string{bucket.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bucket{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bucket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}

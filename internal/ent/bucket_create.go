// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"api.us4ever/internal/ent/bucket"
	"api.us4ever/internal/ent/file"
	"api.us4ever/internal/ent/user"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BucketCreate is the builder for creating a Bucket entity.
type BucketCreate struct {
	config
	mutation *BucketMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (bc *BucketCreate) SetName(s string) *BucketCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetBucketName sets the "bucketName" field.
func (bc *BucketCreate) SetBucketName(s string) *BucketCreate {
	bc.mutation.SetBucketName(s)
	return bc
}

// SetProvider sets the "provider" field.
func (bc *BucketCreate) SetProvider(b bucket.Provider) *BucketCreate {
	bc.mutation.SetProvider(b)
	return bc
}

// SetRegion sets the "region" field.
func (bc *BucketCreate) SetRegion(s string) *BucketCreate {
	bc.mutation.SetRegion(s)
	return bc
}

// SetEndpoint sets the "endpoint" field.
func (bc *BucketCreate) SetEndpoint(s string) *BucketCreate {
	bc.mutation.SetEndpoint(s)
	return bc
}

// SetPublicUrl sets the "publicUrl" field.
func (bc *BucketCreate) SetPublicUrl(s string) *BucketCreate {
	bc.mutation.SetPublicUrl(s)
	return bc
}

// SetAccessKey sets the "accessKey" field.
func (bc *BucketCreate) SetAccessKey(s string) *BucketCreate {
	bc.mutation.SetAccessKey(s)
	return bc
}

// SetSecretKey sets the "secretKey" field.
func (bc *BucketCreate) SetSecretKey(s string) *BucketCreate {
	bc.mutation.SetSecretKey(s)
	return bc
}

// SetDescription sets the "description" field.
func (bc *BucketCreate) SetDescription(s string) *BucketCreate {
	bc.mutation.SetDescription(s)
	return bc
}

// SetExtraData sets the "extraData" field.
func (bc *BucketCreate) SetExtraData(jm json.RawMessage) *BucketCreate {
	bc.mutation.SetExtraData(jm)
	return bc
}

// SetCategory sets the "category" field.
func (bc *BucketCreate) SetCategory(s string) *BucketCreate {
	bc.mutation.SetCategory(s)
	return bc
}

// SetOwnerId sets the "ownerId" field.
func (bc *BucketCreate) SetOwnerId(s string) *BucketCreate {
	bc.mutation.SetOwnerId(s)
	return bc
}

// SetNillableOwnerId sets the "ownerId" field if the given value is not nil.
func (bc *BucketCreate) SetNillableOwnerId(s *string) *BucketCreate {
	if s != nil {
		bc.SetOwnerId(*s)
	}
	return bc
}

// SetCreatedAt sets the "createdAt" field.
func (bc *BucketCreate) SetCreatedAt(t time.Time) *BucketCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetUpdatedAt sets the "updatedAt" field.
func (bc *BucketCreate) SetUpdatedAt(t time.Time) *BucketCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetID sets the "id" field.
func (bc *BucketCreate) SetID(s string) *BucketCreate {
	bc.mutation.SetID(s)
	return bc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bc *BucketCreate) SetUserID(id string) *BucketCreate {
	bc.mutation.SetUserID(id)
	return bc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (bc *BucketCreate) SetNillableUserID(id *string) *BucketCreate {
	if id != nil {
		bc = bc.SetUserID(*id)
	}
	return bc
}

// SetUser sets the "user" edge to the User entity.
func (bc *BucketCreate) SetUser(u *User) *BucketCreate {
	return bc.SetUserID(u.ID)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (bc *BucketCreate) AddFileIDs(ids ...string) *BucketCreate {
	bc.mutation.AddFileIDs(ids...)
	return bc
}

// AddFiles adds the "files" edges to the File entity.
func (bc *BucketCreate) AddFiles(f ...*File) *BucketCreate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return bc.AddFileIDs(ids...)
}

// Mutation returns the BucketMutation object of the builder.
func (bc *BucketCreate) Mutation() *BucketMutation {
	return bc.mutation
}

// Save creates the Bucket in the database.
func (bc *BucketCreate) Save(ctx context.Context) (*Bucket, error) {
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BucketCreate) SaveX(ctx context.Context) *Bucket {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BucketCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BucketCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BucketCreate) check() error {
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Bucket.name"`)}
	}
	if _, ok := bc.mutation.BucketName(); !ok {
		return &ValidationError{Name: "bucketName", err: errors.New(`ent: missing required field "Bucket.bucketName"`)}
	}
	if _, ok := bc.mutation.Provider(); !ok {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required field "Bucket.provider"`)}
	}
	if v, ok := bc.mutation.Provider(); ok {
		if err := bucket.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "Bucket.provider": %w`, err)}
		}
	}
	if _, ok := bc.mutation.Region(); !ok {
		return &ValidationError{Name: "region", err: errors.New(`ent: missing required field "Bucket.region"`)}
	}
	if _, ok := bc.mutation.Endpoint(); !ok {
		return &ValidationError{Name: "endpoint", err: errors.New(`ent: missing required field "Bucket.endpoint"`)}
	}
	if _, ok := bc.mutation.PublicUrl(); !ok {
		return &ValidationError{Name: "publicUrl", err: errors.New(`ent: missing required field "Bucket.publicUrl"`)}
	}
	if _, ok := bc.mutation.AccessKey(); !ok {
		return &ValidationError{Name: "accessKey", err: errors.New(`ent: missing required field "Bucket.accessKey"`)}
	}
	if _, ok := bc.mutation.SecretKey(); !ok {
		return &ValidationError{Name: "secretKey", err: errors.New(`ent: missing required field "Bucket.secretKey"`)}
	}
	if _, ok := bc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Bucket.description"`)}
	}
	if _, ok := bc.mutation.ExtraData(); !ok {
		return &ValidationError{Name: "extraData", err: errors.New(`ent: missing required field "Bucket.extraData"`)}
	}
	if _, ok := bc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "Bucket.category"`)}
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Bucket.createdAt"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Bucket.updatedAt"`)}
	}
	return nil
}

func (bc *BucketCreate) sqlSave(ctx context.Context) (*Bucket, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Bucket.ID type: %T", _spec.ID.Value)
		}
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BucketCreate) createSpec() (*Bucket, *sqlgraph.CreateSpec) {
	var (
		_node = &Bucket{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bucket.Table, sqlgraph.NewFieldSpec(bucket.FieldID, field.TypeString))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.SetField(bucket.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bc.mutation.BucketName(); ok {
		_spec.SetField(bucket.FieldBucketName, field.TypeString, value)
		_node.BucketName = value
	}
	if value, ok := bc.mutation.Provider(); ok {
		_spec.SetField(bucket.FieldProvider, field.TypeEnum, value)
		_node.Provider = value
	}
	if value, ok := bc.mutation.Region(); ok {
		_spec.SetField(bucket.FieldRegion, field.TypeString, value)
		_node.Region = value
	}
	if value, ok := bc.mutation.Endpoint(); ok {
		_spec.SetField(bucket.FieldEndpoint, field.TypeString, value)
		_node.Endpoint = value
	}
	if value, ok := bc.mutation.PublicUrl(); ok {
		_spec.SetField(bucket.FieldPublicUrl, field.TypeString, value)
		_node.PublicUrl = value
	}
	if value, ok := bc.mutation.AccessKey(); ok {
		_spec.SetField(bucket.FieldAccessKey, field.TypeString, value)
		_node.AccessKey = value
	}
	if value, ok := bc.mutation.SecretKey(); ok {
		_spec.SetField(bucket.FieldSecretKey, field.TypeString, value)
		_node.SecretKey = value
	}
	if value, ok := bc.mutation.Description(); ok {
		_spec.SetField(bucket.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := bc.mutation.ExtraData(); ok {
		_spec.SetField(bucket.FieldExtraData, field.TypeJSON, value)
		_node.ExtraData = value
	}
	if value, ok := bc.mutation.Category(); ok {
		_spec.SetField(bucket.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(bucket.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(bucket.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := bc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bucket.UserTable,
			Columns: []string{bucket.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bucket.FilesTable,
			Columns: []string{bucket.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BucketCreateBulk is the builder for creating many Bucket entities in bulk.
type BucketCreateBulk struct {
	config
	err      error
	builders []*BucketCreate
}

// Save creates the Bucket entities in the database.
func (bcb *BucketCreateBulk) Save(ctx context.Context) ([]*Bucket, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bucket, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BucketMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BucketCreateBulk) SaveX(ctx context.Context) []*Bucket {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BucketCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BucketCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

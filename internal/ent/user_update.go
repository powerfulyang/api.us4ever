// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"api.us4ever/internal/ent/bucket"
	"api.us4ever/internal/ent/file"
	"api.us4ever/internal/ent/group"
	"api.us4ever/internal/ent/image"
	"api.us4ever/internal/ent/keep"
	"api.us4ever/internal/ent/mindmap"
	"api.us4ever/internal/ent/moment"
	"api.us4ever/internal/ent/predicate"
	"api.us4ever/internal/ent/todo"
	"api.us4ever/internal/ent/user"
	"api.us4ever/internal/ent/video"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetNickname sets the "nickname" field.
func (uu *UserUpdate) SetNickname(s string) *UserUpdate {
	uu.mutation.SetNickname(s)
	return uu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNickname(s *string) *UserUpdate {
	if s != nil {
		uu.SetNickname(*s)
	}
	return uu
}

// SetAvatar sets the "avatar" field.
func (uu *UserUpdate) SetAvatar(s string) *UserUpdate {
	uu.mutation.SetAvatar(s)
	return uu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatar(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatar(*s)
	}
	return uu
}

// SetBio sets the "bio" field.
func (uu *UserUpdate) SetBio(s string) *UserUpdate {
	uu.mutation.SetBio(s)
	return uu
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBio(s *string) *UserUpdate {
	if s != nil {
		uu.SetBio(*s)
	}
	return uu
}

// SetIsAdmin sets the "isAdmin" field.
func (uu *UserUpdate) SetIsAdmin(b bool) *UserUpdate {
	uu.mutation.SetIsAdmin(b)
	return uu
}

// SetNillableIsAdmin sets the "isAdmin" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsAdmin(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsAdmin(*b)
	}
	return uu
}

// SetLastLoginAt sets the "lastLoginAt" field.
func (uu *UserUpdate) SetLastLoginAt(t time.Time) *UserUpdate {
	uu.mutation.SetLastLoginAt(t)
	return uu
}

// SetNillableLastLoginAt sets the "lastLoginAt" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLoginAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastLoginAt(*t)
	}
	return uu
}

// SetLastLoginIp sets the "lastLoginIp" field.
func (uu *UserUpdate) SetLastLoginIp(s string) *UserUpdate {
	uu.mutation.SetLastLoginIp(s)
	return uu
}

// SetNillableLastLoginIp sets the "lastLoginIp" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastLoginIp(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastLoginIp(*s)
	}
	return uu
}

// SetGroupId sets the "groupId" field.
func (uu *UserUpdate) SetGroupId(s string) *UserUpdate {
	uu.mutation.SetGroupId(s)
	return uu
}

// SetNillableGroupId sets the "groupId" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGroupId(s *string) *UserUpdate {
	if s != nil {
		uu.SetGroupId(*s)
	}
	return uu
}

// ClearGroupId clears the value of the "groupId" field.
func (uu *UserUpdate) ClearGroupId() *UserUpdate {
	uu.mutation.ClearGroupId()
	return uu
}

// SetCreatedAt sets the "createdAt" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// SetUpdatedAt sets the "updatedAt" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetUpdatedAt(*t)
	}
	return uu
}

// AddBucketIDs adds the "buckets" edge to the Bucket entity by IDs.
func (uu *UserUpdate) AddBucketIDs(ids ...string) *UserUpdate {
	uu.mutation.AddBucketIDs(ids...)
	return uu
}

// AddBuckets adds the "buckets" edges to the Bucket entity.
func (uu *UserUpdate) AddBuckets(b ...*Bucket) *UserUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.AddBucketIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (uu *UserUpdate) AddFileIDs(ids ...string) *UserUpdate {
	uu.mutation.AddFileIDs(ids...)
	return uu
}

// AddFiles adds the "files" edges to the File entity.
func (uu *UserUpdate) AddFiles(f ...*File) *UserUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.AddFileIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (uu *UserUpdate) AddImageIDs(ids ...string) *UserUpdate {
	uu.mutation.AddImageIDs(ids...)
	return uu
}

// AddImages adds the "images" edges to the Image entity.
func (uu *UserUpdate) AddImages(i ...*Image) *UserUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddImageIDs(ids...)
}

// AddKeepIDs adds the "keeps" edge to the Keep entity by IDs.
func (uu *UserUpdate) AddKeepIDs(ids ...string) *UserUpdate {
	uu.mutation.AddKeepIDs(ids...)
	return uu
}

// AddKeeps adds the "keeps" edges to the Keep entity.
func (uu *UserUpdate) AddKeeps(k ...*Keep) *UserUpdate {
	ids := make([]string, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return uu.AddKeepIDs(ids...)
}

// AddMindmapIDs adds the "mindmaps" edge to the Mindmap entity by IDs.
func (uu *UserUpdate) AddMindmapIDs(ids ...string) *UserUpdate {
	uu.mutation.AddMindmapIDs(ids...)
	return uu
}

// AddMindmaps adds the "mindmaps" edges to the Mindmap entity.
func (uu *UserUpdate) AddMindmaps(m ...*Mindmap) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddMindmapIDs(ids...)
}

// AddMomentIDs adds the "moments" edge to the Moment entity by IDs.
func (uu *UserUpdate) AddMomentIDs(ids ...string) *UserUpdate {
	uu.mutation.AddMomentIDs(ids...)
	return uu
}

// AddMoments adds the "moments" edges to the Moment entity.
func (uu *UserUpdate) AddMoments(m ...*Moment) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddMomentIDs(ids...)
}

// AddTodoIDs adds the "todos" edge to the Todo entity by IDs.
func (uu *UserUpdate) AddTodoIDs(ids ...string) *UserUpdate {
	uu.mutation.AddTodoIDs(ids...)
	return uu
}

// AddTodos adds the "todos" edges to the Todo entity.
func (uu *UserUpdate) AddTodos(t ...*Todo) *UserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTodoIDs(ids...)
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (uu *UserUpdate) SetGroupID(id string) *UserUpdate {
	uu.mutation.SetGroupID(id)
	return uu
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableGroupID(id *string) *UserUpdate {
	if id != nil {
		uu = uu.SetGroupID(*id)
	}
	return uu
}

// SetGroup sets the "group" edge to the Group entity.
func (uu *UserUpdate) SetGroup(g *Group) *UserUpdate {
	return uu.SetGroupID(g.ID)
}

// AddVideoIDs adds the "videos" edge to the Video entity by IDs.
func (uu *UserUpdate) AddVideoIDs(ids ...string) *UserUpdate {
	uu.mutation.AddVideoIDs(ids...)
	return uu
}

// AddVideos adds the "videos" edges to the Video entity.
func (uu *UserUpdate) AddVideos(v ...*Video) *UserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.AddVideoIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearBuckets clears all "buckets" edges to the Bucket entity.
func (uu *UserUpdate) ClearBuckets() *UserUpdate {
	uu.mutation.ClearBuckets()
	return uu
}

// RemoveBucketIDs removes the "buckets" edge to Bucket entities by IDs.
func (uu *UserUpdate) RemoveBucketIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveBucketIDs(ids...)
	return uu
}

// RemoveBuckets removes "buckets" edges to Bucket entities.
func (uu *UserUpdate) RemoveBuckets(b ...*Bucket) *UserUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.RemoveBucketIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (uu *UserUpdate) ClearFiles() *UserUpdate {
	uu.mutation.ClearFiles()
	return uu
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (uu *UserUpdate) RemoveFileIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveFileIDs(ids...)
	return uu
}

// RemoveFiles removes "files" edges to File entities.
func (uu *UserUpdate) RemoveFiles(f ...*File) *UserUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.RemoveFileIDs(ids...)
}

// ClearImages clears all "images" edges to the Image entity.
func (uu *UserUpdate) ClearImages() *UserUpdate {
	uu.mutation.ClearImages()
	return uu
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (uu *UserUpdate) RemoveImageIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveImageIDs(ids...)
	return uu
}

// RemoveImages removes "images" edges to Image entities.
func (uu *UserUpdate) RemoveImages(i ...*Image) *UserUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveImageIDs(ids...)
}

// ClearKeeps clears all "keeps" edges to the Keep entity.
func (uu *UserUpdate) ClearKeeps() *UserUpdate {
	uu.mutation.ClearKeeps()
	return uu
}

// RemoveKeepIDs removes the "keeps" edge to Keep entities by IDs.
func (uu *UserUpdate) RemoveKeepIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveKeepIDs(ids...)
	return uu
}

// RemoveKeeps removes "keeps" edges to Keep entities.
func (uu *UserUpdate) RemoveKeeps(k ...*Keep) *UserUpdate {
	ids := make([]string, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return uu.RemoveKeepIDs(ids...)
}

// ClearMindmaps clears all "mindmaps" edges to the Mindmap entity.
func (uu *UserUpdate) ClearMindmaps() *UserUpdate {
	uu.mutation.ClearMindmaps()
	return uu
}

// RemoveMindmapIDs removes the "mindmaps" edge to Mindmap entities by IDs.
func (uu *UserUpdate) RemoveMindmapIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveMindmapIDs(ids...)
	return uu
}

// RemoveMindmaps removes "mindmaps" edges to Mindmap entities.
func (uu *UserUpdate) RemoveMindmaps(m ...*Mindmap) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveMindmapIDs(ids...)
}

// ClearMoments clears all "moments" edges to the Moment entity.
func (uu *UserUpdate) ClearMoments() *UserUpdate {
	uu.mutation.ClearMoments()
	return uu
}

// RemoveMomentIDs removes the "moments" edge to Moment entities by IDs.
func (uu *UserUpdate) RemoveMomentIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveMomentIDs(ids...)
	return uu
}

// RemoveMoments removes "moments" edges to Moment entities.
func (uu *UserUpdate) RemoveMoments(m ...*Moment) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveMomentIDs(ids...)
}

// ClearTodos clears all "todos" edges to the Todo entity.
func (uu *UserUpdate) ClearTodos() *UserUpdate {
	uu.mutation.ClearTodos()
	return uu
}

// RemoveTodoIDs removes the "todos" edge to Todo entities by IDs.
func (uu *UserUpdate) RemoveTodoIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveTodoIDs(ids...)
	return uu
}

// RemoveTodos removes "todos" edges to Todo entities.
func (uu *UserUpdate) RemoveTodos(t ...*Todo) *UserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTodoIDs(ids...)
}

// ClearGroup clears the "group" edge to the Group entity.
func (uu *UserUpdate) ClearGroup() *UserUpdate {
	uu.mutation.ClearGroup()
	return uu
}

// ClearVideos clears all "videos" edges to the Video entity.
func (uu *UserUpdate) ClearVideos() *UserUpdate {
	uu.mutation.ClearVideos()
	return uu
}

// RemoveVideoIDs removes the "videos" edge to Video entities by IDs.
func (uu *UserUpdate) RemoveVideoIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveVideoIDs(ids...)
	return uu
}

// RemoveVideos removes "videos" edges to Video entities.
func (uu *UserUpdate) RemoveVideos(v ...*Video) *UserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.RemoveVideoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if value, ok := uu.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if value, ok := uu.mutation.Bio(); ok {
		_spec.SetField(user.FieldBio, field.TypeString, value)
	}
	if value, ok := uu.mutation.IsAdmin(); ok {
		_spec.SetField(user.FieldIsAdmin, field.TypeBool, value)
	}
	if value, ok := uu.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.LastLoginIp(); ok {
		_spec.SetField(user.FieldLastLoginIp, field.TypeString, value)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.BucketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BucketsTable,
			Columns: []string{user.BucketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bucket.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedBucketsIDs(); len(nodes) > 0 && !uu.mutation.BucketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BucketsTable,
			Columns: []string{user.BucketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bucket.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BucketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BucketsTable,
			Columns: []string{user.BucketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bucket.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: []string{user.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !uu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: []string{user.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: []string{user.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ImagesTable,
			Columns: []string{user.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedImagesIDs(); len(nodes) > 0 && !uu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ImagesTable,
			Columns: []string{user.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ImagesTable,
			Columns: []string{user.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.KeepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.KeepsTable,
			Columns: []string{user.KeepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keep.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedKeepsIDs(); len(nodes) > 0 && !uu.mutation.KeepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.KeepsTable,
			Columns: []string{user.KeepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keep.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.KeepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.KeepsTable,
			Columns: []string{user.KeepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keep.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.MindmapsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MindmapsTable,
			Columns: []string{user.MindmapsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mindmap.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedMindmapsIDs(); len(nodes) > 0 && !uu.mutation.MindmapsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MindmapsTable,
			Columns: []string{user.MindmapsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mindmap.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.MindmapsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MindmapsTable,
			Columns: []string{user.MindmapsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mindmap.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.MomentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MomentsTable,
			Columns: []string{user.MomentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedMomentsIDs(); len(nodes) > 0 && !uu.mutation.MomentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MomentsTable,
			Columns: []string{user.MomentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.MomentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MomentsTable,
			Columns: []string{user.MomentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TodosTable,
			Columns: []string{user.TodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTodosIDs(); len(nodes) > 0 && !uu.mutation.TodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TodosTable,
			Columns: []string{user.TodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TodosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TodosTable,
			Columns: []string{user.TodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.GroupTable,
			Columns: []string{user.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.GroupTable,
			Columns: []string{user.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VideosTable,
			Columns: []string{user.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedVideosIDs(); len(nodes) > 0 && !uu.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VideosTable,
			Columns: []string{user.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.VideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VideosTable,
			Columns: []string{user.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetNickname sets the "nickname" field.
func (uuo *UserUpdateOne) SetNickname(s string) *UserUpdateOne {
	uuo.mutation.SetNickname(s)
	return uuo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNickname(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNickname(*s)
	}
	return uuo
}

// SetAvatar sets the "avatar" field.
func (uuo *UserUpdateOne) SetAvatar(s string) *UserUpdateOne {
	uuo.mutation.SetAvatar(s)
	return uuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatar(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatar(*s)
	}
	return uuo
}

// SetBio sets the "bio" field.
func (uuo *UserUpdateOne) SetBio(s string) *UserUpdateOne {
	uuo.mutation.SetBio(s)
	return uuo
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBio(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBio(*s)
	}
	return uuo
}

// SetIsAdmin sets the "isAdmin" field.
func (uuo *UserUpdateOne) SetIsAdmin(b bool) *UserUpdateOne {
	uuo.mutation.SetIsAdmin(b)
	return uuo
}

// SetNillableIsAdmin sets the "isAdmin" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsAdmin(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsAdmin(*b)
	}
	return uuo
}

// SetLastLoginAt sets the "lastLoginAt" field.
func (uuo *UserUpdateOne) SetLastLoginAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastLoginAt(t)
	return uuo
}

// SetNillableLastLoginAt sets the "lastLoginAt" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLoginAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastLoginAt(*t)
	}
	return uuo
}

// SetLastLoginIp sets the "lastLoginIp" field.
func (uuo *UserUpdateOne) SetLastLoginIp(s string) *UserUpdateOne {
	uuo.mutation.SetLastLoginIp(s)
	return uuo
}

// SetNillableLastLoginIp sets the "lastLoginIp" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastLoginIp(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastLoginIp(*s)
	}
	return uuo
}

// SetGroupId sets the "groupId" field.
func (uuo *UserUpdateOne) SetGroupId(s string) *UserUpdateOne {
	uuo.mutation.SetGroupId(s)
	return uuo
}

// SetNillableGroupId sets the "groupId" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGroupId(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetGroupId(*s)
	}
	return uuo
}

// ClearGroupId clears the value of the "groupId" field.
func (uuo *UserUpdateOne) ClearGroupId() *UserUpdateOne {
	uuo.mutation.ClearGroupId()
	return uuo
}

// SetCreatedAt sets the "createdAt" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetUpdatedAt(*t)
	}
	return uuo
}

// AddBucketIDs adds the "buckets" edge to the Bucket entity by IDs.
func (uuo *UserUpdateOne) AddBucketIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddBucketIDs(ids...)
	return uuo
}

// AddBuckets adds the "buckets" edges to the Bucket entity.
func (uuo *UserUpdateOne) AddBuckets(b ...*Bucket) *UserUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.AddBucketIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (uuo *UserUpdateOne) AddFileIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddFileIDs(ids...)
	return uuo
}

// AddFiles adds the "files" edges to the File entity.
func (uuo *UserUpdateOne) AddFiles(f ...*File) *UserUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.AddFileIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (uuo *UserUpdateOne) AddImageIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddImageIDs(ids...)
	return uuo
}

// AddImages adds the "images" edges to the Image entity.
func (uuo *UserUpdateOne) AddImages(i ...*Image) *UserUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddImageIDs(ids...)
}

// AddKeepIDs adds the "keeps" edge to the Keep entity by IDs.
func (uuo *UserUpdateOne) AddKeepIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddKeepIDs(ids...)
	return uuo
}

// AddKeeps adds the "keeps" edges to the Keep entity.
func (uuo *UserUpdateOne) AddKeeps(k ...*Keep) *UserUpdateOne {
	ids := make([]string, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return uuo.AddKeepIDs(ids...)
}

// AddMindmapIDs adds the "mindmaps" edge to the Mindmap entity by IDs.
func (uuo *UserUpdateOne) AddMindmapIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddMindmapIDs(ids...)
	return uuo
}

// AddMindmaps adds the "mindmaps" edges to the Mindmap entity.
func (uuo *UserUpdateOne) AddMindmaps(m ...*Mindmap) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddMindmapIDs(ids...)
}

// AddMomentIDs adds the "moments" edge to the Moment entity by IDs.
func (uuo *UserUpdateOne) AddMomentIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddMomentIDs(ids...)
	return uuo
}

// AddMoments adds the "moments" edges to the Moment entity.
func (uuo *UserUpdateOne) AddMoments(m ...*Moment) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddMomentIDs(ids...)
}

// AddTodoIDs adds the "todos" edge to the Todo entity by IDs.
func (uuo *UserUpdateOne) AddTodoIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddTodoIDs(ids...)
	return uuo
}

// AddTodos adds the "todos" edges to the Todo entity.
func (uuo *UserUpdateOne) AddTodos(t ...*Todo) *UserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTodoIDs(ids...)
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (uuo *UserUpdateOne) SetGroupID(id string) *UserUpdateOne {
	uuo.mutation.SetGroupID(id)
	return uuo
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGroupID(id *string) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetGroupID(*id)
	}
	return uuo
}

// SetGroup sets the "group" edge to the Group entity.
func (uuo *UserUpdateOne) SetGroup(g *Group) *UserUpdateOne {
	return uuo.SetGroupID(g.ID)
}

// AddVideoIDs adds the "videos" edge to the Video entity by IDs.
func (uuo *UserUpdateOne) AddVideoIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddVideoIDs(ids...)
	return uuo
}

// AddVideos adds the "videos" edges to the Video entity.
func (uuo *UserUpdateOne) AddVideos(v ...*Video) *UserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.AddVideoIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearBuckets clears all "buckets" edges to the Bucket entity.
func (uuo *UserUpdateOne) ClearBuckets() *UserUpdateOne {
	uuo.mutation.ClearBuckets()
	return uuo
}

// RemoveBucketIDs removes the "buckets" edge to Bucket entities by IDs.
func (uuo *UserUpdateOne) RemoveBucketIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveBucketIDs(ids...)
	return uuo
}

// RemoveBuckets removes "buckets" edges to Bucket entities.
func (uuo *UserUpdateOne) RemoveBuckets(b ...*Bucket) *UserUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.RemoveBucketIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (uuo *UserUpdateOne) ClearFiles() *UserUpdateOne {
	uuo.mutation.ClearFiles()
	return uuo
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (uuo *UserUpdateOne) RemoveFileIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveFileIDs(ids...)
	return uuo
}

// RemoveFiles removes "files" edges to File entities.
func (uuo *UserUpdateOne) RemoveFiles(f ...*File) *UserUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.RemoveFileIDs(ids...)
}

// ClearImages clears all "images" edges to the Image entity.
func (uuo *UserUpdateOne) ClearImages() *UserUpdateOne {
	uuo.mutation.ClearImages()
	return uuo
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (uuo *UserUpdateOne) RemoveImageIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveImageIDs(ids...)
	return uuo
}

// RemoveImages removes "images" edges to Image entities.
func (uuo *UserUpdateOne) RemoveImages(i ...*Image) *UserUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveImageIDs(ids...)
}

// ClearKeeps clears all "keeps" edges to the Keep entity.
func (uuo *UserUpdateOne) ClearKeeps() *UserUpdateOne {
	uuo.mutation.ClearKeeps()
	return uuo
}

// RemoveKeepIDs removes the "keeps" edge to Keep entities by IDs.
func (uuo *UserUpdateOne) RemoveKeepIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveKeepIDs(ids...)
	return uuo
}

// RemoveKeeps removes "keeps" edges to Keep entities.
func (uuo *UserUpdateOne) RemoveKeeps(k ...*Keep) *UserUpdateOne {
	ids := make([]string, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return uuo.RemoveKeepIDs(ids...)
}

// ClearMindmaps clears all "mindmaps" edges to the Mindmap entity.
func (uuo *UserUpdateOne) ClearMindmaps() *UserUpdateOne {
	uuo.mutation.ClearMindmaps()
	return uuo
}

// RemoveMindmapIDs removes the "mindmaps" edge to Mindmap entities by IDs.
func (uuo *UserUpdateOne) RemoveMindmapIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveMindmapIDs(ids...)
	return uuo
}

// RemoveMindmaps removes "mindmaps" edges to Mindmap entities.
func (uuo *UserUpdateOne) RemoveMindmaps(m ...*Mindmap) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveMindmapIDs(ids...)
}

// ClearMoments clears all "moments" edges to the Moment entity.
func (uuo *UserUpdateOne) ClearMoments() *UserUpdateOne {
	uuo.mutation.ClearMoments()
	return uuo
}

// RemoveMomentIDs removes the "moments" edge to Moment entities by IDs.
func (uuo *UserUpdateOne) RemoveMomentIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveMomentIDs(ids...)
	return uuo
}

// RemoveMoments removes "moments" edges to Moment entities.
func (uuo *UserUpdateOne) RemoveMoments(m ...*Moment) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveMomentIDs(ids...)
}

// ClearTodos clears all "todos" edges to the Todo entity.
func (uuo *UserUpdateOne) ClearTodos() *UserUpdateOne {
	uuo.mutation.ClearTodos()
	return uuo
}

// RemoveTodoIDs removes the "todos" edge to Todo entities by IDs.
func (uuo *UserUpdateOne) RemoveTodoIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveTodoIDs(ids...)
	return uuo
}

// RemoveTodos removes "todos" edges to Todo entities.
func (uuo *UserUpdateOne) RemoveTodos(t ...*Todo) *UserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTodoIDs(ids...)
}

// ClearGroup clears the "group" edge to the Group entity.
func (uuo *UserUpdateOne) ClearGroup() *UserUpdateOne {
	uuo.mutation.ClearGroup()
	return uuo
}

// ClearVideos clears all "videos" edges to the Video entity.
func (uuo *UserUpdateOne) ClearVideos() *UserUpdateOne {
	uuo.mutation.ClearVideos()
	return uuo
}

// RemoveVideoIDs removes the "videos" edge to Video entities by IDs.
func (uuo *UserUpdateOne) RemoveVideoIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveVideoIDs(ids...)
	return uuo
}

// RemoveVideos removes "videos" edges to Video entities.
func (uuo *UserUpdateOne) RemoveVideos(v ...*Video) *UserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.RemoveVideoIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Bio(); ok {
		_spec.SetField(user.FieldBio, field.TypeString, value)
	}
	if value, ok := uuo.mutation.IsAdmin(); ok {
		_spec.SetField(user.FieldIsAdmin, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.LastLoginIp(); ok {
		_spec.SetField(user.FieldLastLoginIp, field.TypeString, value)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.BucketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BucketsTable,
			Columns: []string{user.BucketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bucket.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedBucketsIDs(); len(nodes) > 0 && !uuo.mutation.BucketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BucketsTable,
			Columns: []string{user.BucketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bucket.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BucketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BucketsTable,
			Columns: []string{user.BucketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bucket.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: []string{user.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !uuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: []string{user.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: []string{user.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ImagesTable,
			Columns: []string{user.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !uuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ImagesTable,
			Columns: []string{user.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ImagesTable,
			Columns: []string{user.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.KeepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.KeepsTable,
			Columns: []string{user.KeepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keep.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedKeepsIDs(); len(nodes) > 0 && !uuo.mutation.KeepsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.KeepsTable,
			Columns: []string{user.KeepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keep.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.KeepsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.KeepsTable,
			Columns: []string{user.KeepsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keep.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.MindmapsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MindmapsTable,
			Columns: []string{user.MindmapsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mindmap.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedMindmapsIDs(); len(nodes) > 0 && !uuo.mutation.MindmapsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MindmapsTable,
			Columns: []string{user.MindmapsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mindmap.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.MindmapsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MindmapsTable,
			Columns: []string{user.MindmapsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mindmap.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.MomentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MomentsTable,
			Columns: []string{user.MomentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedMomentsIDs(); len(nodes) > 0 && !uuo.mutation.MomentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MomentsTable,
			Columns: []string{user.MomentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.MomentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MomentsTable,
			Columns: []string{user.MomentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TodosTable,
			Columns: []string{user.TodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTodosIDs(); len(nodes) > 0 && !uuo.mutation.TodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TodosTable,
			Columns: []string{user.TodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TodosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TodosTable,
			Columns: []string{user.TodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.GroupTable,
			Columns: []string{user.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.GroupTable,
			Columns: []string{user.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VideosTable,
			Columns: []string{user.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedVideosIDs(); len(nodes) > 0 && !uuo.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VideosTable,
			Columns: []string{user.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.VideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.VideosTable,
			Columns: []string{user.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}

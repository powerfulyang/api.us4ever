// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"api.us4ever/internal/ent/bucket"
	"api.us4ever/internal/ent/file"
	"api.us4ever/internal/ent/image"
	"api.us4ever/internal/ent/user"
	"api.us4ever/internal/ent/video"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FileCreate is the builder for creating a File entity.
type FileCreate struct {
	config
	mutation *FileMutation
	hooks    []Hook
}

// SetBucketId sets the "bucketId" field.
func (fc *FileCreate) SetBucketId(s string) *FileCreate {
	fc.mutation.SetBucketId(s)
	return fc
}

// SetNillableBucketId sets the "bucketId" field if the given value is not nil.
func (fc *FileCreate) SetNillableBucketId(s *string) *FileCreate {
	if s != nil {
		fc.SetBucketId(*s)
	}
	return fc
}

// SetName sets the "name" field.
func (fc *FileCreate) SetName(s string) *FileCreate {
	fc.mutation.SetName(s)
	return fc
}

// SetType sets the "type" field.
func (fc *FileCreate) SetType(s string) *FileCreate {
	fc.mutation.SetType(s)
	return fc
}

// SetHash sets the "hash" field.
func (fc *FileCreate) SetHash(s string) *FileCreate {
	fc.mutation.SetHash(s)
	return fc
}

// SetSize sets the "size" field.
func (fc *FileCreate) SetSize(i int) *FileCreate {
	fc.mutation.SetSize(i)
	return fc
}

// SetPath sets the "path" field.
func (fc *FileCreate) SetPath(s string) *FileCreate {
	fc.mutation.SetPath(s)
	return fc
}

// SetIsPublic sets the "isPublic" field.
func (fc *FileCreate) SetIsPublic(b bool) *FileCreate {
	fc.mutation.SetIsPublic(b)
	return fc
}

// SetDescription sets the "description" field.
func (fc *FileCreate) SetDescription(s string) *FileCreate {
	fc.mutation.SetDescription(s)
	return fc
}

// SetTags sets the "tags" field.
func (fc *FileCreate) SetTags(jm json.RawMessage) *FileCreate {
	fc.mutation.SetTags(jm)
	return fc
}

// SetExtraData sets the "extraData" field.
func (fc *FileCreate) SetExtraData(jm json.RawMessage) *FileCreate {
	fc.mutation.SetExtraData(jm)
	return fc
}

// SetCategory sets the "category" field.
func (fc *FileCreate) SetCategory(s string) *FileCreate {
	fc.mutation.SetCategory(s)
	return fc
}

// SetUploadedBy sets the "uploadedBy" field.
func (fc *FileCreate) SetUploadedBy(s string) *FileCreate {
	fc.mutation.SetUploadedBy(s)
	return fc
}

// SetNillableUploadedBy sets the "uploadedBy" field if the given value is not nil.
func (fc *FileCreate) SetNillableUploadedBy(s *string) *FileCreate {
	if s != nil {
		fc.SetUploadedBy(*s)
	}
	return fc
}

// SetCreatedAt sets the "createdAt" field.
func (fc *FileCreate) SetCreatedAt(t time.Time) *FileCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetUpdatedAt sets the "updatedAt" field.
func (fc *FileCreate) SetUpdatedAt(t time.Time) *FileCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetID sets the "id" field.
func (fc *FileCreate) SetID(s string) *FileCreate {
	fc.mutation.SetID(s)
	return fc
}

// SetBucketID sets the "bucket" edge to the Bucket entity by ID.
func (fc *FileCreate) SetBucketID(id string) *FileCreate {
	fc.mutation.SetBucketID(id)
	return fc
}

// SetNillableBucketID sets the "bucket" edge to the Bucket entity by ID if the given value is not nil.
func (fc *FileCreate) SetNillableBucketID(id *string) *FileCreate {
	if id != nil {
		fc = fc.SetBucketID(*id)
	}
	return fc
}

// SetBucket sets the "bucket" edge to the Bucket entity.
func (fc *FileCreate) SetBucket(b *Bucket) *FileCreate {
	return fc.SetBucketID(b.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (fc *FileCreate) SetUserID(id string) *FileCreate {
	fc.mutation.SetUserID(id)
	return fc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (fc *FileCreate) SetNillableUserID(id *string) *FileCreate {
	if id != nil {
		fc = fc.SetUserID(*id)
	}
	return fc
}

// SetUser sets the "user" edge to the User entity.
func (fc *FileCreate) SetUser(u *User) *FileCreate {
	return fc.SetUserID(u.ID)
}

// AddImageCompressedIDs adds the "Image_compressed" edge to the Image entity by IDs.
func (fc *FileCreate) AddImageCompressedIDs(ids ...string) *FileCreate {
	fc.mutation.AddImageCompressedIDs(ids...)
	return fc
}

// AddImageCompressed adds the "Image_compressed" edges to the Image entity.
func (fc *FileCreate) AddImageCompressed(i ...*Image) *FileCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fc.AddImageCompressedIDs(ids...)
}

// AddImageOriginalIDs adds the "Image_original" edge to the Image entity by IDs.
func (fc *FileCreate) AddImageOriginalIDs(ids ...string) *FileCreate {
	fc.mutation.AddImageOriginalIDs(ids...)
	return fc
}

// AddImageOriginal adds the "Image_original" edges to the Image entity.
func (fc *FileCreate) AddImageOriginal(i ...*Image) *FileCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fc.AddImageOriginalIDs(ids...)
}

// AddImageThumbnail320xIDs adds the "Image_thumbnail320x" edge to the Image entity by IDs.
func (fc *FileCreate) AddImageThumbnail320xIDs(ids ...string) *FileCreate {
	fc.mutation.AddImageThumbnail320xIDs(ids...)
	return fc
}

// AddImageThumbnail320x adds the "Image_thumbnail320x" edges to the Image entity.
func (fc *FileCreate) AddImageThumbnail320x(i ...*Image) *FileCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fc.AddImageThumbnail320xIDs(ids...)
}

// AddImageThumbnail768xIDs adds the "Image_thumbnail768x" edge to the Image entity by IDs.
func (fc *FileCreate) AddImageThumbnail768xIDs(ids ...string) *FileCreate {
	fc.mutation.AddImageThumbnail768xIDs(ids...)
	return fc
}

// AddImageThumbnail768x adds the "Image_thumbnail768x" edges to the Image entity.
func (fc *FileCreate) AddImageThumbnail768x(i ...*Image) *FileCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fc.AddImageThumbnail768xIDs(ids...)
}

// AddVideoFileIDs adds the "Video_file" edge to the Video entity by IDs.
func (fc *FileCreate) AddVideoFileIDs(ids ...string) *FileCreate {
	fc.mutation.AddVideoFileIDs(ids...)
	return fc
}

// AddVideoFile adds the "Video_file" edges to the Video entity.
func (fc *FileCreate) AddVideoFile(v ...*Video) *FileCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return fc.AddVideoFileIDs(ids...)
}

// AddVideoPosterIDs adds the "Video_poster" edge to the Video entity by IDs.
func (fc *FileCreate) AddVideoPosterIDs(ids ...string) *FileCreate {
	fc.mutation.AddVideoPosterIDs(ids...)
	return fc
}

// AddVideoPoster adds the "Video_poster" edges to the Video entity.
func (fc *FileCreate) AddVideoPoster(v ...*Video) *FileCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return fc.AddVideoPosterIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (fc *FileCreate) Mutation() *FileMutation {
	return fc.mutation
}

// Save creates the File in the database.
func (fc *FileCreate) Save(ctx context.Context) (*File, error) {
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FileCreate) SaveX(ctx context.Context) *File {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FileCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FileCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FileCreate) check() error {
	if _, ok := fc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "File.name"`)}
	}
	if _, ok := fc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "File.type"`)}
	}
	if _, ok := fc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "File.hash"`)}
	}
	if _, ok := fc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "File.size"`)}
	}
	if _, ok := fc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "File.path"`)}
	}
	if _, ok := fc.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "isPublic", err: errors.New(`ent: missing required field "File.isPublic"`)}
	}
	if _, ok := fc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "File.description"`)}
	}
	if _, ok := fc.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "File.tags"`)}
	}
	if _, ok := fc.mutation.ExtraData(); !ok {
		return &ValidationError{Name: "extraData", err: errors.New(`ent: missing required field "File.extraData"`)}
	}
	if _, ok := fc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "File.category"`)}
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "File.createdAt"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "File.updatedAt"`)}
	}
	return nil
}

func (fc *FileCreate) sqlSave(ctx context.Context) (*File, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected File.ID type: %T", _spec.ID.Value)
		}
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FileCreate) createSpec() (*File, *sqlgraph.CreateSpec) {
	var (
		_node = &File{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(file.Table, sqlgraph.NewFieldSpec(file.FieldID, field.TypeString))
	)
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.Name(); ok {
		_spec.SetField(file.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fc.mutation.GetType(); ok {
		_spec.SetField(file.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := fc.mutation.Hash(); ok {
		_spec.SetField(file.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := fc.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeInt, value)
		_node.Size = value
	}
	if value, ok := fc.mutation.Path(); ok {
		_spec.SetField(file.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := fc.mutation.IsPublic(); ok {
		_spec.SetField(file.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := fc.mutation.Description(); ok {
		_spec.SetField(file.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := fc.mutation.Tags(); ok {
		_spec.SetField(file.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := fc.mutation.ExtraData(); ok {
		_spec.SetField(file.FieldExtraData, field.TypeJSON, value)
		_node.ExtraData = value
	}
	if value, ok := fc.mutation.Category(); ok {
		_spec.SetField(file.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(file.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := fc.mutation.BucketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.BucketTable,
			Columns: []string{file.BucketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bucket.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BucketId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.UserTable,
			Columns: []string{file.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UploadedBy = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.ImageCompressedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageCompressedTable,
			Columns: []string{file.ImageCompressedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.ImageOriginalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageOriginalTable,
			Columns: []string{file.ImageOriginalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.ImageThumbnail320xIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageThumbnail320xTable,
			Columns: []string{file.ImageThumbnail320xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.ImageThumbnail768xIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageThumbnail768xTable,
			Columns: []string{file.ImageThumbnail768xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.VideoFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.VideoFileTable,
			Columns: []string{file.VideoFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.VideoPosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.VideoPosterTable,
			Columns: []string{file.VideoPosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FileCreateBulk is the builder for creating many File entities in bulk.
type FileCreateBulk struct {
	config
	err      error
	builders []*FileCreate
}

// Save creates the File entities in the database.
func (fcb *FileCreateBulk) Save(ctx context.Context) ([]*File, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*File, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FileCreateBulk) SaveX(ctx context.Context) []*File {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FileCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FileCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package momentimage

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the momentimage type in the database.
	Label = "moment_image"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldImageId holds the string denoting the imageid field in the database.
	FieldImageId = "imageId"
	// FieldMomentId holds the string denoting the momentid field in the database.
	FieldMomentId = "momentId"
	// FieldSort holds the string denoting the sort field in the database.
	FieldSort = "sort"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "createdAt"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updatedAt"
	// EdgeImage holds the string denoting the image edge name in mutations.
	EdgeImage = "image"
	// EdgeMoment holds the string denoting the moment edge name in mutations.
	EdgeMoment = "moment"
	// Table holds the table name of the momentimage in the database.
	Table = "moment_images"
	// ImageTable is the table that holds the image relation/edge.
	ImageTable = "moment_images"
	// ImageInverseTable is the table name for the Image entity.
	// It exists in this package in order to avoid circular dependency with the "image" package.
	ImageInverseTable = "images"
	// ImageColumn is the table column denoting the image relation/edge.
	ImageColumn = "imageId"
	// MomentTable is the table that holds the moment relation/edge.
	MomentTable = "moment_images"
	// MomentInverseTable is the table name for the Moment entity.
	// It exists in this package in order to avoid circular dependency with the "moment" package.
	MomentInverseTable = "moments"
	// MomentColumn is the table column denoting the moment relation/edge.
	MomentColumn = "momentId"
)

// Columns holds all SQL columns for momentimage fields.
var Columns = []string{
	FieldID,
	FieldImageId,
	FieldMomentId,
	FieldSort,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the MomentImage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByImageId orders the results by the imageId field.
func ByImageId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageId, opts...).ToFunc()
}

// ByMomentId orders the results by the momentId field.
func ByMomentId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMomentId, opts...).ToFunc()
}

// BySort orders the results by the sort field.
func BySort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSort, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByImageField orders the results by image field.
func ByImageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImageStep(), sql.OrderByField(field, opts...))
	}
}

// ByMomentField orders the results by moment field.
func ByMomentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMomentStep(), sql.OrderByField(field, opts...))
	}
}
func newImageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ImageTable, ImageColumn),
	)
}
func newMomentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MomentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MomentTable, MomentColumn),
	)
}

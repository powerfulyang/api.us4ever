// Code generated by ent, DO NOT EDIT.

package moment

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the moment type in the database.
	Label = "moment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldIsPublic holds the string denoting the ispublic field in the database.
	FieldIsPublic = "isPublic"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldViews holds the string denoting the views field in the database.
	FieldViews = "views"
	// FieldLikes holds the string denoting the likes field in the database.
	FieldLikes = "likes"
	// FieldExtraData holds the string denoting the extradata field in the database.
	FieldExtraData = "extraData"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldOwnerId holds the string denoting the ownerid field in the database.
	FieldOwnerId = "ownerId"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "createdAt"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updatedAt"
	// EdgeMomentImages holds the string denoting the moment_images edge name in mutations.
	EdgeMomentImages = "moment_images"
	// EdgeMomentVideos holds the string denoting the moment_videos edge name in mutations.
	EdgeMomentVideos = "moment_videos"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the moment in the database.
	Table = "moments"
	// MomentImagesTable is the table that holds the moment_images relation/edge.
	MomentImagesTable = "moment_images"
	// MomentImagesInverseTable is the table name for the MomentImage entity.
	// It exists in this package in order to avoid circular dependency with the "momentimage" package.
	MomentImagesInverseTable = "moment_images"
	// MomentImagesColumn is the table column denoting the moment_images relation/edge.
	MomentImagesColumn = "momentId"
	// MomentVideosTable is the table that holds the moment_videos relation/edge.
	MomentVideosTable = "moment_videos"
	// MomentVideosInverseTable is the table name for the MomentVideo entity.
	// It exists in this package in order to avoid circular dependency with the "momentvideo" package.
	MomentVideosInverseTable = "moment_videos"
	// MomentVideosColumn is the table column denoting the moment_videos relation/edge.
	MomentVideosColumn = "momentId"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "moments"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "ownerId"
)

// Columns holds all SQL columns for moment fields.
var Columns = []string{
	FieldID,
	FieldContent,
	FieldIsPublic,
	FieldTags,
	FieldViews,
	FieldLikes,
	FieldExtraData,
	FieldCategory,
	FieldOwnerId,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Moment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByIsPublic orders the results by the isPublic field.
func ByIsPublic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPublic, opts...).ToFunc()
}

// ByViews orders the results by the views field.
func ByViews(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldViews, opts...).ToFunc()
}

// ByLikes orders the results by the likes field.
func ByLikes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikes, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByOwnerId orders the results by the ownerId field.
func ByOwnerId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerId, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByMomentImagesCount orders the results by moment_images count.
func ByMomentImagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMomentImagesStep(), opts...)
	}
}

// ByMomentImages orders the results by moment_images terms.
func ByMomentImages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMomentImagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMomentVideosCount orders the results by moment_videos count.
func ByMomentVideosCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMomentVideosStep(), opts...)
	}
}

// ByMomentVideos orders the results by moment_videos terms.
func ByMomentVideos(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMomentVideosStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newMomentImagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MomentImagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MomentImagesTable, MomentImagesColumn),
	)
}
func newMomentVideosStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MomentVideosInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MomentVideosTable, MomentVideosColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}

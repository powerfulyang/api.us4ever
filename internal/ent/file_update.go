// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"api.us4ever/internal/ent/bucket"
	"api.us4ever/internal/ent/file"
	"api.us4ever/internal/ent/image"
	"api.us4ever/internal/ent/predicate"
	"api.us4ever/internal/ent/user"
	"api.us4ever/internal/ent/video"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	hooks    []Hook
	mutation *FileMutation
}

// Where appends a list predicates to the FileUpdate builder.
func (fu *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetBucketId sets the "bucketId" field.
func (fu *FileUpdate) SetBucketId(s string) *FileUpdate {
	fu.mutation.SetBucketId(s)
	return fu
}

// SetNillableBucketId sets the "bucketId" field if the given value is not nil.
func (fu *FileUpdate) SetNillableBucketId(s *string) *FileUpdate {
	if s != nil {
		fu.SetBucketId(*s)
	}
	return fu
}

// ClearBucketId clears the value of the "bucketId" field.
func (fu *FileUpdate) ClearBucketId() *FileUpdate {
	fu.mutation.ClearBucketId()
	return fu
}

// SetName sets the "name" field.
func (fu *FileUpdate) SetName(s string) *FileUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fu *FileUpdate) SetNillableName(s *string) *FileUpdate {
	if s != nil {
		fu.SetName(*s)
	}
	return fu
}

// SetType sets the "type" field.
func (fu *FileUpdate) SetType(s string) *FileUpdate {
	fu.mutation.SetType(s)
	return fu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fu *FileUpdate) SetNillableType(s *string) *FileUpdate {
	if s != nil {
		fu.SetType(*s)
	}
	return fu
}

// SetHash sets the "hash" field.
func (fu *FileUpdate) SetHash(s string) *FileUpdate {
	fu.mutation.SetHash(s)
	return fu
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (fu *FileUpdate) SetNillableHash(s *string) *FileUpdate {
	if s != nil {
		fu.SetHash(*s)
	}
	return fu
}

// SetSize sets the "size" field.
func (fu *FileUpdate) SetSize(i int) *FileUpdate {
	fu.mutation.ResetSize()
	fu.mutation.SetSize(i)
	return fu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (fu *FileUpdate) SetNillableSize(i *int) *FileUpdate {
	if i != nil {
		fu.SetSize(*i)
	}
	return fu
}

// AddSize adds i to the "size" field.
func (fu *FileUpdate) AddSize(i int) *FileUpdate {
	fu.mutation.AddSize(i)
	return fu
}

// SetPath sets the "path" field.
func (fu *FileUpdate) SetPath(s string) *FileUpdate {
	fu.mutation.SetPath(s)
	return fu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (fu *FileUpdate) SetNillablePath(s *string) *FileUpdate {
	if s != nil {
		fu.SetPath(*s)
	}
	return fu
}

// SetIsPublic sets the "isPublic" field.
func (fu *FileUpdate) SetIsPublic(b bool) *FileUpdate {
	fu.mutation.SetIsPublic(b)
	return fu
}

// SetNillableIsPublic sets the "isPublic" field if the given value is not nil.
func (fu *FileUpdate) SetNillableIsPublic(b *bool) *FileUpdate {
	if b != nil {
		fu.SetIsPublic(*b)
	}
	return fu
}

// SetUploadedBy sets the "uploadedBy" field.
func (fu *FileUpdate) SetUploadedBy(s string) *FileUpdate {
	fu.mutation.SetUploadedBy(s)
	return fu
}

// SetNillableUploadedBy sets the "uploadedBy" field if the given value is not nil.
func (fu *FileUpdate) SetNillableUploadedBy(s *string) *FileUpdate {
	if s != nil {
		fu.SetUploadedBy(*s)
	}
	return fu
}

// ClearUploadedBy clears the value of the "uploadedBy" field.
func (fu *FileUpdate) ClearUploadedBy() *FileUpdate {
	fu.mutation.ClearUploadedBy()
	return fu
}

// SetDescription sets the "description" field.
func (fu *FileUpdate) SetDescription(s string) *FileUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fu *FileUpdate) SetNillableDescription(s *string) *FileUpdate {
	if s != nil {
		fu.SetDescription(*s)
	}
	return fu
}

// SetTags sets the "tags" field.
func (fu *FileUpdate) SetTags(jm json.RawMessage) *FileUpdate {
	fu.mutation.SetTags(jm)
	return fu
}

// AppendTags appends jm to the "tags" field.
func (fu *FileUpdate) AppendTags(jm json.RawMessage) *FileUpdate {
	fu.mutation.AppendTags(jm)
	return fu
}

// SetCreatedAt sets the "createdAt" field.
func (fu *FileUpdate) SetCreatedAt(t time.Time) *FileUpdate {
	fu.mutation.SetCreatedAt(t)
	return fu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (fu *FileUpdate) SetNillableCreatedAt(t *time.Time) *FileUpdate {
	if t != nil {
		fu.SetCreatedAt(*t)
	}
	return fu
}

// SetUpdatedAt sets the "updatedAt" field.
func (fu *FileUpdate) SetUpdatedAt(t time.Time) *FileUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (fu *FileUpdate) SetNillableUpdatedAt(t *time.Time) *FileUpdate {
	if t != nil {
		fu.SetUpdatedAt(*t)
	}
	return fu
}

// SetExtraData sets the "extraData" field.
func (fu *FileUpdate) SetExtraData(jm json.RawMessage) *FileUpdate {
	fu.mutation.SetExtraData(jm)
	return fu
}

// AppendExtraData appends jm to the "extraData" field.
func (fu *FileUpdate) AppendExtraData(jm json.RawMessage) *FileUpdate {
	fu.mutation.AppendExtraData(jm)
	return fu
}

// SetCategory sets the "category" field.
func (fu *FileUpdate) SetCategory(s string) *FileUpdate {
	fu.mutation.SetCategory(s)
	return fu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (fu *FileUpdate) SetNillableCategory(s *string) *FileUpdate {
	if s != nil {
		fu.SetCategory(*s)
	}
	return fu
}

// SetBucketID sets the "bucket" edge to the Bucket entity by ID.
func (fu *FileUpdate) SetBucketID(id string) *FileUpdate {
	fu.mutation.SetBucketID(id)
	return fu
}

// SetNillableBucketID sets the "bucket" edge to the Bucket entity by ID if the given value is not nil.
func (fu *FileUpdate) SetNillableBucketID(id *string) *FileUpdate {
	if id != nil {
		fu = fu.SetBucketID(*id)
	}
	return fu
}

// SetBucket sets the "bucket" edge to the Bucket entity.
func (fu *FileUpdate) SetBucket(b *Bucket) *FileUpdate {
	return fu.SetBucketID(b.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (fu *FileUpdate) SetUserID(id string) *FileUpdate {
	fu.mutation.SetUserID(id)
	return fu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (fu *FileUpdate) SetNillableUserID(id *string) *FileUpdate {
	if id != nil {
		fu = fu.SetUserID(*id)
	}
	return fu
}

// SetUser sets the "user" edge to the User entity.
func (fu *FileUpdate) SetUser(u *User) *FileUpdate {
	return fu.SetUserID(u.ID)
}

// AddImageCompressedIDs adds the "Image_compressed" edge to the Image entity by IDs.
func (fu *FileUpdate) AddImageCompressedIDs(ids ...string) *FileUpdate {
	fu.mutation.AddImageCompressedIDs(ids...)
	return fu
}

// AddImageCompressed adds the "Image_compressed" edges to the Image entity.
func (fu *FileUpdate) AddImageCompressed(i ...*Image) *FileUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fu.AddImageCompressedIDs(ids...)
}

// AddImageOriginalIDs adds the "Image_original" edge to the Image entity by IDs.
func (fu *FileUpdate) AddImageOriginalIDs(ids ...string) *FileUpdate {
	fu.mutation.AddImageOriginalIDs(ids...)
	return fu
}

// AddImageOriginal adds the "Image_original" edges to the Image entity.
func (fu *FileUpdate) AddImageOriginal(i ...*Image) *FileUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fu.AddImageOriginalIDs(ids...)
}

// AddImageThumbnail320xIDs adds the "Image_thumbnail320x" edge to the Image entity by IDs.
func (fu *FileUpdate) AddImageThumbnail320xIDs(ids ...string) *FileUpdate {
	fu.mutation.AddImageThumbnail320xIDs(ids...)
	return fu
}

// AddImageThumbnail320x adds the "Image_thumbnail320x" edges to the Image entity.
func (fu *FileUpdate) AddImageThumbnail320x(i ...*Image) *FileUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fu.AddImageThumbnail320xIDs(ids...)
}

// AddImageThumbnail768xIDs adds the "Image_thumbnail768x" edge to the Image entity by IDs.
func (fu *FileUpdate) AddImageThumbnail768xIDs(ids ...string) *FileUpdate {
	fu.mutation.AddImageThumbnail768xIDs(ids...)
	return fu
}

// AddImageThumbnail768x adds the "Image_thumbnail768x" edges to the Image entity.
func (fu *FileUpdate) AddImageThumbnail768x(i ...*Image) *FileUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fu.AddImageThumbnail768xIDs(ids...)
}

// AddVideoFileIDs adds the "Video_file" edge to the Video entity by IDs.
func (fu *FileUpdate) AddVideoFileIDs(ids ...string) *FileUpdate {
	fu.mutation.AddVideoFileIDs(ids...)
	return fu
}

// AddVideoFile adds the "Video_file" edges to the Video entity.
func (fu *FileUpdate) AddVideoFile(v ...*Video) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return fu.AddVideoFileIDs(ids...)
}

// AddVideoPosterIDs adds the "Video_poster" edge to the Video entity by IDs.
func (fu *FileUpdate) AddVideoPosterIDs(ids ...string) *FileUpdate {
	fu.mutation.AddVideoPosterIDs(ids...)
	return fu
}

// AddVideoPoster adds the "Video_poster" edges to the Video entity.
func (fu *FileUpdate) AddVideoPoster(v ...*Video) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return fu.AddVideoPosterIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (fu *FileUpdate) Mutation() *FileMutation {
	return fu.mutation
}

// ClearBucket clears the "bucket" edge to the Bucket entity.
func (fu *FileUpdate) ClearBucket() *FileUpdate {
	fu.mutation.ClearBucket()
	return fu
}

// ClearUser clears the "user" edge to the User entity.
func (fu *FileUpdate) ClearUser() *FileUpdate {
	fu.mutation.ClearUser()
	return fu
}

// ClearImageCompressed clears all "Image_compressed" edges to the Image entity.
func (fu *FileUpdate) ClearImageCompressed() *FileUpdate {
	fu.mutation.ClearImageCompressed()
	return fu
}

// RemoveImageCompressedIDs removes the "Image_compressed" edge to Image entities by IDs.
func (fu *FileUpdate) RemoveImageCompressedIDs(ids ...string) *FileUpdate {
	fu.mutation.RemoveImageCompressedIDs(ids...)
	return fu
}

// RemoveImageCompressed removes "Image_compressed" edges to Image entities.
func (fu *FileUpdate) RemoveImageCompressed(i ...*Image) *FileUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fu.RemoveImageCompressedIDs(ids...)
}

// ClearImageOriginal clears all "Image_original" edges to the Image entity.
func (fu *FileUpdate) ClearImageOriginal() *FileUpdate {
	fu.mutation.ClearImageOriginal()
	return fu
}

// RemoveImageOriginalIDs removes the "Image_original" edge to Image entities by IDs.
func (fu *FileUpdate) RemoveImageOriginalIDs(ids ...string) *FileUpdate {
	fu.mutation.RemoveImageOriginalIDs(ids...)
	return fu
}

// RemoveImageOriginal removes "Image_original" edges to Image entities.
func (fu *FileUpdate) RemoveImageOriginal(i ...*Image) *FileUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fu.RemoveImageOriginalIDs(ids...)
}

// ClearImageThumbnail320x clears all "Image_thumbnail320x" edges to the Image entity.
func (fu *FileUpdate) ClearImageThumbnail320x() *FileUpdate {
	fu.mutation.ClearImageThumbnail320x()
	return fu
}

// RemoveImageThumbnail320xIDs removes the "Image_thumbnail320x" edge to Image entities by IDs.
func (fu *FileUpdate) RemoveImageThumbnail320xIDs(ids ...string) *FileUpdate {
	fu.mutation.RemoveImageThumbnail320xIDs(ids...)
	return fu
}

// RemoveImageThumbnail320x removes "Image_thumbnail320x" edges to Image entities.
func (fu *FileUpdate) RemoveImageThumbnail320x(i ...*Image) *FileUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fu.RemoveImageThumbnail320xIDs(ids...)
}

// ClearImageThumbnail768x clears all "Image_thumbnail768x" edges to the Image entity.
func (fu *FileUpdate) ClearImageThumbnail768x() *FileUpdate {
	fu.mutation.ClearImageThumbnail768x()
	return fu
}

// RemoveImageThumbnail768xIDs removes the "Image_thumbnail768x" edge to Image entities by IDs.
func (fu *FileUpdate) RemoveImageThumbnail768xIDs(ids ...string) *FileUpdate {
	fu.mutation.RemoveImageThumbnail768xIDs(ids...)
	return fu
}

// RemoveImageThumbnail768x removes "Image_thumbnail768x" edges to Image entities.
func (fu *FileUpdate) RemoveImageThumbnail768x(i ...*Image) *FileUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fu.RemoveImageThumbnail768xIDs(ids...)
}

// ClearVideoFile clears all "Video_file" edges to the Video entity.
func (fu *FileUpdate) ClearVideoFile() *FileUpdate {
	fu.mutation.ClearVideoFile()
	return fu
}

// RemoveVideoFileIDs removes the "Video_file" edge to Video entities by IDs.
func (fu *FileUpdate) RemoveVideoFileIDs(ids ...string) *FileUpdate {
	fu.mutation.RemoveVideoFileIDs(ids...)
	return fu
}

// RemoveVideoFile removes "Video_file" edges to Video entities.
func (fu *FileUpdate) RemoveVideoFile(v ...*Video) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return fu.RemoveVideoFileIDs(ids...)
}

// ClearVideoPoster clears all "Video_poster" edges to the Video entity.
func (fu *FileUpdate) ClearVideoPoster() *FileUpdate {
	fu.mutation.ClearVideoPoster()
	return fu
}

// RemoveVideoPosterIDs removes the "Video_poster" edge to Video entities by IDs.
func (fu *FileUpdate) RemoveVideoPosterIDs(ids ...string) *FileUpdate {
	fu.mutation.RemoveVideoPosterIDs(ids...)
	return fu
}

// RemoveVideoPoster removes "Video_poster" edges to Video entities.
func (fu *FileUpdate) RemoveVideoPoster(v ...*Video) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return fu.RemoveVideoPosterIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FileUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FileUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeString))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(file.FieldName, field.TypeString, value)
	}
	if value, ok := fu.mutation.GetType(); ok {
		_spec.SetField(file.FieldType, field.TypeString, value)
	}
	if value, ok := fu.mutation.Hash(); ok {
		_spec.SetField(file.FieldHash, field.TypeString, value)
	}
	if value, ok := fu.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedSize(); ok {
		_spec.AddField(file.FieldSize, field.TypeInt, value)
	}
	if value, ok := fu.mutation.Path(); ok {
		_spec.SetField(file.FieldPath, field.TypeString, value)
	}
	if value, ok := fu.mutation.IsPublic(); ok {
		_spec.SetField(file.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.SetField(file.FieldDescription, field.TypeString, value)
	}
	if value, ok := fu.mutation.Tags(); ok {
		_spec.SetField(file.FieldTags, field.TypeJSON, value)
	}
	if value, ok := fu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, file.FieldTags, value)
		})
	}
	if value, ok := fu.mutation.CreatedAt(); ok {
		_spec.SetField(file.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.ExtraData(); ok {
		_spec.SetField(file.FieldExtraData, field.TypeJSON, value)
	}
	if value, ok := fu.mutation.AppendedExtraData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, file.FieldExtraData, value)
		})
	}
	if value, ok := fu.mutation.Category(); ok {
		_spec.SetField(file.FieldCategory, field.TypeString, value)
	}
	if fu.mutation.BucketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.BucketTable,
			Columns: []string{file.BucketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bucket.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.BucketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.BucketTable,
			Columns: []string{file.BucketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bucket.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.UserTable,
			Columns: []string{file.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.UserTable,
			Columns: []string{file.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ImageCompressedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageCompressedTable,
			Columns: []string{file.ImageCompressedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedImageCompressedIDs(); len(nodes) > 0 && !fu.mutation.ImageCompressedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageCompressedTable,
			Columns: []string{file.ImageCompressedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ImageCompressedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageCompressedTable,
			Columns: []string{file.ImageCompressedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ImageOriginalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageOriginalTable,
			Columns: []string{file.ImageOriginalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedImageOriginalIDs(); len(nodes) > 0 && !fu.mutation.ImageOriginalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageOriginalTable,
			Columns: []string{file.ImageOriginalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ImageOriginalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageOriginalTable,
			Columns: []string{file.ImageOriginalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ImageThumbnail320xCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageThumbnail320xTable,
			Columns: []string{file.ImageThumbnail320xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedImageThumbnail320xIDs(); len(nodes) > 0 && !fu.mutation.ImageThumbnail320xCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageThumbnail320xTable,
			Columns: []string{file.ImageThumbnail320xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ImageThumbnail320xIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageThumbnail320xTable,
			Columns: []string{file.ImageThumbnail320xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ImageThumbnail768xCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageThumbnail768xTable,
			Columns: []string{file.ImageThumbnail768xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedImageThumbnail768xIDs(); len(nodes) > 0 && !fu.mutation.ImageThumbnail768xCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageThumbnail768xTable,
			Columns: []string{file.ImageThumbnail768xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ImageThumbnail768xIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageThumbnail768xTable,
			Columns: []string{file.ImageThumbnail768xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.VideoFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.VideoFileTable,
			Columns: []string{file.VideoFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedVideoFileIDs(); len(nodes) > 0 && !fu.mutation.VideoFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.VideoFileTable,
			Columns: []string{file.VideoFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.VideoFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.VideoFileTable,
			Columns: []string{file.VideoFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.VideoPosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.VideoPosterTable,
			Columns: []string{file.VideoPosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedVideoPosterIDs(); len(nodes) > 0 && !fu.mutation.VideoPosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.VideoPosterTable,
			Columns: []string{file.VideoPosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.VideoPosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.VideoPosterTable,
			Columns: []string{file.VideoPosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileMutation
}

// SetBucketId sets the "bucketId" field.
func (fuo *FileUpdateOne) SetBucketId(s string) *FileUpdateOne {
	fuo.mutation.SetBucketId(s)
	return fuo
}

// SetNillableBucketId sets the "bucketId" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableBucketId(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetBucketId(*s)
	}
	return fuo
}

// ClearBucketId clears the value of the "bucketId" field.
func (fuo *FileUpdateOne) ClearBucketId() *FileUpdateOne {
	fuo.mutation.ClearBucketId()
	return fuo
}

// SetName sets the "name" field.
func (fuo *FileUpdateOne) SetName(s string) *FileUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableName(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetName(*s)
	}
	return fuo
}

// SetType sets the "type" field.
func (fuo *FileUpdateOne) SetType(s string) *FileUpdateOne {
	fuo.mutation.SetType(s)
	return fuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableType(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetType(*s)
	}
	return fuo
}

// SetHash sets the "hash" field.
func (fuo *FileUpdateOne) SetHash(s string) *FileUpdateOne {
	fuo.mutation.SetHash(s)
	return fuo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableHash(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetHash(*s)
	}
	return fuo
}

// SetSize sets the "size" field.
func (fuo *FileUpdateOne) SetSize(i int) *FileUpdateOne {
	fuo.mutation.ResetSize()
	fuo.mutation.SetSize(i)
	return fuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableSize(i *int) *FileUpdateOne {
	if i != nil {
		fuo.SetSize(*i)
	}
	return fuo
}

// AddSize adds i to the "size" field.
func (fuo *FileUpdateOne) AddSize(i int) *FileUpdateOne {
	fuo.mutation.AddSize(i)
	return fuo
}

// SetPath sets the "path" field.
func (fuo *FileUpdateOne) SetPath(s string) *FileUpdateOne {
	fuo.mutation.SetPath(s)
	return fuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillablePath(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetPath(*s)
	}
	return fuo
}

// SetIsPublic sets the "isPublic" field.
func (fuo *FileUpdateOne) SetIsPublic(b bool) *FileUpdateOne {
	fuo.mutation.SetIsPublic(b)
	return fuo
}

// SetNillableIsPublic sets the "isPublic" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableIsPublic(b *bool) *FileUpdateOne {
	if b != nil {
		fuo.SetIsPublic(*b)
	}
	return fuo
}

// SetUploadedBy sets the "uploadedBy" field.
func (fuo *FileUpdateOne) SetUploadedBy(s string) *FileUpdateOne {
	fuo.mutation.SetUploadedBy(s)
	return fuo
}

// SetNillableUploadedBy sets the "uploadedBy" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableUploadedBy(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetUploadedBy(*s)
	}
	return fuo
}

// ClearUploadedBy clears the value of the "uploadedBy" field.
func (fuo *FileUpdateOne) ClearUploadedBy() *FileUpdateOne {
	fuo.mutation.ClearUploadedBy()
	return fuo
}

// SetDescription sets the "description" field.
func (fuo *FileUpdateOne) SetDescription(s string) *FileUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableDescription(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetDescription(*s)
	}
	return fuo
}

// SetTags sets the "tags" field.
func (fuo *FileUpdateOne) SetTags(jm json.RawMessage) *FileUpdateOne {
	fuo.mutation.SetTags(jm)
	return fuo
}

// AppendTags appends jm to the "tags" field.
func (fuo *FileUpdateOne) AppendTags(jm json.RawMessage) *FileUpdateOne {
	fuo.mutation.AppendTags(jm)
	return fuo
}

// SetCreatedAt sets the "createdAt" field.
func (fuo *FileUpdateOne) SetCreatedAt(t time.Time) *FileUpdateOne {
	fuo.mutation.SetCreatedAt(t)
	return fuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableCreatedAt(t *time.Time) *FileUpdateOne {
	if t != nil {
		fuo.SetCreatedAt(*t)
	}
	return fuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (fuo *FileUpdateOne) SetUpdatedAt(t time.Time) *FileUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableUpdatedAt(t *time.Time) *FileUpdateOne {
	if t != nil {
		fuo.SetUpdatedAt(*t)
	}
	return fuo
}

// SetExtraData sets the "extraData" field.
func (fuo *FileUpdateOne) SetExtraData(jm json.RawMessage) *FileUpdateOne {
	fuo.mutation.SetExtraData(jm)
	return fuo
}

// AppendExtraData appends jm to the "extraData" field.
func (fuo *FileUpdateOne) AppendExtraData(jm json.RawMessage) *FileUpdateOne {
	fuo.mutation.AppendExtraData(jm)
	return fuo
}

// SetCategory sets the "category" field.
func (fuo *FileUpdateOne) SetCategory(s string) *FileUpdateOne {
	fuo.mutation.SetCategory(s)
	return fuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableCategory(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetCategory(*s)
	}
	return fuo
}

// SetBucketID sets the "bucket" edge to the Bucket entity by ID.
func (fuo *FileUpdateOne) SetBucketID(id string) *FileUpdateOne {
	fuo.mutation.SetBucketID(id)
	return fuo
}

// SetNillableBucketID sets the "bucket" edge to the Bucket entity by ID if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableBucketID(id *string) *FileUpdateOne {
	if id != nil {
		fuo = fuo.SetBucketID(*id)
	}
	return fuo
}

// SetBucket sets the "bucket" edge to the Bucket entity.
func (fuo *FileUpdateOne) SetBucket(b *Bucket) *FileUpdateOne {
	return fuo.SetBucketID(b.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (fuo *FileUpdateOne) SetUserID(id string) *FileUpdateOne {
	fuo.mutation.SetUserID(id)
	return fuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableUserID(id *string) *FileUpdateOne {
	if id != nil {
		fuo = fuo.SetUserID(*id)
	}
	return fuo
}

// SetUser sets the "user" edge to the User entity.
func (fuo *FileUpdateOne) SetUser(u *User) *FileUpdateOne {
	return fuo.SetUserID(u.ID)
}

// AddImageCompressedIDs adds the "Image_compressed" edge to the Image entity by IDs.
func (fuo *FileUpdateOne) AddImageCompressedIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.AddImageCompressedIDs(ids...)
	return fuo
}

// AddImageCompressed adds the "Image_compressed" edges to the Image entity.
func (fuo *FileUpdateOne) AddImageCompressed(i ...*Image) *FileUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fuo.AddImageCompressedIDs(ids...)
}

// AddImageOriginalIDs adds the "Image_original" edge to the Image entity by IDs.
func (fuo *FileUpdateOne) AddImageOriginalIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.AddImageOriginalIDs(ids...)
	return fuo
}

// AddImageOriginal adds the "Image_original" edges to the Image entity.
func (fuo *FileUpdateOne) AddImageOriginal(i ...*Image) *FileUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fuo.AddImageOriginalIDs(ids...)
}

// AddImageThumbnail320xIDs adds the "Image_thumbnail320x" edge to the Image entity by IDs.
func (fuo *FileUpdateOne) AddImageThumbnail320xIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.AddImageThumbnail320xIDs(ids...)
	return fuo
}

// AddImageThumbnail320x adds the "Image_thumbnail320x" edges to the Image entity.
func (fuo *FileUpdateOne) AddImageThumbnail320x(i ...*Image) *FileUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fuo.AddImageThumbnail320xIDs(ids...)
}

// AddImageThumbnail768xIDs adds the "Image_thumbnail768x" edge to the Image entity by IDs.
func (fuo *FileUpdateOne) AddImageThumbnail768xIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.AddImageThumbnail768xIDs(ids...)
	return fuo
}

// AddImageThumbnail768x adds the "Image_thumbnail768x" edges to the Image entity.
func (fuo *FileUpdateOne) AddImageThumbnail768x(i ...*Image) *FileUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fuo.AddImageThumbnail768xIDs(ids...)
}

// AddVideoFileIDs adds the "Video_file" edge to the Video entity by IDs.
func (fuo *FileUpdateOne) AddVideoFileIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.AddVideoFileIDs(ids...)
	return fuo
}

// AddVideoFile adds the "Video_file" edges to the Video entity.
func (fuo *FileUpdateOne) AddVideoFile(v ...*Video) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return fuo.AddVideoFileIDs(ids...)
}

// AddVideoPosterIDs adds the "Video_poster" edge to the Video entity by IDs.
func (fuo *FileUpdateOne) AddVideoPosterIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.AddVideoPosterIDs(ids...)
	return fuo
}

// AddVideoPoster adds the "Video_poster" edges to the Video entity.
func (fuo *FileUpdateOne) AddVideoPoster(v ...*Video) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return fuo.AddVideoPosterIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (fuo *FileUpdateOne) Mutation() *FileMutation {
	return fuo.mutation
}

// ClearBucket clears the "bucket" edge to the Bucket entity.
func (fuo *FileUpdateOne) ClearBucket() *FileUpdateOne {
	fuo.mutation.ClearBucket()
	return fuo
}

// ClearUser clears the "user" edge to the User entity.
func (fuo *FileUpdateOne) ClearUser() *FileUpdateOne {
	fuo.mutation.ClearUser()
	return fuo
}

// ClearImageCompressed clears all "Image_compressed" edges to the Image entity.
func (fuo *FileUpdateOne) ClearImageCompressed() *FileUpdateOne {
	fuo.mutation.ClearImageCompressed()
	return fuo
}

// RemoveImageCompressedIDs removes the "Image_compressed" edge to Image entities by IDs.
func (fuo *FileUpdateOne) RemoveImageCompressedIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.RemoveImageCompressedIDs(ids...)
	return fuo
}

// RemoveImageCompressed removes "Image_compressed" edges to Image entities.
func (fuo *FileUpdateOne) RemoveImageCompressed(i ...*Image) *FileUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fuo.RemoveImageCompressedIDs(ids...)
}

// ClearImageOriginal clears all "Image_original" edges to the Image entity.
func (fuo *FileUpdateOne) ClearImageOriginal() *FileUpdateOne {
	fuo.mutation.ClearImageOriginal()
	return fuo
}

// RemoveImageOriginalIDs removes the "Image_original" edge to Image entities by IDs.
func (fuo *FileUpdateOne) RemoveImageOriginalIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.RemoveImageOriginalIDs(ids...)
	return fuo
}

// RemoveImageOriginal removes "Image_original" edges to Image entities.
func (fuo *FileUpdateOne) RemoveImageOriginal(i ...*Image) *FileUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fuo.RemoveImageOriginalIDs(ids...)
}

// ClearImageThumbnail320x clears all "Image_thumbnail320x" edges to the Image entity.
func (fuo *FileUpdateOne) ClearImageThumbnail320x() *FileUpdateOne {
	fuo.mutation.ClearImageThumbnail320x()
	return fuo
}

// RemoveImageThumbnail320xIDs removes the "Image_thumbnail320x" edge to Image entities by IDs.
func (fuo *FileUpdateOne) RemoveImageThumbnail320xIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.RemoveImageThumbnail320xIDs(ids...)
	return fuo
}

// RemoveImageThumbnail320x removes "Image_thumbnail320x" edges to Image entities.
func (fuo *FileUpdateOne) RemoveImageThumbnail320x(i ...*Image) *FileUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fuo.RemoveImageThumbnail320xIDs(ids...)
}

// ClearImageThumbnail768x clears all "Image_thumbnail768x" edges to the Image entity.
func (fuo *FileUpdateOne) ClearImageThumbnail768x() *FileUpdateOne {
	fuo.mutation.ClearImageThumbnail768x()
	return fuo
}

// RemoveImageThumbnail768xIDs removes the "Image_thumbnail768x" edge to Image entities by IDs.
func (fuo *FileUpdateOne) RemoveImageThumbnail768xIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.RemoveImageThumbnail768xIDs(ids...)
	return fuo
}

// RemoveImageThumbnail768x removes "Image_thumbnail768x" edges to Image entities.
func (fuo *FileUpdateOne) RemoveImageThumbnail768x(i ...*Image) *FileUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fuo.RemoveImageThumbnail768xIDs(ids...)
}

// ClearVideoFile clears all "Video_file" edges to the Video entity.
func (fuo *FileUpdateOne) ClearVideoFile() *FileUpdateOne {
	fuo.mutation.ClearVideoFile()
	return fuo
}

// RemoveVideoFileIDs removes the "Video_file" edge to Video entities by IDs.
func (fuo *FileUpdateOne) RemoveVideoFileIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.RemoveVideoFileIDs(ids...)
	return fuo
}

// RemoveVideoFile removes "Video_file" edges to Video entities.
func (fuo *FileUpdateOne) RemoveVideoFile(v ...*Video) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return fuo.RemoveVideoFileIDs(ids...)
}

// ClearVideoPoster clears all "Video_poster" edges to the Video entity.
func (fuo *FileUpdateOne) ClearVideoPoster() *FileUpdateOne {
	fuo.mutation.ClearVideoPoster()
	return fuo
}

// RemoveVideoPosterIDs removes the "Video_poster" edge to Video entities by IDs.
func (fuo *FileUpdateOne) RemoveVideoPosterIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.RemoveVideoPosterIDs(ids...)
	return fuo
}

// RemoveVideoPoster removes "Video_poster" edges to Video entities.
func (fuo *FileUpdateOne) RemoveVideoPoster(v ...*Video) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return fuo.RemoveVideoPosterIDs(ids...)
}

// Where appends a list predicates to the FileUpdate builder.
func (fuo *FileUpdateOne) Where(ps ...predicate.File) *FileUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FileUpdateOne) Select(field string, fields ...string) *FileUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated File entity.
func (fuo *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FileUpdateOne) SaveX(ctx context.Context) *File {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FileUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FileUpdateOne) sqlSave(ctx context.Context) (_node *File, err error) {
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeString))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "File.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for _, f := range fields {
			if !file.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(file.FieldName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.GetType(); ok {
		_spec.SetField(file.FieldType, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Hash(); ok {
		_spec.SetField(file.FieldHash, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedSize(); ok {
		_spec.AddField(file.FieldSize, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.Path(); ok {
		_spec.SetField(file.FieldPath, field.TypeString, value)
	}
	if value, ok := fuo.mutation.IsPublic(); ok {
		_spec.SetField(file.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.SetField(file.FieldDescription, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Tags(); ok {
		_spec.SetField(file.FieldTags, field.TypeJSON, value)
	}
	if value, ok := fuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, file.FieldTags, value)
		})
	}
	if value, ok := fuo.mutation.CreatedAt(); ok {
		_spec.SetField(file.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.ExtraData(); ok {
		_spec.SetField(file.FieldExtraData, field.TypeJSON, value)
	}
	if value, ok := fuo.mutation.AppendedExtraData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, file.FieldExtraData, value)
		})
	}
	if value, ok := fuo.mutation.Category(); ok {
		_spec.SetField(file.FieldCategory, field.TypeString, value)
	}
	if fuo.mutation.BucketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.BucketTable,
			Columns: []string{file.BucketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bucket.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.BucketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.BucketTable,
			Columns: []string{file.BucketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bucket.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.UserTable,
			Columns: []string{file.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.UserTable,
			Columns: []string{file.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ImageCompressedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageCompressedTable,
			Columns: []string{file.ImageCompressedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedImageCompressedIDs(); len(nodes) > 0 && !fuo.mutation.ImageCompressedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageCompressedTable,
			Columns: []string{file.ImageCompressedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ImageCompressedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageCompressedTable,
			Columns: []string{file.ImageCompressedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ImageOriginalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageOriginalTable,
			Columns: []string{file.ImageOriginalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedImageOriginalIDs(); len(nodes) > 0 && !fuo.mutation.ImageOriginalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageOriginalTable,
			Columns: []string{file.ImageOriginalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ImageOriginalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageOriginalTable,
			Columns: []string{file.ImageOriginalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ImageThumbnail320xCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageThumbnail320xTable,
			Columns: []string{file.ImageThumbnail320xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedImageThumbnail320xIDs(); len(nodes) > 0 && !fuo.mutation.ImageThumbnail320xCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageThumbnail320xTable,
			Columns: []string{file.ImageThumbnail320xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ImageThumbnail320xIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageThumbnail320xTable,
			Columns: []string{file.ImageThumbnail320xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ImageThumbnail768xCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageThumbnail768xTable,
			Columns: []string{file.ImageThumbnail768xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedImageThumbnail768xIDs(); len(nodes) > 0 && !fuo.mutation.ImageThumbnail768xCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageThumbnail768xTable,
			Columns: []string{file.ImageThumbnail768xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ImageThumbnail768xIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ImageThumbnail768xTable,
			Columns: []string{file.ImageThumbnail768xColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.VideoFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.VideoFileTable,
			Columns: []string{file.VideoFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedVideoFileIDs(); len(nodes) > 0 && !fuo.mutation.VideoFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.VideoFileTable,
			Columns: []string{file.VideoFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.VideoFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.VideoFileTable,
			Columns: []string{file.VideoFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.VideoPosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.VideoPosterTable,
			Columns: []string{file.VideoPosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedVideoPosterIDs(); len(nodes) > 0 && !fuo.mutation.VideoPosterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.VideoPosterTable,
			Columns: []string{file.VideoPosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.VideoPosterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.VideoPosterTable,
			Columns: []string{file.VideoPosterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &File{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"api.us4ever/internal/ent/moment"
	"api.us4ever/internal/ent/momentimage"
	"api.us4ever/internal/ent/momentvideo"
	"api.us4ever/internal/ent/predicate"
	"api.us4ever/internal/ent/user"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// MomentUpdate is the builder for updating Moment entities.
type MomentUpdate struct {
	config
	hooks    []Hook
	mutation *MomentMutation
}

// Where appends a list predicates to the MomentUpdate builder.
func (mu *MomentUpdate) Where(ps ...predicate.Moment) *MomentUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetContent sets the "content" field.
func (mu *MomentUpdate) SetContent(s string) *MomentUpdate {
	mu.mutation.SetContent(s)
	return mu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (mu *MomentUpdate) SetNillableContent(s *string) *MomentUpdate {
	if s != nil {
		mu.SetContent(*s)
	}
	return mu
}

// SetIsPublic sets the "isPublic" field.
func (mu *MomentUpdate) SetIsPublic(b bool) *MomentUpdate {
	mu.mutation.SetIsPublic(b)
	return mu
}

// SetNillableIsPublic sets the "isPublic" field if the given value is not nil.
func (mu *MomentUpdate) SetNillableIsPublic(b *bool) *MomentUpdate {
	if b != nil {
		mu.SetIsPublic(*b)
	}
	return mu
}

// SetTags sets the "tags" field.
func (mu *MomentUpdate) SetTags(jm json.RawMessage) *MomentUpdate {
	mu.mutation.SetTags(jm)
	return mu
}

// AppendTags appends jm to the "tags" field.
func (mu *MomentUpdate) AppendTags(jm json.RawMessage) *MomentUpdate {
	mu.mutation.AppendTags(jm)
	return mu
}

// SetViews sets the "views" field.
func (mu *MomentUpdate) SetViews(i int32) *MomentUpdate {
	mu.mutation.ResetViews()
	mu.mutation.SetViews(i)
	return mu
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (mu *MomentUpdate) SetNillableViews(i *int32) *MomentUpdate {
	if i != nil {
		mu.SetViews(*i)
	}
	return mu
}

// AddViews adds i to the "views" field.
func (mu *MomentUpdate) AddViews(i int32) *MomentUpdate {
	mu.mutation.AddViews(i)
	return mu
}

// SetLikes sets the "likes" field.
func (mu *MomentUpdate) SetLikes(i int32) *MomentUpdate {
	mu.mutation.ResetLikes()
	mu.mutation.SetLikes(i)
	return mu
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (mu *MomentUpdate) SetNillableLikes(i *int32) *MomentUpdate {
	if i != nil {
		mu.SetLikes(*i)
	}
	return mu
}

// AddLikes adds i to the "likes" field.
func (mu *MomentUpdate) AddLikes(i int32) *MomentUpdate {
	mu.mutation.AddLikes(i)
	return mu
}

// SetExtraData sets the "extraData" field.
func (mu *MomentUpdate) SetExtraData(jm json.RawMessage) *MomentUpdate {
	mu.mutation.SetExtraData(jm)
	return mu
}

// AppendExtraData appends jm to the "extraData" field.
func (mu *MomentUpdate) AppendExtraData(jm json.RawMessage) *MomentUpdate {
	mu.mutation.AppendExtraData(jm)
	return mu
}

// SetCategory sets the "category" field.
func (mu *MomentUpdate) SetCategory(s string) *MomentUpdate {
	mu.mutation.SetCategory(s)
	return mu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (mu *MomentUpdate) SetNillableCategory(s *string) *MomentUpdate {
	if s != nil {
		mu.SetCategory(*s)
	}
	return mu
}

// SetOwnerId sets the "ownerId" field.
func (mu *MomentUpdate) SetOwnerId(s string) *MomentUpdate {
	mu.mutation.SetOwnerId(s)
	return mu
}

// SetNillableOwnerId sets the "ownerId" field if the given value is not nil.
func (mu *MomentUpdate) SetNillableOwnerId(s *string) *MomentUpdate {
	if s != nil {
		mu.SetOwnerId(*s)
	}
	return mu
}

// ClearOwnerId clears the value of the "ownerId" field.
func (mu *MomentUpdate) ClearOwnerId() *MomentUpdate {
	mu.mutation.ClearOwnerId()
	return mu
}

// SetCreatedAt sets the "createdAt" field.
func (mu *MomentUpdate) SetCreatedAt(t time.Time) *MomentUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (mu *MomentUpdate) SetNillableCreatedAt(t *time.Time) *MomentUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// SetUpdatedAt sets the "updatedAt" field.
func (mu *MomentUpdate) SetUpdatedAt(t time.Time) *MomentUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (mu *MomentUpdate) SetNillableUpdatedAt(t *time.Time) *MomentUpdate {
	if t != nil {
		mu.SetUpdatedAt(*t)
	}
	return mu
}

// AddMomentImageIDs adds the "moment_images" edge to the MomentImage entity by IDs.
func (mu *MomentUpdate) AddMomentImageIDs(ids ...uint) *MomentUpdate {
	mu.mutation.AddMomentImageIDs(ids...)
	return mu
}

// AddMomentImages adds the "moment_images" edges to the MomentImage entity.
func (mu *MomentUpdate) AddMomentImages(m ...*MomentImage) *MomentUpdate {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMomentImageIDs(ids...)
}

// AddMomentVideoIDs adds the "moment_videos" edge to the MomentVideo entity by IDs.
func (mu *MomentUpdate) AddMomentVideoIDs(ids ...uint) *MomentUpdate {
	mu.mutation.AddMomentVideoIDs(ids...)
	return mu
}

// AddMomentVideos adds the "moment_videos" edges to the MomentVideo entity.
func (mu *MomentUpdate) AddMomentVideos(m ...*MomentVideo) *MomentUpdate {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMomentVideoIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mu *MomentUpdate) SetUserID(id string) *MomentUpdate {
	mu.mutation.SetUserID(id)
	return mu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (mu *MomentUpdate) SetNillableUserID(id *string) *MomentUpdate {
	if id != nil {
		mu = mu.SetUserID(*id)
	}
	return mu
}

// SetUser sets the "user" edge to the User entity.
func (mu *MomentUpdate) SetUser(u *User) *MomentUpdate {
	return mu.SetUserID(u.ID)
}

// Mutation returns the MomentMutation object of the builder.
func (mu *MomentUpdate) Mutation() *MomentMutation {
	return mu.mutation
}

// ClearMomentImages clears all "moment_images" edges to the MomentImage entity.
func (mu *MomentUpdate) ClearMomentImages() *MomentUpdate {
	mu.mutation.ClearMomentImages()
	return mu
}

// RemoveMomentImageIDs removes the "moment_images" edge to MomentImage entities by IDs.
func (mu *MomentUpdate) RemoveMomentImageIDs(ids ...uint) *MomentUpdate {
	mu.mutation.RemoveMomentImageIDs(ids...)
	return mu
}

// RemoveMomentImages removes "moment_images" edges to MomentImage entities.
func (mu *MomentUpdate) RemoveMomentImages(m ...*MomentImage) *MomentUpdate {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMomentImageIDs(ids...)
}

// ClearMomentVideos clears all "moment_videos" edges to the MomentVideo entity.
func (mu *MomentUpdate) ClearMomentVideos() *MomentUpdate {
	mu.mutation.ClearMomentVideos()
	return mu
}

// RemoveMomentVideoIDs removes the "moment_videos" edge to MomentVideo entities by IDs.
func (mu *MomentUpdate) RemoveMomentVideoIDs(ids ...uint) *MomentUpdate {
	mu.mutation.RemoveMomentVideoIDs(ids...)
	return mu
}

// RemoveMomentVideos removes "moment_videos" edges to MomentVideo entities.
func (mu *MomentUpdate) RemoveMomentVideos(m ...*MomentVideo) *MomentUpdate {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMomentVideoIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (mu *MomentUpdate) ClearUser() *MomentUpdate {
	mu.mutation.ClearUser()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MomentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MomentUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MomentUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MomentUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MomentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(moment.Table, moment.Columns, sqlgraph.NewFieldSpec(moment.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Content(); ok {
		_spec.SetField(moment.FieldContent, field.TypeString, value)
	}
	if value, ok := mu.mutation.IsPublic(); ok {
		_spec.SetField(moment.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := mu.mutation.Tags(); ok {
		_spec.SetField(moment.FieldTags, field.TypeJSON, value)
	}
	if value, ok := mu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, moment.FieldTags, value)
		})
	}
	if value, ok := mu.mutation.Views(); ok {
		_spec.SetField(moment.FieldViews, field.TypeInt32, value)
	}
	if value, ok := mu.mutation.AddedViews(); ok {
		_spec.AddField(moment.FieldViews, field.TypeInt32, value)
	}
	if value, ok := mu.mutation.Likes(); ok {
		_spec.SetField(moment.FieldLikes, field.TypeInt32, value)
	}
	if value, ok := mu.mutation.AddedLikes(); ok {
		_spec.AddField(moment.FieldLikes, field.TypeInt32, value)
	}
	if value, ok := mu.mutation.ExtraData(); ok {
		_spec.SetField(moment.FieldExtraData, field.TypeJSON, value)
	}
	if value, ok := mu.mutation.AppendedExtraData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, moment.FieldExtraData, value)
		})
	}
	if value, ok := mu.mutation.Category(); ok {
		_spec.SetField(moment.FieldCategory, field.TypeString, value)
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(moment.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(moment.FieldUpdatedAt, field.TypeTime, value)
	}
	if mu.mutation.MomentImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moment.MomentImagesTable,
			Columns: []string{moment.MomentImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentimage.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMomentImagesIDs(); len(nodes) > 0 && !mu.mutation.MomentImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moment.MomentImagesTable,
			Columns: []string{moment.MomentImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentimage.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MomentImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moment.MomentImagesTable,
			Columns: []string{moment.MomentImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentimage.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MomentVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moment.MomentVideosTable,
			Columns: []string{moment.MomentVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentvideo.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMomentVideosIDs(); len(nodes) > 0 && !mu.mutation.MomentVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moment.MomentVideosTable,
			Columns: []string{moment.MomentVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentvideo.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MomentVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moment.MomentVideosTable,
			Columns: []string{moment.MomentVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentvideo.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moment.UserTable,
			Columns: []string{moment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moment.UserTable,
			Columns: []string{moment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MomentUpdateOne is the builder for updating a single Moment entity.
type MomentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MomentMutation
}

// SetContent sets the "content" field.
func (muo *MomentUpdateOne) SetContent(s string) *MomentUpdateOne {
	muo.mutation.SetContent(s)
	return muo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (muo *MomentUpdateOne) SetNillableContent(s *string) *MomentUpdateOne {
	if s != nil {
		muo.SetContent(*s)
	}
	return muo
}

// SetIsPublic sets the "isPublic" field.
func (muo *MomentUpdateOne) SetIsPublic(b bool) *MomentUpdateOne {
	muo.mutation.SetIsPublic(b)
	return muo
}

// SetNillableIsPublic sets the "isPublic" field if the given value is not nil.
func (muo *MomentUpdateOne) SetNillableIsPublic(b *bool) *MomentUpdateOne {
	if b != nil {
		muo.SetIsPublic(*b)
	}
	return muo
}

// SetTags sets the "tags" field.
func (muo *MomentUpdateOne) SetTags(jm json.RawMessage) *MomentUpdateOne {
	muo.mutation.SetTags(jm)
	return muo
}

// AppendTags appends jm to the "tags" field.
func (muo *MomentUpdateOne) AppendTags(jm json.RawMessage) *MomentUpdateOne {
	muo.mutation.AppendTags(jm)
	return muo
}

// SetViews sets the "views" field.
func (muo *MomentUpdateOne) SetViews(i int32) *MomentUpdateOne {
	muo.mutation.ResetViews()
	muo.mutation.SetViews(i)
	return muo
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (muo *MomentUpdateOne) SetNillableViews(i *int32) *MomentUpdateOne {
	if i != nil {
		muo.SetViews(*i)
	}
	return muo
}

// AddViews adds i to the "views" field.
func (muo *MomentUpdateOne) AddViews(i int32) *MomentUpdateOne {
	muo.mutation.AddViews(i)
	return muo
}

// SetLikes sets the "likes" field.
func (muo *MomentUpdateOne) SetLikes(i int32) *MomentUpdateOne {
	muo.mutation.ResetLikes()
	muo.mutation.SetLikes(i)
	return muo
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (muo *MomentUpdateOne) SetNillableLikes(i *int32) *MomentUpdateOne {
	if i != nil {
		muo.SetLikes(*i)
	}
	return muo
}

// AddLikes adds i to the "likes" field.
func (muo *MomentUpdateOne) AddLikes(i int32) *MomentUpdateOne {
	muo.mutation.AddLikes(i)
	return muo
}

// SetExtraData sets the "extraData" field.
func (muo *MomentUpdateOne) SetExtraData(jm json.RawMessage) *MomentUpdateOne {
	muo.mutation.SetExtraData(jm)
	return muo
}

// AppendExtraData appends jm to the "extraData" field.
func (muo *MomentUpdateOne) AppendExtraData(jm json.RawMessage) *MomentUpdateOne {
	muo.mutation.AppendExtraData(jm)
	return muo
}

// SetCategory sets the "category" field.
func (muo *MomentUpdateOne) SetCategory(s string) *MomentUpdateOne {
	muo.mutation.SetCategory(s)
	return muo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (muo *MomentUpdateOne) SetNillableCategory(s *string) *MomentUpdateOne {
	if s != nil {
		muo.SetCategory(*s)
	}
	return muo
}

// SetOwnerId sets the "ownerId" field.
func (muo *MomentUpdateOne) SetOwnerId(s string) *MomentUpdateOne {
	muo.mutation.SetOwnerId(s)
	return muo
}

// SetNillableOwnerId sets the "ownerId" field if the given value is not nil.
func (muo *MomentUpdateOne) SetNillableOwnerId(s *string) *MomentUpdateOne {
	if s != nil {
		muo.SetOwnerId(*s)
	}
	return muo
}

// ClearOwnerId clears the value of the "ownerId" field.
func (muo *MomentUpdateOne) ClearOwnerId() *MomentUpdateOne {
	muo.mutation.ClearOwnerId()
	return muo
}

// SetCreatedAt sets the "createdAt" field.
func (muo *MomentUpdateOne) SetCreatedAt(t time.Time) *MomentUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (muo *MomentUpdateOne) SetNillableCreatedAt(t *time.Time) *MomentUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// SetUpdatedAt sets the "updatedAt" field.
func (muo *MomentUpdateOne) SetUpdatedAt(t time.Time) *MomentUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (muo *MomentUpdateOne) SetNillableUpdatedAt(t *time.Time) *MomentUpdateOne {
	if t != nil {
		muo.SetUpdatedAt(*t)
	}
	return muo
}

// AddMomentImageIDs adds the "moment_images" edge to the MomentImage entity by IDs.
func (muo *MomentUpdateOne) AddMomentImageIDs(ids ...uint) *MomentUpdateOne {
	muo.mutation.AddMomentImageIDs(ids...)
	return muo
}

// AddMomentImages adds the "moment_images" edges to the MomentImage entity.
func (muo *MomentUpdateOne) AddMomentImages(m ...*MomentImage) *MomentUpdateOne {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMomentImageIDs(ids...)
}

// AddMomentVideoIDs adds the "moment_videos" edge to the MomentVideo entity by IDs.
func (muo *MomentUpdateOne) AddMomentVideoIDs(ids ...uint) *MomentUpdateOne {
	muo.mutation.AddMomentVideoIDs(ids...)
	return muo
}

// AddMomentVideos adds the "moment_videos" edges to the MomentVideo entity.
func (muo *MomentUpdateOne) AddMomentVideos(m ...*MomentVideo) *MomentUpdateOne {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMomentVideoIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (muo *MomentUpdateOne) SetUserID(id string) *MomentUpdateOne {
	muo.mutation.SetUserID(id)
	return muo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (muo *MomentUpdateOne) SetNillableUserID(id *string) *MomentUpdateOne {
	if id != nil {
		muo = muo.SetUserID(*id)
	}
	return muo
}

// SetUser sets the "user" edge to the User entity.
func (muo *MomentUpdateOne) SetUser(u *User) *MomentUpdateOne {
	return muo.SetUserID(u.ID)
}

// Mutation returns the MomentMutation object of the builder.
func (muo *MomentUpdateOne) Mutation() *MomentMutation {
	return muo.mutation
}

// ClearMomentImages clears all "moment_images" edges to the MomentImage entity.
func (muo *MomentUpdateOne) ClearMomentImages() *MomentUpdateOne {
	muo.mutation.ClearMomentImages()
	return muo
}

// RemoveMomentImageIDs removes the "moment_images" edge to MomentImage entities by IDs.
func (muo *MomentUpdateOne) RemoveMomentImageIDs(ids ...uint) *MomentUpdateOne {
	muo.mutation.RemoveMomentImageIDs(ids...)
	return muo
}

// RemoveMomentImages removes "moment_images" edges to MomentImage entities.
func (muo *MomentUpdateOne) RemoveMomentImages(m ...*MomentImage) *MomentUpdateOne {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMomentImageIDs(ids...)
}

// ClearMomentVideos clears all "moment_videos" edges to the MomentVideo entity.
func (muo *MomentUpdateOne) ClearMomentVideos() *MomentUpdateOne {
	muo.mutation.ClearMomentVideos()
	return muo
}

// RemoveMomentVideoIDs removes the "moment_videos" edge to MomentVideo entities by IDs.
func (muo *MomentUpdateOne) RemoveMomentVideoIDs(ids ...uint) *MomentUpdateOne {
	muo.mutation.RemoveMomentVideoIDs(ids...)
	return muo
}

// RemoveMomentVideos removes "moment_videos" edges to MomentVideo entities.
func (muo *MomentUpdateOne) RemoveMomentVideos(m ...*MomentVideo) *MomentUpdateOne {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMomentVideoIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (muo *MomentUpdateOne) ClearUser() *MomentUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// Where appends a list predicates to the MomentUpdate builder.
func (muo *MomentUpdateOne) Where(ps ...predicate.Moment) *MomentUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MomentUpdateOne) Select(field string, fields ...string) *MomentUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Moment entity.
func (muo *MomentUpdateOne) Save(ctx context.Context) (*Moment, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MomentUpdateOne) SaveX(ctx context.Context) *Moment {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MomentUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MomentUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MomentUpdateOne) sqlSave(ctx context.Context) (_node *Moment, err error) {
	_spec := sqlgraph.NewUpdateSpec(moment.Table, moment.Columns, sqlgraph.NewFieldSpec(moment.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Moment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, moment.FieldID)
		for _, f := range fields {
			if !moment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != moment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Content(); ok {
		_spec.SetField(moment.FieldContent, field.TypeString, value)
	}
	if value, ok := muo.mutation.IsPublic(); ok {
		_spec.SetField(moment.FieldIsPublic, field.TypeBool, value)
	}
	if value, ok := muo.mutation.Tags(); ok {
		_spec.SetField(moment.FieldTags, field.TypeJSON, value)
	}
	if value, ok := muo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, moment.FieldTags, value)
		})
	}
	if value, ok := muo.mutation.Views(); ok {
		_spec.SetField(moment.FieldViews, field.TypeInt32, value)
	}
	if value, ok := muo.mutation.AddedViews(); ok {
		_spec.AddField(moment.FieldViews, field.TypeInt32, value)
	}
	if value, ok := muo.mutation.Likes(); ok {
		_spec.SetField(moment.FieldLikes, field.TypeInt32, value)
	}
	if value, ok := muo.mutation.AddedLikes(); ok {
		_spec.AddField(moment.FieldLikes, field.TypeInt32, value)
	}
	if value, ok := muo.mutation.ExtraData(); ok {
		_spec.SetField(moment.FieldExtraData, field.TypeJSON, value)
	}
	if value, ok := muo.mutation.AppendedExtraData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, moment.FieldExtraData, value)
		})
	}
	if value, ok := muo.mutation.Category(); ok {
		_spec.SetField(moment.FieldCategory, field.TypeString, value)
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(moment.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(moment.FieldUpdatedAt, field.TypeTime, value)
	}
	if muo.mutation.MomentImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moment.MomentImagesTable,
			Columns: []string{moment.MomentImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentimage.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMomentImagesIDs(); len(nodes) > 0 && !muo.mutation.MomentImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moment.MomentImagesTable,
			Columns: []string{moment.MomentImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentimage.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MomentImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moment.MomentImagesTable,
			Columns: []string{moment.MomentImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentimage.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MomentVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moment.MomentVideosTable,
			Columns: []string{moment.MomentVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentvideo.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMomentVideosIDs(); len(nodes) > 0 && !muo.mutation.MomentVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moment.MomentVideosTable,
			Columns: []string{moment.MomentVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentvideo.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MomentVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moment.MomentVideosTable,
			Columns: []string{moment.MomentVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentvideo.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moment.UserTable,
			Columns: []string{moment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moment.UserTable,
			Columns: []string{moment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Moment{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}

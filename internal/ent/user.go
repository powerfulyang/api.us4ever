// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"api.us4ever/internal/ent/group"
	"api.us4ever/internal/ent/user"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Nickname holds the value of the "nickname" field.
	Nickname string `json:"nickname,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// Bio holds the value of the "bio" field.
	Bio string `json:"bio,omitempty"`
	// IsAdmin holds the value of the "isAdmin" field.
	IsAdmin bool `json:"isAdmin,omitempty"`
	// LastLoginIp holds the value of the "lastLoginIp" field.
	LastLoginIp string `json:"lastLoginIp,omitempty"`
	// GroupId holds the value of the "groupId" field.
	GroupId string `json:"groupId,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// LastLoginAt holds the value of the "lastLoginAt" field.
	LastLoginAt time.Time `json:"lastLoginAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Buckets holds the value of the buckets edge.
	Buckets []*Bucket `json:"buckets,omitempty"`
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// Images holds the value of the images edge.
	Images []*Image `json:"images,omitempty"`
	// Keeps holds the value of the keeps edge.
	Keeps []*Keep `json:"keeps,omitempty"`
	// Mindmaps holds the value of the mindmaps edge.
	Mindmaps []*Mindmap `json:"mindmaps,omitempty"`
	// Moments holds the value of the moments edge.
	Moments []*Moment `json:"moments,omitempty"`
	// Todos holds the value of the todos edge.
	Todos []*Todo `json:"todos,omitempty"`
	// Group holds the value of the group edge.
	Group *Group `json:"group,omitempty"`
	// Videos holds the value of the videos edge.
	Videos []*Video `json:"videos,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// BucketsOrErr returns the Buckets value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) BucketsOrErr() ([]*Bucket, error) {
	if e.loadedTypes[0] {
		return e.Buckets, nil
	}
	return nil, &NotLoadedError{edge: "buckets"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[1] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// ImagesOrErr returns the Images value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ImagesOrErr() ([]*Image, error) {
	if e.loadedTypes[2] {
		return e.Images, nil
	}
	return nil, &NotLoadedError{edge: "images"}
}

// KeepsOrErr returns the Keeps value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) KeepsOrErr() ([]*Keep, error) {
	if e.loadedTypes[3] {
		return e.Keeps, nil
	}
	return nil, &NotLoadedError{edge: "keeps"}
}

// MindmapsOrErr returns the Mindmaps value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) MindmapsOrErr() ([]*Mindmap, error) {
	if e.loadedTypes[4] {
		return e.Mindmaps, nil
	}
	return nil, &NotLoadedError{edge: "mindmaps"}
}

// MomentsOrErr returns the Moments value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) MomentsOrErr() ([]*Moment, error) {
	if e.loadedTypes[5] {
		return e.Moments, nil
	}
	return nil, &NotLoadedError{edge: "moments"}
}

// TodosOrErr returns the Todos value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TodosOrErr() ([]*Todo, error) {
	if e.loadedTypes[6] {
		return e.Todos, nil
	}
	return nil, &NotLoadedError{edge: "todos"}
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) GroupOrErr() (*Group, error) {
	if e.Group != nil {
		return e.Group, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: group.Label}
	}
	return nil, &NotLoadedError{edge: "group"}
}

// VideosOrErr returns the Videos value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) VideosOrErr() ([]*Video, error) {
	if e.loadedTypes[8] {
		return e.Videos, nil
	}
	return nil, &NotLoadedError{edge: "videos"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldIsAdmin:
			values[i] = new(sql.NullBool)
		case user.FieldID, user.FieldEmail, user.FieldNickname, user.FieldAvatar, user.FieldBio, user.FieldLastLoginIp, user.FieldGroupId:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldLastLoginAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				u.Nickname = value.String
			}
		case user.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				u.Avatar = value.String
			}
		case user.FieldBio:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bio", values[i])
			} else if value.Valid {
				u.Bio = value.String
			}
		case user.FieldIsAdmin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isAdmin", values[i])
			} else if value.Valid {
				u.IsAdmin = value.Bool
			}
		case user.FieldLastLoginIp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lastLoginIp", values[i])
			} else if value.Valid {
				u.LastLoginIp = value.String
			}
		case user.FieldGroupId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field groupId", values[i])
			} else if value.Valid {
				u.GroupId = value.String
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldLastLoginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastLoginAt", values[i])
			} else if value.Valid {
				u.LastLoginAt = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryBuckets queries the "buckets" edge of the User entity.
func (u *User) QueryBuckets() *BucketQuery {
	return NewUserClient(u.config).QueryBuckets(u)
}

// QueryFiles queries the "files" edge of the User entity.
func (u *User) QueryFiles() *FileQuery {
	return NewUserClient(u.config).QueryFiles(u)
}

// QueryImages queries the "images" edge of the User entity.
func (u *User) QueryImages() *ImageQuery {
	return NewUserClient(u.config).QueryImages(u)
}

// QueryKeeps queries the "keeps" edge of the User entity.
func (u *User) QueryKeeps() *KeepQuery {
	return NewUserClient(u.config).QueryKeeps(u)
}

// QueryMindmaps queries the "mindmaps" edge of the User entity.
func (u *User) QueryMindmaps() *MindmapQuery {
	return NewUserClient(u.config).QueryMindmaps(u)
}

// QueryMoments queries the "moments" edge of the User entity.
func (u *User) QueryMoments() *MomentQuery {
	return NewUserClient(u.config).QueryMoments(u)
}

// QueryTodos queries the "todos" edge of the User entity.
func (u *User) QueryTodos() *TodoQuery {
	return NewUserClient(u.config).QueryTodos(u)
}

// QueryGroup queries the "group" edge of the User entity.
func (u *User) QueryGroup() *GroupQuery {
	return NewUserClient(u.config).QueryGroup(u)
}

// QueryVideos queries the "videos" edge of the User entity.
func (u *User) QueryVideos() *VideoQuery {
	return NewUserClient(u.config).QueryVideos(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(u.Nickname)
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(u.Avatar)
	builder.WriteString(", ")
	builder.WriteString("bio=")
	builder.WriteString(u.Bio)
	builder.WriteString(", ")
	builder.WriteString("isAdmin=")
	builder.WriteString(fmt.Sprintf("%v", u.IsAdmin))
	builder.WriteString(", ")
	builder.WriteString("lastLoginIp=")
	builder.WriteString(u.LastLoginIp)
	builder.WriteString(", ")
	builder.WriteString("groupId=")
	builder.WriteString(u.GroupId)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("lastLoginAt=")
	builder.WriteString(u.LastLoginAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

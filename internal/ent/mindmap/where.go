// Code generated by ent, DO NOT EDIT.

package mindmap

import (
	"time"

	"api.us4ever/internal/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldContainsFold(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEQ(FieldTitle, v))
}

// Summary applies equality check predicate on the "summary" field. It's identical to SummaryEQ.
func Summary(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEQ(FieldSummary, v))
}

// IsPublic applies equality check predicate on the "isPublic" field. It's identical to IsPublicEQ.
func IsPublic(v bool) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEQ(FieldIsPublic, v))
}

// Views applies equality check predicate on the "views" field. It's identical to ViewsEQ.
func Views(v int32) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEQ(FieldViews, v))
}

// Likes applies equality check predicate on the "likes" field. It's identical to LikesEQ.
func Likes(v int32) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEQ(FieldLikes, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEQ(FieldCategory, v))
}

// OwnerId applies equality check predicate on the "ownerId" field. It's identical to OwnerIdEQ.
func OwnerId(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEQ(FieldOwnerId, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEQ(FieldUpdatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldContainsFold(FieldTitle, v))
}

// SummaryEQ applies the EQ predicate on the "summary" field.
func SummaryEQ(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEQ(FieldSummary, v))
}

// SummaryNEQ applies the NEQ predicate on the "summary" field.
func SummaryNEQ(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldNEQ(FieldSummary, v))
}

// SummaryIn applies the In predicate on the "summary" field.
func SummaryIn(vs ...string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldIn(FieldSummary, vs...))
}

// SummaryNotIn applies the NotIn predicate on the "summary" field.
func SummaryNotIn(vs ...string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldNotIn(FieldSummary, vs...))
}

// SummaryGT applies the GT predicate on the "summary" field.
func SummaryGT(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldGT(FieldSummary, v))
}

// SummaryGTE applies the GTE predicate on the "summary" field.
func SummaryGTE(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldGTE(FieldSummary, v))
}

// SummaryLT applies the LT predicate on the "summary" field.
func SummaryLT(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldLT(FieldSummary, v))
}

// SummaryLTE applies the LTE predicate on the "summary" field.
func SummaryLTE(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldLTE(FieldSummary, v))
}

// SummaryContains applies the Contains predicate on the "summary" field.
func SummaryContains(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldContains(FieldSummary, v))
}

// SummaryHasPrefix applies the HasPrefix predicate on the "summary" field.
func SummaryHasPrefix(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldHasPrefix(FieldSummary, v))
}

// SummaryHasSuffix applies the HasSuffix predicate on the "summary" field.
func SummaryHasSuffix(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldHasSuffix(FieldSummary, v))
}

// SummaryEqualFold applies the EqualFold predicate on the "summary" field.
func SummaryEqualFold(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEqualFold(FieldSummary, v))
}

// SummaryContainsFold applies the ContainsFold predicate on the "summary" field.
func SummaryContainsFold(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldContainsFold(FieldSummary, v))
}

// IsPublicEQ applies the EQ predicate on the "isPublic" field.
func IsPublicEQ(v bool) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEQ(FieldIsPublic, v))
}

// IsPublicNEQ applies the NEQ predicate on the "isPublic" field.
func IsPublicNEQ(v bool) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldNEQ(FieldIsPublic, v))
}

// ViewsEQ applies the EQ predicate on the "views" field.
func ViewsEQ(v int32) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEQ(FieldViews, v))
}

// ViewsNEQ applies the NEQ predicate on the "views" field.
func ViewsNEQ(v int32) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldNEQ(FieldViews, v))
}

// ViewsIn applies the In predicate on the "views" field.
func ViewsIn(vs ...int32) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldIn(FieldViews, vs...))
}

// ViewsNotIn applies the NotIn predicate on the "views" field.
func ViewsNotIn(vs ...int32) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldNotIn(FieldViews, vs...))
}

// ViewsGT applies the GT predicate on the "views" field.
func ViewsGT(v int32) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldGT(FieldViews, v))
}

// ViewsGTE applies the GTE predicate on the "views" field.
func ViewsGTE(v int32) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldGTE(FieldViews, v))
}

// ViewsLT applies the LT predicate on the "views" field.
func ViewsLT(v int32) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldLT(FieldViews, v))
}

// ViewsLTE applies the LTE predicate on the "views" field.
func ViewsLTE(v int32) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldLTE(FieldViews, v))
}

// LikesEQ applies the EQ predicate on the "likes" field.
func LikesEQ(v int32) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEQ(FieldLikes, v))
}

// LikesNEQ applies the NEQ predicate on the "likes" field.
func LikesNEQ(v int32) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldNEQ(FieldLikes, v))
}

// LikesIn applies the In predicate on the "likes" field.
func LikesIn(vs ...int32) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldIn(FieldLikes, vs...))
}

// LikesNotIn applies the NotIn predicate on the "likes" field.
func LikesNotIn(vs ...int32) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldNotIn(FieldLikes, vs...))
}

// LikesGT applies the GT predicate on the "likes" field.
func LikesGT(v int32) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldGT(FieldLikes, v))
}

// LikesGTE applies the GTE predicate on the "likes" field.
func LikesGTE(v int32) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldGTE(FieldLikes, v))
}

// LikesLT applies the LT predicate on the "likes" field.
func LikesLT(v int32) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldLT(FieldLikes, v))
}

// LikesLTE applies the LTE predicate on the "likes" field.
func LikesLTE(v int32) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldLTE(FieldLikes, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldContainsFold(FieldCategory, v))
}

// OwnerIdEQ applies the EQ predicate on the "ownerId" field.
func OwnerIdEQ(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEQ(FieldOwnerId, v))
}

// OwnerIdNEQ applies the NEQ predicate on the "ownerId" field.
func OwnerIdNEQ(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldNEQ(FieldOwnerId, v))
}

// OwnerIdIn applies the In predicate on the "ownerId" field.
func OwnerIdIn(vs ...string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldIn(FieldOwnerId, vs...))
}

// OwnerIdNotIn applies the NotIn predicate on the "ownerId" field.
func OwnerIdNotIn(vs ...string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldNotIn(FieldOwnerId, vs...))
}

// OwnerIdGT applies the GT predicate on the "ownerId" field.
func OwnerIdGT(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldGT(FieldOwnerId, v))
}

// OwnerIdGTE applies the GTE predicate on the "ownerId" field.
func OwnerIdGTE(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldGTE(FieldOwnerId, v))
}

// OwnerIdLT applies the LT predicate on the "ownerId" field.
func OwnerIdLT(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldLT(FieldOwnerId, v))
}

// OwnerIdLTE applies the LTE predicate on the "ownerId" field.
func OwnerIdLTE(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldLTE(FieldOwnerId, v))
}

// OwnerIdContains applies the Contains predicate on the "ownerId" field.
func OwnerIdContains(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldContains(FieldOwnerId, v))
}

// OwnerIdHasPrefix applies the HasPrefix predicate on the "ownerId" field.
func OwnerIdHasPrefix(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldHasPrefix(FieldOwnerId, v))
}

// OwnerIdHasSuffix applies the HasSuffix predicate on the "ownerId" field.
func OwnerIdHasSuffix(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldHasSuffix(FieldOwnerId, v))
}

// OwnerIdIsNil applies the IsNil predicate on the "ownerId" field.
func OwnerIdIsNil() predicate.Mindmap {
	return predicate.Mindmap(sql.FieldIsNull(FieldOwnerId))
}

// OwnerIdNotNil applies the NotNil predicate on the "ownerId" field.
func OwnerIdNotNil() predicate.Mindmap {
	return predicate.Mindmap(sql.FieldNotNull(FieldOwnerId))
}

// OwnerIdEqualFold applies the EqualFold predicate on the "ownerId" field.
func OwnerIdEqualFold(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEqualFold(FieldOwnerId, v))
}

// OwnerIdContainsFold applies the ContainsFold predicate on the "ownerId" field.
func OwnerIdContainsFold(v string) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldContainsFold(FieldOwnerId, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Mindmap {
	return predicate.Mindmap(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Mindmap {
	return predicate.Mindmap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Mindmap {
	return predicate.Mindmap(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Mindmap) predicate.Mindmap {
	return predicate.Mindmap(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Mindmap) predicate.Mindmap {
	return predicate.Mindmap(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Mindmap) predicate.Mindmap {
	return predicate.Mindmap(sql.NotPredicates(p))
}

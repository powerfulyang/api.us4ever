// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"api.us4ever/internal/ent/moment"
	"api.us4ever/internal/ent/momentvideo"
	"api.us4ever/internal/ent/predicate"
	"api.us4ever/internal/ent/video"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MomentVideoUpdate is the builder for updating MomentVideo entities.
type MomentVideoUpdate struct {
	config
	hooks    []Hook
	mutation *MomentVideoMutation
}

// Where appends a list predicates to the MomentVideoUpdate builder.
func (mvu *MomentVideoUpdate) Where(ps ...predicate.MomentVideo) *MomentVideoUpdate {
	mvu.mutation.Where(ps...)
	return mvu
}

// SetVideoId sets the "videoId" field.
func (mvu *MomentVideoUpdate) SetVideoId(s string) *MomentVideoUpdate {
	mvu.mutation.SetVideoId(s)
	return mvu
}

// SetNillableVideoId sets the "videoId" field if the given value is not nil.
func (mvu *MomentVideoUpdate) SetNillableVideoId(s *string) *MomentVideoUpdate {
	if s != nil {
		mvu.SetVideoId(*s)
	}
	return mvu
}

// ClearVideoId clears the value of the "videoId" field.
func (mvu *MomentVideoUpdate) ClearVideoId() *MomentVideoUpdate {
	mvu.mutation.ClearVideoId()
	return mvu
}

// SetMomentId sets the "momentId" field.
func (mvu *MomentVideoUpdate) SetMomentId(s string) *MomentVideoUpdate {
	mvu.mutation.SetMomentId(s)
	return mvu
}

// SetNillableMomentId sets the "momentId" field if the given value is not nil.
func (mvu *MomentVideoUpdate) SetNillableMomentId(s *string) *MomentVideoUpdate {
	if s != nil {
		mvu.SetMomentId(*s)
	}
	return mvu
}

// ClearMomentId clears the value of the "momentId" field.
func (mvu *MomentVideoUpdate) ClearMomentId() *MomentVideoUpdate {
	mvu.mutation.ClearMomentId()
	return mvu
}

// SetSort sets the "sort" field.
func (mvu *MomentVideoUpdate) SetSort(i int32) *MomentVideoUpdate {
	mvu.mutation.ResetSort()
	mvu.mutation.SetSort(i)
	return mvu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (mvu *MomentVideoUpdate) SetNillableSort(i *int32) *MomentVideoUpdate {
	if i != nil {
		mvu.SetSort(*i)
	}
	return mvu
}

// AddSort adds i to the "sort" field.
func (mvu *MomentVideoUpdate) AddSort(i int32) *MomentVideoUpdate {
	mvu.mutation.AddSort(i)
	return mvu
}

// SetCreatedAt sets the "createdAt" field.
func (mvu *MomentVideoUpdate) SetCreatedAt(t time.Time) *MomentVideoUpdate {
	mvu.mutation.SetCreatedAt(t)
	return mvu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (mvu *MomentVideoUpdate) SetNillableCreatedAt(t *time.Time) *MomentVideoUpdate {
	if t != nil {
		mvu.SetCreatedAt(*t)
	}
	return mvu
}

// SetUpdatedAt sets the "updatedAt" field.
func (mvu *MomentVideoUpdate) SetUpdatedAt(t time.Time) *MomentVideoUpdate {
	mvu.mutation.SetUpdatedAt(t)
	return mvu
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (mvu *MomentVideoUpdate) SetNillableUpdatedAt(t *time.Time) *MomentVideoUpdate {
	if t != nil {
		mvu.SetUpdatedAt(*t)
	}
	return mvu
}

// SetMomentID sets the "moment" edge to the Moment entity by ID.
func (mvu *MomentVideoUpdate) SetMomentID(id string) *MomentVideoUpdate {
	mvu.mutation.SetMomentID(id)
	return mvu
}

// SetNillableMomentID sets the "moment" edge to the Moment entity by ID if the given value is not nil.
func (mvu *MomentVideoUpdate) SetNillableMomentID(id *string) *MomentVideoUpdate {
	if id != nil {
		mvu = mvu.SetMomentID(*id)
	}
	return mvu
}

// SetMoment sets the "moment" edge to the Moment entity.
func (mvu *MomentVideoUpdate) SetMoment(m *Moment) *MomentVideoUpdate {
	return mvu.SetMomentID(m.ID)
}

// SetVideoID sets the "video" edge to the Video entity by ID.
func (mvu *MomentVideoUpdate) SetVideoID(id string) *MomentVideoUpdate {
	mvu.mutation.SetVideoID(id)
	return mvu
}

// SetNillableVideoID sets the "video" edge to the Video entity by ID if the given value is not nil.
func (mvu *MomentVideoUpdate) SetNillableVideoID(id *string) *MomentVideoUpdate {
	if id != nil {
		mvu = mvu.SetVideoID(*id)
	}
	return mvu
}

// SetVideo sets the "video" edge to the Video entity.
func (mvu *MomentVideoUpdate) SetVideo(v *Video) *MomentVideoUpdate {
	return mvu.SetVideoID(v.ID)
}

// Mutation returns the MomentVideoMutation object of the builder.
func (mvu *MomentVideoUpdate) Mutation() *MomentVideoMutation {
	return mvu.mutation
}

// ClearMoment clears the "moment" edge to the Moment entity.
func (mvu *MomentVideoUpdate) ClearMoment() *MomentVideoUpdate {
	mvu.mutation.ClearMoment()
	return mvu
}

// ClearVideo clears the "video" edge to the Video entity.
func (mvu *MomentVideoUpdate) ClearVideo() *MomentVideoUpdate {
	mvu.mutation.ClearVideo()
	return mvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mvu *MomentVideoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mvu.sqlSave, mvu.mutation, mvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mvu *MomentVideoUpdate) SaveX(ctx context.Context) int {
	affected, err := mvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mvu *MomentVideoUpdate) Exec(ctx context.Context) error {
	_, err := mvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvu *MomentVideoUpdate) ExecX(ctx context.Context) {
	if err := mvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mvu *MomentVideoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(momentvideo.Table, momentvideo.Columns, sqlgraph.NewFieldSpec(momentvideo.FieldID, field.TypeUint))
	if ps := mvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mvu.mutation.Sort(); ok {
		_spec.SetField(momentvideo.FieldSort, field.TypeInt32, value)
	}
	if value, ok := mvu.mutation.AddedSort(); ok {
		_spec.AddField(momentvideo.FieldSort, field.TypeInt32, value)
	}
	if value, ok := mvu.mutation.CreatedAt(); ok {
		_spec.SetField(momentvideo.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mvu.mutation.UpdatedAt(); ok {
		_spec.SetField(momentvideo.FieldUpdatedAt, field.TypeTime, value)
	}
	if mvu.mutation.MomentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   momentvideo.MomentTable,
			Columns: []string{momentvideo.MomentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvu.mutation.MomentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   momentvideo.MomentTable,
			Columns: []string{momentvideo.MomentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mvu.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   momentvideo.VideoTable,
			Columns: []string{momentvideo.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvu.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   momentvideo.VideoTable,
			Columns: []string{momentvideo.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{momentvideo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mvu.mutation.done = true
	return n, nil
}

// MomentVideoUpdateOne is the builder for updating a single MomentVideo entity.
type MomentVideoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MomentVideoMutation
}

// SetVideoId sets the "videoId" field.
func (mvuo *MomentVideoUpdateOne) SetVideoId(s string) *MomentVideoUpdateOne {
	mvuo.mutation.SetVideoId(s)
	return mvuo
}

// SetNillableVideoId sets the "videoId" field if the given value is not nil.
func (mvuo *MomentVideoUpdateOne) SetNillableVideoId(s *string) *MomentVideoUpdateOne {
	if s != nil {
		mvuo.SetVideoId(*s)
	}
	return mvuo
}

// ClearVideoId clears the value of the "videoId" field.
func (mvuo *MomentVideoUpdateOne) ClearVideoId() *MomentVideoUpdateOne {
	mvuo.mutation.ClearVideoId()
	return mvuo
}

// SetMomentId sets the "momentId" field.
func (mvuo *MomentVideoUpdateOne) SetMomentId(s string) *MomentVideoUpdateOne {
	mvuo.mutation.SetMomentId(s)
	return mvuo
}

// SetNillableMomentId sets the "momentId" field if the given value is not nil.
func (mvuo *MomentVideoUpdateOne) SetNillableMomentId(s *string) *MomentVideoUpdateOne {
	if s != nil {
		mvuo.SetMomentId(*s)
	}
	return mvuo
}

// ClearMomentId clears the value of the "momentId" field.
func (mvuo *MomentVideoUpdateOne) ClearMomentId() *MomentVideoUpdateOne {
	mvuo.mutation.ClearMomentId()
	return mvuo
}

// SetSort sets the "sort" field.
func (mvuo *MomentVideoUpdateOne) SetSort(i int32) *MomentVideoUpdateOne {
	mvuo.mutation.ResetSort()
	mvuo.mutation.SetSort(i)
	return mvuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (mvuo *MomentVideoUpdateOne) SetNillableSort(i *int32) *MomentVideoUpdateOne {
	if i != nil {
		mvuo.SetSort(*i)
	}
	return mvuo
}

// AddSort adds i to the "sort" field.
func (mvuo *MomentVideoUpdateOne) AddSort(i int32) *MomentVideoUpdateOne {
	mvuo.mutation.AddSort(i)
	return mvuo
}

// SetCreatedAt sets the "createdAt" field.
func (mvuo *MomentVideoUpdateOne) SetCreatedAt(t time.Time) *MomentVideoUpdateOne {
	mvuo.mutation.SetCreatedAt(t)
	return mvuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (mvuo *MomentVideoUpdateOne) SetNillableCreatedAt(t *time.Time) *MomentVideoUpdateOne {
	if t != nil {
		mvuo.SetCreatedAt(*t)
	}
	return mvuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (mvuo *MomentVideoUpdateOne) SetUpdatedAt(t time.Time) *MomentVideoUpdateOne {
	mvuo.mutation.SetUpdatedAt(t)
	return mvuo
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (mvuo *MomentVideoUpdateOne) SetNillableUpdatedAt(t *time.Time) *MomentVideoUpdateOne {
	if t != nil {
		mvuo.SetUpdatedAt(*t)
	}
	return mvuo
}

// SetMomentID sets the "moment" edge to the Moment entity by ID.
func (mvuo *MomentVideoUpdateOne) SetMomentID(id string) *MomentVideoUpdateOne {
	mvuo.mutation.SetMomentID(id)
	return mvuo
}

// SetNillableMomentID sets the "moment" edge to the Moment entity by ID if the given value is not nil.
func (mvuo *MomentVideoUpdateOne) SetNillableMomentID(id *string) *MomentVideoUpdateOne {
	if id != nil {
		mvuo = mvuo.SetMomentID(*id)
	}
	return mvuo
}

// SetMoment sets the "moment" edge to the Moment entity.
func (mvuo *MomentVideoUpdateOne) SetMoment(m *Moment) *MomentVideoUpdateOne {
	return mvuo.SetMomentID(m.ID)
}

// SetVideoID sets the "video" edge to the Video entity by ID.
func (mvuo *MomentVideoUpdateOne) SetVideoID(id string) *MomentVideoUpdateOne {
	mvuo.mutation.SetVideoID(id)
	return mvuo
}

// SetNillableVideoID sets the "video" edge to the Video entity by ID if the given value is not nil.
func (mvuo *MomentVideoUpdateOne) SetNillableVideoID(id *string) *MomentVideoUpdateOne {
	if id != nil {
		mvuo = mvuo.SetVideoID(*id)
	}
	return mvuo
}

// SetVideo sets the "video" edge to the Video entity.
func (mvuo *MomentVideoUpdateOne) SetVideo(v *Video) *MomentVideoUpdateOne {
	return mvuo.SetVideoID(v.ID)
}

// Mutation returns the MomentVideoMutation object of the builder.
func (mvuo *MomentVideoUpdateOne) Mutation() *MomentVideoMutation {
	return mvuo.mutation
}

// ClearMoment clears the "moment" edge to the Moment entity.
func (mvuo *MomentVideoUpdateOne) ClearMoment() *MomentVideoUpdateOne {
	mvuo.mutation.ClearMoment()
	return mvuo
}

// ClearVideo clears the "video" edge to the Video entity.
func (mvuo *MomentVideoUpdateOne) ClearVideo() *MomentVideoUpdateOne {
	mvuo.mutation.ClearVideo()
	return mvuo
}

// Where appends a list predicates to the MomentVideoUpdate builder.
func (mvuo *MomentVideoUpdateOne) Where(ps ...predicate.MomentVideo) *MomentVideoUpdateOne {
	mvuo.mutation.Where(ps...)
	return mvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mvuo *MomentVideoUpdateOne) Select(field string, fields ...string) *MomentVideoUpdateOne {
	mvuo.fields = append([]string{field}, fields...)
	return mvuo
}

// Save executes the query and returns the updated MomentVideo entity.
func (mvuo *MomentVideoUpdateOne) Save(ctx context.Context) (*MomentVideo, error) {
	return withHooks(ctx, mvuo.sqlSave, mvuo.mutation, mvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mvuo *MomentVideoUpdateOne) SaveX(ctx context.Context) *MomentVideo {
	node, err := mvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mvuo *MomentVideoUpdateOne) Exec(ctx context.Context) error {
	_, err := mvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvuo *MomentVideoUpdateOne) ExecX(ctx context.Context) {
	if err := mvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mvuo *MomentVideoUpdateOne) sqlSave(ctx context.Context) (_node *MomentVideo, err error) {
	_spec := sqlgraph.NewUpdateSpec(momentvideo.Table, momentvideo.Columns, sqlgraph.NewFieldSpec(momentvideo.FieldID, field.TypeUint))
	id, ok := mvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MomentVideo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, momentvideo.FieldID)
		for _, f := range fields {
			if !momentvideo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != momentvideo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mvuo.mutation.Sort(); ok {
		_spec.SetField(momentvideo.FieldSort, field.TypeInt32, value)
	}
	if value, ok := mvuo.mutation.AddedSort(); ok {
		_spec.AddField(momentvideo.FieldSort, field.TypeInt32, value)
	}
	if value, ok := mvuo.mutation.CreatedAt(); ok {
		_spec.SetField(momentvideo.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mvuo.mutation.UpdatedAt(); ok {
		_spec.SetField(momentvideo.FieldUpdatedAt, field.TypeTime, value)
	}
	if mvuo.mutation.MomentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   momentvideo.MomentTable,
			Columns: []string{momentvideo.MomentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvuo.mutation.MomentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   momentvideo.MomentTable,
			Columns: []string{momentvideo.MomentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mvuo.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   momentvideo.VideoTable,
			Columns: []string{momentvideo.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvuo.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   momentvideo.VideoTable,
			Columns: []string{momentvideo.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MomentVideo{config: mvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{momentvideo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mvuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"api.us4ever/internal/ent/file"
	"api.us4ever/internal/ent/user"
	"api.us4ever/internal/ent/video"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Video is the model entity for the Video schema.
type Video struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Size holds the value of the "size" field.
	Size int `json:"size,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration int32 `json:"duration,omitempty"`
	// IsPublic holds the value of the "isPublic" field.
	IsPublic bool `json:"isPublic,omitempty"`
	// ExtraData holds the value of the "extraData" field.
	ExtraData json.RawMessage `json:"extraData,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// PosterId holds the value of the "posterId" field.
	PosterId string `json:"posterId,omitempty"`
	// FileId holds the value of the "fileId" field.
	FileId string `json:"fileId,omitempty"`
	// UploadedBy holds the value of the "uploadedBy" field.
	UploadedBy string `json:"uploadedBy,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VideoQuery when eager-loading is set.
	Edges        VideoEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VideoEdges holds the relations/edges for other nodes in the graph.
type VideoEdges struct {
	// MomentVideos holds the value of the moment_videos edge.
	MomentVideos []*MomentVideo `json:"moment_videos,omitempty"`
	// File holds the value of the file edge.
	File *File `json:"file,omitempty"`
	// Poster holds the value of the poster edge.
	Poster *File `json:"poster,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// MomentVideosOrErr returns the MomentVideos value or an error if the edge
// was not loaded in eager-loading.
func (e VideoEdges) MomentVideosOrErr() ([]*MomentVideo, error) {
	if e.loadedTypes[0] {
		return e.MomentVideos, nil
	}
	return nil, &NotLoadedError{edge: "moment_videos"}
}

// FileOrErr returns the File value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VideoEdges) FileOrErr() (*File, error) {
	if e.File != nil {
		return e.File, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "file"}
}

// PosterOrErr returns the Poster value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VideoEdges) PosterOrErr() (*File, error) {
	if e.Poster != nil {
		return e.Poster, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "poster"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VideoEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Video) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case video.FieldExtraData:
			values[i] = new([]byte)
		case video.FieldIsPublic:
			values[i] = new(sql.NullBool)
		case video.FieldSize, video.FieldDuration:
			values[i] = new(sql.NullInt64)
		case video.FieldID, video.FieldName, video.FieldType, video.FieldHash, video.FieldCategory, video.FieldPosterId, video.FieldFileId, video.FieldUploadedBy:
			values[i] = new(sql.NullString)
		case video.FieldCreatedAt, video.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Video fields.
func (v *Video) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case video.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				v.ID = value.String
			}
		case video.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				v.Name = value.String
			}
		case video.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				v.Type = value.String
			}
		case video.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				v.Size = int(value.Int64)
			}
		case video.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				v.Hash = value.String
			}
		case video.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				v.Duration = int32(value.Int64)
			}
		case video.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isPublic", values[i])
			} else if value.Valid {
				v.IsPublic = value.Bool
			}
		case video.FieldExtraData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extraData", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &v.ExtraData); err != nil {
					return fmt.Errorf("unmarshal field extraData: %w", err)
				}
			}
		case video.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				v.Category = value.String
			}
		case video.FieldPosterId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field posterId", values[i])
			} else if value.Valid {
				v.PosterId = value.String
			}
		case video.FieldFileId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fileId", values[i])
			} else if value.Valid {
				v.FileId = value.String
			}
		case video.FieldUploadedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uploadedBy", values[i])
			} else if value.Valid {
				v.UploadedBy = value.String
			}
		case video.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case video.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Video.
// This includes values selected through modifiers, order, etc.
func (v *Video) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryMomentVideos queries the "moment_videos" edge of the Video entity.
func (v *Video) QueryMomentVideos() *MomentVideoQuery {
	return NewVideoClient(v.config).QueryMomentVideos(v)
}

// QueryFile queries the "file" edge of the Video entity.
func (v *Video) QueryFile() *FileQuery {
	return NewVideoClient(v.config).QueryFile(v)
}

// QueryPoster queries the "poster" edge of the Video entity.
func (v *Video) QueryPoster() *FileQuery {
	return NewVideoClient(v.config).QueryPoster(v)
}

// QueryUser queries the "user" edge of the Video entity.
func (v *Video) QueryUser() *UserQuery {
	return NewVideoClient(v.config).QueryUser(v)
}

// Update returns a builder for updating this Video.
// Note that you need to call Video.Unwrap() before calling this method if this Video
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Video) Update() *VideoUpdateOne {
	return NewVideoClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Video entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Video) Unwrap() *Video {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Video is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Video) String() string {
	var builder strings.Builder
	builder.WriteString("Video(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("name=")
	builder.WriteString(v.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(v.Type)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", v.Size))
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(v.Hash)
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", v.Duration))
	builder.WriteString(", ")
	builder.WriteString("isPublic=")
	builder.WriteString(fmt.Sprintf("%v", v.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("extraData=")
	builder.WriteString(fmt.Sprintf("%v", v.ExtraData))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(v.Category)
	builder.WriteString(", ")
	builder.WriteString("posterId=")
	builder.WriteString(v.PosterId)
	builder.WriteString(", ")
	builder.WriteString("fileId=")
	builder.WriteString(v.FileId)
	builder.WriteString(", ")
	builder.WriteString("uploadedBy=")
	builder.WriteString(v.UploadedBy)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Videos is a parsable slice of Video.
type Videos []*Video

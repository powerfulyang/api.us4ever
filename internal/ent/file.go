// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"api.us4ever/internal/ent/bucket"
	"api.us4ever/internal/ent/file"
	"api.us4ever/internal/ent/user"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// File is the model entity for the File schema.
type File struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// BucketId holds the value of the "bucketId" field.
	BucketId string `json:"bucketId,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Size holds the value of the "size" field.
	Size int `json:"size,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// IsPublic holds the value of the "isPublic" field.
	IsPublic bool `json:"isPublic,omitempty"`
	// UploadedBy holds the value of the "uploadedBy" field.
	UploadedBy string `json:"uploadedBy,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags json.RawMessage `json:"tags,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// ExtraData holds the value of the "extraData" field.
	ExtraData json.RawMessage `json:"extraData,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FileQuery when eager-loading is set.
	Edges        FileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FileEdges holds the relations/edges for other nodes in the graph.
type FileEdges struct {
	// Bucket holds the value of the bucket edge.
	Bucket *Bucket `json:"bucket,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// ImageCompressed holds the value of the Image_compressed edge.
	ImageCompressed []*Image `json:"Image_compressed,omitempty"`
	// ImageOriginal holds the value of the Image_original edge.
	ImageOriginal []*Image `json:"Image_original,omitempty"`
	// ImageThumbnail320x holds the value of the Image_thumbnail320x edge.
	ImageThumbnail320x []*Image `json:"Image_thumbnail320x,omitempty"`
	// ImageThumbnail768x holds the value of the Image_thumbnail768x edge.
	ImageThumbnail768x []*Image `json:"Image_thumbnail768x,omitempty"`
	// VideoFile holds the value of the Video_file edge.
	VideoFile []*Video `json:"Video_file,omitempty"`
	// VideoPoster holds the value of the Video_poster edge.
	VideoPoster []*Video `json:"Video_poster,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// BucketOrErr returns the Bucket value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FileEdges) BucketOrErr() (*Bucket, error) {
	if e.Bucket != nil {
		return e.Bucket, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: bucket.Label}
	}
	return nil, &NotLoadedError{edge: "bucket"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FileEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ImageCompressedOrErr returns the ImageCompressed value or an error if the edge
// was not loaded in eager-loading.
func (e FileEdges) ImageCompressedOrErr() ([]*Image, error) {
	if e.loadedTypes[2] {
		return e.ImageCompressed, nil
	}
	return nil, &NotLoadedError{edge: "Image_compressed"}
}

// ImageOriginalOrErr returns the ImageOriginal value or an error if the edge
// was not loaded in eager-loading.
func (e FileEdges) ImageOriginalOrErr() ([]*Image, error) {
	if e.loadedTypes[3] {
		return e.ImageOriginal, nil
	}
	return nil, &NotLoadedError{edge: "Image_original"}
}

// ImageThumbnail320xOrErr returns the ImageThumbnail320x value or an error if the edge
// was not loaded in eager-loading.
func (e FileEdges) ImageThumbnail320xOrErr() ([]*Image, error) {
	if e.loadedTypes[4] {
		return e.ImageThumbnail320x, nil
	}
	return nil, &NotLoadedError{edge: "Image_thumbnail320x"}
}

// ImageThumbnail768xOrErr returns the ImageThumbnail768x value or an error if the edge
// was not loaded in eager-loading.
func (e FileEdges) ImageThumbnail768xOrErr() ([]*Image, error) {
	if e.loadedTypes[5] {
		return e.ImageThumbnail768x, nil
	}
	return nil, &NotLoadedError{edge: "Image_thumbnail768x"}
}

// VideoFileOrErr returns the VideoFile value or an error if the edge
// was not loaded in eager-loading.
func (e FileEdges) VideoFileOrErr() ([]*Video, error) {
	if e.loadedTypes[6] {
		return e.VideoFile, nil
	}
	return nil, &NotLoadedError{edge: "Video_file"}
}

// VideoPosterOrErr returns the VideoPoster value or an error if the edge
// was not loaded in eager-loading.
func (e FileEdges) VideoPosterOrErr() ([]*Video, error) {
	if e.loadedTypes[7] {
		return e.VideoPoster, nil
	}
	return nil, &NotLoadedError{edge: "Video_poster"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*File) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case file.FieldTags, file.FieldExtraData:
			values[i] = new([]byte)
		case file.FieldIsPublic:
			values[i] = new(sql.NullBool)
		case file.FieldSize:
			values[i] = new(sql.NullInt64)
		case file.FieldID, file.FieldBucketId, file.FieldName, file.FieldType, file.FieldHash, file.FieldPath, file.FieldUploadedBy, file.FieldDescription, file.FieldCategory:
			values[i] = new(sql.NullString)
		case file.FieldCreatedAt, file.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the File fields.
func (f *File) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case file.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				f.ID = value.String
			}
		case file.FieldBucketId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bucketId", values[i])
			} else if value.Valid {
				f.BucketId = value.String
			}
		case file.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case file.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				f.Type = value.String
			}
		case file.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				f.Hash = value.String
			}
		case file.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				f.Size = int(value.Int64)
			}
		case file.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				f.Path = value.String
			}
		case file.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isPublic", values[i])
			} else if value.Valid {
				f.IsPublic = value.Bool
			}
		case file.FieldUploadedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uploadedBy", values[i])
			} else if value.Valid {
				f.UploadedBy = value.String
			}
		case file.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				f.Description = value.String
			}
		case file.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &f.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case file.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case file.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		case file.FieldExtraData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extraData", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &f.ExtraData); err != nil {
					return fmt.Errorf("unmarshal field extraData: %w", err)
				}
			}
		case file.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				f.Category = value.String
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the File.
// This includes values selected through modifiers, order, etc.
func (f *File) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryBucket queries the "bucket" edge of the File entity.
func (f *File) QueryBucket() *BucketQuery {
	return NewFileClient(f.config).QueryBucket(f)
}

// QueryUser queries the "user" edge of the File entity.
func (f *File) QueryUser() *UserQuery {
	return NewFileClient(f.config).QueryUser(f)
}

// QueryImageCompressed queries the "Image_compressed" edge of the File entity.
func (f *File) QueryImageCompressed() *ImageQuery {
	return NewFileClient(f.config).QueryImageCompressed(f)
}

// QueryImageOriginal queries the "Image_original" edge of the File entity.
func (f *File) QueryImageOriginal() *ImageQuery {
	return NewFileClient(f.config).QueryImageOriginal(f)
}

// QueryImageThumbnail320x queries the "Image_thumbnail320x" edge of the File entity.
func (f *File) QueryImageThumbnail320x() *ImageQuery {
	return NewFileClient(f.config).QueryImageThumbnail320x(f)
}

// QueryImageThumbnail768x queries the "Image_thumbnail768x" edge of the File entity.
func (f *File) QueryImageThumbnail768x() *ImageQuery {
	return NewFileClient(f.config).QueryImageThumbnail768x(f)
}

// QueryVideoFile queries the "Video_file" edge of the File entity.
func (f *File) QueryVideoFile() *VideoQuery {
	return NewFileClient(f.config).QueryVideoFile(f)
}

// QueryVideoPoster queries the "Video_poster" edge of the File entity.
func (f *File) QueryVideoPoster() *VideoQuery {
	return NewFileClient(f.config).QueryVideoPoster(f)
}

// Update returns a builder for updating this File.
// Note that you need to call File.Unwrap() before calling this method if this File
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *File) Update() *FileUpdateOne {
	return NewFileClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the File entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *File) Unwrap() *File {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: File is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *File) String() string {
	var builder strings.Builder
	builder.WriteString("File(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("bucketId=")
	builder.WriteString(f.BucketId)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(f.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(f.Type)
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(f.Hash)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", f.Size))
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(f.Path)
	builder.WriteString(", ")
	builder.WriteString("isPublic=")
	builder.WriteString(fmt.Sprintf("%v", f.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("uploadedBy=")
	builder.WriteString(f.UploadedBy)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(f.Description)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", f.Tags))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("extraData=")
	builder.WriteString(fmt.Sprintf("%v", f.ExtraData))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(f.Category)
	builder.WriteByte(')')
	return builder.String()
}

// Files is a parsable slice of File.
type Files []*File

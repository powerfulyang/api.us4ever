// Code generated by ent, DO NOT EDIT.

package image

import (
	"time"

	"api.us4ever/internal/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldType, v))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v int) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldSize, v))
}

// Width applies equality check predicate on the "width" field. It's identical to WidthEQ.
func Width(v int32) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldWidth, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v int32) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldHeight, v))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldHash, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldAddress, v))
}

// IsPublic applies equality check predicate on the "isPublic" field. It's identical to IsPublicEQ.
func IsPublic(v bool) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldIsPublic, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldDescription, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldCategory, v))
}

// Thumbnail10x applies equality check predicate on the "thumbnail_10x" field. It's identical to Thumbnail10xEQ.
func Thumbnail10x(v []byte) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldThumbnail10x, v))
}

// Thumbnail320xID applies equality check predicate on the "thumbnail_320x_id" field. It's identical to Thumbnail320xIDEQ.
func Thumbnail320xID(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldThumbnail320xID, v))
}

// Thumbnail768xID applies equality check predicate on the "thumbnail_768x_id" field. It's identical to Thumbnail768xIDEQ.
func Thumbnail768xID(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldThumbnail768xID, v))
}

// CompressedID applies equality check predicate on the "compressed_id" field. It's identical to CompressedIDEQ.
func CompressedID(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldCompressedID, v))
}

// OriginalID applies equality check predicate on the "original_id" field. It's identical to OriginalIDEQ.
func OriginalID(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldOriginalID, v))
}

// UploadedBy applies equality check predicate on the "uploadedBy" field. It's identical to UploadedByEQ.
func UploadedBy(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldUploadedBy, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldType, v))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v int) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v int) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...int) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...int) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v int) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v int) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v int) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v int) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldSize, v))
}

// WidthEQ applies the EQ predicate on the "width" field.
func WidthEQ(v int32) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldWidth, v))
}

// WidthNEQ applies the NEQ predicate on the "width" field.
func WidthNEQ(v int32) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldWidth, v))
}

// WidthIn applies the In predicate on the "width" field.
func WidthIn(vs ...int32) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldWidth, vs...))
}

// WidthNotIn applies the NotIn predicate on the "width" field.
func WidthNotIn(vs ...int32) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldWidth, vs...))
}

// WidthGT applies the GT predicate on the "width" field.
func WidthGT(v int32) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldWidth, v))
}

// WidthGTE applies the GTE predicate on the "width" field.
func WidthGTE(v int32) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldWidth, v))
}

// WidthLT applies the LT predicate on the "width" field.
func WidthLT(v int32) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldWidth, v))
}

// WidthLTE applies the LTE predicate on the "width" field.
func WidthLTE(v int32) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldWidth, v))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v int32) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v int32) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...int32) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...int32) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v int32) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v int32) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v int32) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v int32) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldHeight, v))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldHash, v))
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldHash, v))
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldHash, v))
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldHash, v))
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldHash, v))
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldHash, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldAddress, v))
}

// IsPublicEQ applies the EQ predicate on the "isPublic" field.
func IsPublicEQ(v bool) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldIsPublic, v))
}

// IsPublicNEQ applies the NEQ predicate on the "isPublic" field.
func IsPublicNEQ(v bool) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldIsPublic, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldDescription, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldCategory, v))
}

// Thumbnail10xEQ applies the EQ predicate on the "thumbnail_10x" field.
func Thumbnail10xEQ(v []byte) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldThumbnail10x, v))
}

// Thumbnail10xNEQ applies the NEQ predicate on the "thumbnail_10x" field.
func Thumbnail10xNEQ(v []byte) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldThumbnail10x, v))
}

// Thumbnail10xIn applies the In predicate on the "thumbnail_10x" field.
func Thumbnail10xIn(vs ...[]byte) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldThumbnail10x, vs...))
}

// Thumbnail10xNotIn applies the NotIn predicate on the "thumbnail_10x" field.
func Thumbnail10xNotIn(vs ...[]byte) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldThumbnail10x, vs...))
}

// Thumbnail10xGT applies the GT predicate on the "thumbnail_10x" field.
func Thumbnail10xGT(v []byte) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldThumbnail10x, v))
}

// Thumbnail10xGTE applies the GTE predicate on the "thumbnail_10x" field.
func Thumbnail10xGTE(v []byte) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldThumbnail10x, v))
}

// Thumbnail10xLT applies the LT predicate on the "thumbnail_10x" field.
func Thumbnail10xLT(v []byte) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldThumbnail10x, v))
}

// Thumbnail10xLTE applies the LTE predicate on the "thumbnail_10x" field.
func Thumbnail10xLTE(v []byte) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldThumbnail10x, v))
}

// Thumbnail320xIDEQ applies the EQ predicate on the "thumbnail_320x_id" field.
func Thumbnail320xIDEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldThumbnail320xID, v))
}

// Thumbnail320xIDNEQ applies the NEQ predicate on the "thumbnail_320x_id" field.
func Thumbnail320xIDNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldThumbnail320xID, v))
}

// Thumbnail320xIDIn applies the In predicate on the "thumbnail_320x_id" field.
func Thumbnail320xIDIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldThumbnail320xID, vs...))
}

// Thumbnail320xIDNotIn applies the NotIn predicate on the "thumbnail_320x_id" field.
func Thumbnail320xIDNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldThumbnail320xID, vs...))
}

// Thumbnail320xIDGT applies the GT predicate on the "thumbnail_320x_id" field.
func Thumbnail320xIDGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldThumbnail320xID, v))
}

// Thumbnail320xIDGTE applies the GTE predicate on the "thumbnail_320x_id" field.
func Thumbnail320xIDGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldThumbnail320xID, v))
}

// Thumbnail320xIDLT applies the LT predicate on the "thumbnail_320x_id" field.
func Thumbnail320xIDLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldThumbnail320xID, v))
}

// Thumbnail320xIDLTE applies the LTE predicate on the "thumbnail_320x_id" field.
func Thumbnail320xIDLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldThumbnail320xID, v))
}

// Thumbnail320xIDContains applies the Contains predicate on the "thumbnail_320x_id" field.
func Thumbnail320xIDContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldThumbnail320xID, v))
}

// Thumbnail320xIDHasPrefix applies the HasPrefix predicate on the "thumbnail_320x_id" field.
func Thumbnail320xIDHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldThumbnail320xID, v))
}

// Thumbnail320xIDHasSuffix applies the HasSuffix predicate on the "thumbnail_320x_id" field.
func Thumbnail320xIDHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldThumbnail320xID, v))
}

// Thumbnail320xIDIsNil applies the IsNil predicate on the "thumbnail_320x_id" field.
func Thumbnail320xIDIsNil() predicate.Image {
	return predicate.Image(sql.FieldIsNull(FieldThumbnail320xID))
}

// Thumbnail320xIDNotNil applies the NotNil predicate on the "thumbnail_320x_id" field.
func Thumbnail320xIDNotNil() predicate.Image {
	return predicate.Image(sql.FieldNotNull(FieldThumbnail320xID))
}

// Thumbnail320xIDEqualFold applies the EqualFold predicate on the "thumbnail_320x_id" field.
func Thumbnail320xIDEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldThumbnail320xID, v))
}

// Thumbnail320xIDContainsFold applies the ContainsFold predicate on the "thumbnail_320x_id" field.
func Thumbnail320xIDContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldThumbnail320xID, v))
}

// Thumbnail768xIDEQ applies the EQ predicate on the "thumbnail_768x_id" field.
func Thumbnail768xIDEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldThumbnail768xID, v))
}

// Thumbnail768xIDNEQ applies the NEQ predicate on the "thumbnail_768x_id" field.
func Thumbnail768xIDNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldThumbnail768xID, v))
}

// Thumbnail768xIDIn applies the In predicate on the "thumbnail_768x_id" field.
func Thumbnail768xIDIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldThumbnail768xID, vs...))
}

// Thumbnail768xIDNotIn applies the NotIn predicate on the "thumbnail_768x_id" field.
func Thumbnail768xIDNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldThumbnail768xID, vs...))
}

// Thumbnail768xIDGT applies the GT predicate on the "thumbnail_768x_id" field.
func Thumbnail768xIDGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldThumbnail768xID, v))
}

// Thumbnail768xIDGTE applies the GTE predicate on the "thumbnail_768x_id" field.
func Thumbnail768xIDGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldThumbnail768xID, v))
}

// Thumbnail768xIDLT applies the LT predicate on the "thumbnail_768x_id" field.
func Thumbnail768xIDLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldThumbnail768xID, v))
}

// Thumbnail768xIDLTE applies the LTE predicate on the "thumbnail_768x_id" field.
func Thumbnail768xIDLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldThumbnail768xID, v))
}

// Thumbnail768xIDContains applies the Contains predicate on the "thumbnail_768x_id" field.
func Thumbnail768xIDContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldThumbnail768xID, v))
}

// Thumbnail768xIDHasPrefix applies the HasPrefix predicate on the "thumbnail_768x_id" field.
func Thumbnail768xIDHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldThumbnail768xID, v))
}

// Thumbnail768xIDHasSuffix applies the HasSuffix predicate on the "thumbnail_768x_id" field.
func Thumbnail768xIDHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldThumbnail768xID, v))
}

// Thumbnail768xIDIsNil applies the IsNil predicate on the "thumbnail_768x_id" field.
func Thumbnail768xIDIsNil() predicate.Image {
	return predicate.Image(sql.FieldIsNull(FieldThumbnail768xID))
}

// Thumbnail768xIDNotNil applies the NotNil predicate on the "thumbnail_768x_id" field.
func Thumbnail768xIDNotNil() predicate.Image {
	return predicate.Image(sql.FieldNotNull(FieldThumbnail768xID))
}

// Thumbnail768xIDEqualFold applies the EqualFold predicate on the "thumbnail_768x_id" field.
func Thumbnail768xIDEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldThumbnail768xID, v))
}

// Thumbnail768xIDContainsFold applies the ContainsFold predicate on the "thumbnail_768x_id" field.
func Thumbnail768xIDContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldThumbnail768xID, v))
}

// CompressedIDEQ applies the EQ predicate on the "compressed_id" field.
func CompressedIDEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldCompressedID, v))
}

// CompressedIDNEQ applies the NEQ predicate on the "compressed_id" field.
func CompressedIDNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldCompressedID, v))
}

// CompressedIDIn applies the In predicate on the "compressed_id" field.
func CompressedIDIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldCompressedID, vs...))
}

// CompressedIDNotIn applies the NotIn predicate on the "compressed_id" field.
func CompressedIDNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldCompressedID, vs...))
}

// CompressedIDGT applies the GT predicate on the "compressed_id" field.
func CompressedIDGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldCompressedID, v))
}

// CompressedIDGTE applies the GTE predicate on the "compressed_id" field.
func CompressedIDGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldCompressedID, v))
}

// CompressedIDLT applies the LT predicate on the "compressed_id" field.
func CompressedIDLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldCompressedID, v))
}

// CompressedIDLTE applies the LTE predicate on the "compressed_id" field.
func CompressedIDLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldCompressedID, v))
}

// CompressedIDContains applies the Contains predicate on the "compressed_id" field.
func CompressedIDContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldCompressedID, v))
}

// CompressedIDHasPrefix applies the HasPrefix predicate on the "compressed_id" field.
func CompressedIDHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldCompressedID, v))
}

// CompressedIDHasSuffix applies the HasSuffix predicate on the "compressed_id" field.
func CompressedIDHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldCompressedID, v))
}

// CompressedIDIsNil applies the IsNil predicate on the "compressed_id" field.
func CompressedIDIsNil() predicate.Image {
	return predicate.Image(sql.FieldIsNull(FieldCompressedID))
}

// CompressedIDNotNil applies the NotNil predicate on the "compressed_id" field.
func CompressedIDNotNil() predicate.Image {
	return predicate.Image(sql.FieldNotNull(FieldCompressedID))
}

// CompressedIDEqualFold applies the EqualFold predicate on the "compressed_id" field.
func CompressedIDEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldCompressedID, v))
}

// CompressedIDContainsFold applies the ContainsFold predicate on the "compressed_id" field.
func CompressedIDContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldCompressedID, v))
}

// OriginalIDEQ applies the EQ predicate on the "original_id" field.
func OriginalIDEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldOriginalID, v))
}

// OriginalIDNEQ applies the NEQ predicate on the "original_id" field.
func OriginalIDNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldOriginalID, v))
}

// OriginalIDIn applies the In predicate on the "original_id" field.
func OriginalIDIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldOriginalID, vs...))
}

// OriginalIDNotIn applies the NotIn predicate on the "original_id" field.
func OriginalIDNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldOriginalID, vs...))
}

// OriginalIDGT applies the GT predicate on the "original_id" field.
func OriginalIDGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldOriginalID, v))
}

// OriginalIDGTE applies the GTE predicate on the "original_id" field.
func OriginalIDGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldOriginalID, v))
}

// OriginalIDLT applies the LT predicate on the "original_id" field.
func OriginalIDLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldOriginalID, v))
}

// OriginalIDLTE applies the LTE predicate on the "original_id" field.
func OriginalIDLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldOriginalID, v))
}

// OriginalIDContains applies the Contains predicate on the "original_id" field.
func OriginalIDContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldOriginalID, v))
}

// OriginalIDHasPrefix applies the HasPrefix predicate on the "original_id" field.
func OriginalIDHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldOriginalID, v))
}

// OriginalIDHasSuffix applies the HasSuffix predicate on the "original_id" field.
func OriginalIDHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldOriginalID, v))
}

// OriginalIDIsNil applies the IsNil predicate on the "original_id" field.
func OriginalIDIsNil() predicate.Image {
	return predicate.Image(sql.FieldIsNull(FieldOriginalID))
}

// OriginalIDNotNil applies the NotNil predicate on the "original_id" field.
func OriginalIDNotNil() predicate.Image {
	return predicate.Image(sql.FieldNotNull(FieldOriginalID))
}

// OriginalIDEqualFold applies the EqualFold predicate on the "original_id" field.
func OriginalIDEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldOriginalID, v))
}

// OriginalIDContainsFold applies the ContainsFold predicate on the "original_id" field.
func OriginalIDContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldOriginalID, v))
}

// UploadedByEQ applies the EQ predicate on the "uploadedBy" field.
func UploadedByEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldUploadedBy, v))
}

// UploadedByNEQ applies the NEQ predicate on the "uploadedBy" field.
func UploadedByNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldUploadedBy, v))
}

// UploadedByIn applies the In predicate on the "uploadedBy" field.
func UploadedByIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldUploadedBy, vs...))
}

// UploadedByNotIn applies the NotIn predicate on the "uploadedBy" field.
func UploadedByNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldUploadedBy, vs...))
}

// UploadedByGT applies the GT predicate on the "uploadedBy" field.
func UploadedByGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldUploadedBy, v))
}

// UploadedByGTE applies the GTE predicate on the "uploadedBy" field.
func UploadedByGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldUploadedBy, v))
}

// UploadedByLT applies the LT predicate on the "uploadedBy" field.
func UploadedByLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldUploadedBy, v))
}

// UploadedByLTE applies the LTE predicate on the "uploadedBy" field.
func UploadedByLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldUploadedBy, v))
}

// UploadedByContains applies the Contains predicate on the "uploadedBy" field.
func UploadedByContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldUploadedBy, v))
}

// UploadedByHasPrefix applies the HasPrefix predicate on the "uploadedBy" field.
func UploadedByHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldUploadedBy, v))
}

// UploadedByHasSuffix applies the HasSuffix predicate on the "uploadedBy" field.
func UploadedByHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldUploadedBy, v))
}

// UploadedByIsNil applies the IsNil predicate on the "uploadedBy" field.
func UploadedByIsNil() predicate.Image {
	return predicate.Image(sql.FieldIsNull(FieldUploadedBy))
}

// UploadedByNotNil applies the NotNil predicate on the "uploadedBy" field.
func UploadedByNotNil() predicate.Image {
	return predicate.Image(sql.FieldNotNull(FieldUploadedBy))
}

// UploadedByEqualFold applies the EqualFold predicate on the "uploadedBy" field.
func UploadedByEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldUploadedBy, v))
}

// UploadedByContainsFold applies the ContainsFold predicate on the "uploadedBy" field.
func UploadedByContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldUploadedBy, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasCompressed applies the HasEdge predicate on the "compressed" edge.
func HasCompressed() predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompressedTable, CompressedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompressedWith applies the HasEdge predicate on the "compressed" edge with a given conditions (other predicates).
func HasCompressedWith(preds ...predicate.File) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := newCompressedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOriginal applies the HasEdge predicate on the "original" edge.
func HasOriginal() predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OriginalTable, OriginalColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOriginalWith applies the HasEdge predicate on the "original" edge with a given conditions (other predicates).
func HasOriginalWith(preds ...predicate.File) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := newOriginalStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasThumbnail320x applies the HasEdge predicate on the "thumbnail320x" edge.
func HasThumbnail320x() predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, Thumbnail320xTable, Thumbnail320xColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasThumbnail320xWith applies the HasEdge predicate on the "thumbnail320x" edge with a given conditions (other predicates).
func HasThumbnail320xWith(preds ...predicate.File) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := newThumbnail320xStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasThumbnail768x applies the HasEdge predicate on the "thumbnail768x" edge.
func HasThumbnail768x() predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, Thumbnail768xTable, Thumbnail768xColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasThumbnail768xWith applies the HasEdge predicate on the "thumbnail768x" edge with a given conditions (other predicates).
func HasThumbnail768xWith(preds ...predicate.File) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := newThumbnail768xStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMomentImages applies the HasEdge predicate on the "moment_images" edge.
func HasMomentImages() predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MomentImagesTable, MomentImagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMomentImagesWith applies the HasEdge predicate on the "moment_images" edge with a given conditions (other predicates).
func HasMomentImagesWith(preds ...predicate.MomentImage) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := newMomentImagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Image) predicate.Image {
	return predicate.Image(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Image) predicate.Image {
	return predicate.Image(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Image) predicate.Image {
	return predicate.Image(sql.NotPredicates(p))
}

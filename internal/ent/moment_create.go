// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"api.us4ever/internal/ent/moment"
	"api.us4ever/internal/ent/momentimage"
	"api.us4ever/internal/ent/momentvideo"
	"api.us4ever/internal/ent/user"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MomentCreate is the builder for creating a Moment entity.
type MomentCreate struct {
	config
	mutation *MomentMutation
	hooks    []Hook
}

// SetContent sets the "content" field.
func (mc *MomentCreate) SetContent(s string) *MomentCreate {
	mc.mutation.SetContent(s)
	return mc
}

// SetCategory sets the "category" field.
func (mc *MomentCreate) SetCategory(s string) *MomentCreate {
	mc.mutation.SetCategory(s)
	return mc
}

// SetCreatedAt sets the "createdAt" field.
func (mc *MomentCreate) SetCreatedAt(t time.Time) *MomentCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetUpdatedAt sets the "updatedAt" field.
func (mc *MomentCreate) SetUpdatedAt(t time.Time) *MomentCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetOwnerId sets the "ownerId" field.
func (mc *MomentCreate) SetOwnerId(s string) *MomentCreate {
	mc.mutation.SetOwnerId(s)
	return mc
}

// SetNillableOwnerId sets the "ownerId" field if the given value is not nil.
func (mc *MomentCreate) SetNillableOwnerId(s *string) *MomentCreate {
	if s != nil {
		mc.SetOwnerId(*s)
	}
	return mc
}

// SetIsPublic sets the "isPublic" field.
func (mc *MomentCreate) SetIsPublic(b bool) *MomentCreate {
	mc.mutation.SetIsPublic(b)
	return mc
}

// SetLikes sets the "likes" field.
func (mc *MomentCreate) SetLikes(i int32) *MomentCreate {
	mc.mutation.SetLikes(i)
	return mc
}

// SetTags sets the "tags" field.
func (mc *MomentCreate) SetTags(jm json.RawMessage) *MomentCreate {
	mc.mutation.SetTags(jm)
	return mc
}

// SetViews sets the "views" field.
func (mc *MomentCreate) SetViews(i int32) *MomentCreate {
	mc.mutation.SetViews(i)
	return mc
}

// SetExtraData sets the "extraData" field.
func (mc *MomentCreate) SetExtraData(jm json.RawMessage) *MomentCreate {
	mc.mutation.SetExtraData(jm)
	return mc
}

// SetContentVector sets the "content_vector" field.
func (mc *MomentCreate) SetContentVector(jm json.RawMessage) *MomentCreate {
	mc.mutation.SetContentVector(jm)
	return mc
}

// SetID sets the "id" field.
func (mc *MomentCreate) SetID(s string) *MomentCreate {
	mc.mutation.SetID(s)
	return mc
}

// AddMomentImageIDs adds the "moment_images" edge to the MomentImage entity by IDs.
func (mc *MomentCreate) AddMomentImageIDs(ids ...uint) *MomentCreate {
	mc.mutation.AddMomentImageIDs(ids...)
	return mc
}

// AddMomentImages adds the "moment_images" edges to the MomentImage entity.
func (mc *MomentCreate) AddMomentImages(m ...*MomentImage) *MomentCreate {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddMomentImageIDs(ids...)
}

// AddMomentVideoIDs adds the "moment_videos" edge to the MomentVideo entity by IDs.
func (mc *MomentCreate) AddMomentVideoIDs(ids ...uint) *MomentCreate {
	mc.mutation.AddMomentVideoIDs(ids...)
	return mc
}

// AddMomentVideos adds the "moment_videos" edges to the MomentVideo entity.
func (mc *MomentCreate) AddMomentVideos(m ...*MomentVideo) *MomentCreate {
	ids := make([]uint, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddMomentVideoIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mc *MomentCreate) SetUserID(id string) *MomentCreate {
	mc.mutation.SetUserID(id)
	return mc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (mc *MomentCreate) SetNillableUserID(id *string) *MomentCreate {
	if id != nil {
		mc = mc.SetUserID(*id)
	}
	return mc
}

// SetUser sets the "user" edge to the User entity.
func (mc *MomentCreate) SetUser(u *User) *MomentCreate {
	return mc.SetUserID(u.ID)
}

// Mutation returns the MomentMutation object of the builder.
func (mc *MomentCreate) Mutation() *MomentMutation {
	return mc.mutation
}

// Save creates the Moment in the database.
func (mc *MomentCreate) Save(ctx context.Context) (*Moment, error) {
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MomentCreate) SaveX(ctx context.Context) *Moment {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MomentCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MomentCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MomentCreate) check() error {
	if _, ok := mc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Moment.content"`)}
	}
	if _, ok := mc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "Moment.category"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Moment.createdAt"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "Moment.updatedAt"`)}
	}
	if _, ok := mc.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "isPublic", err: errors.New(`ent: missing required field "Moment.isPublic"`)}
	}
	if _, ok := mc.mutation.Likes(); !ok {
		return &ValidationError{Name: "likes", err: errors.New(`ent: missing required field "Moment.likes"`)}
	}
	if _, ok := mc.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "Moment.tags"`)}
	}
	if _, ok := mc.mutation.Views(); !ok {
		return &ValidationError{Name: "views", err: errors.New(`ent: missing required field "Moment.views"`)}
	}
	if _, ok := mc.mutation.ExtraData(); !ok {
		return &ValidationError{Name: "extraData", err: errors.New(`ent: missing required field "Moment.extraData"`)}
	}
	return nil
}

func (mc *MomentCreate) sqlSave(ctx context.Context) (*Moment, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Moment.ID type: %T", _spec.ID.Value)
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MomentCreate) createSpec() (*Moment, *sqlgraph.CreateSpec) {
	var (
		_node = &Moment{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(moment.Table, sqlgraph.NewFieldSpec(moment.FieldID, field.TypeString))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.Content(); ok {
		_spec.SetField(moment.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := mc.mutation.Category(); ok {
		_spec.SetField(moment.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(moment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(moment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.IsPublic(); ok {
		_spec.SetField(moment.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := mc.mutation.Likes(); ok {
		_spec.SetField(moment.FieldLikes, field.TypeInt32, value)
		_node.Likes = value
	}
	if value, ok := mc.mutation.Tags(); ok {
		_spec.SetField(moment.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := mc.mutation.Views(); ok {
		_spec.SetField(moment.FieldViews, field.TypeInt32, value)
		_node.Views = value
	}
	if value, ok := mc.mutation.ExtraData(); ok {
		_spec.SetField(moment.FieldExtraData, field.TypeJSON, value)
		_node.ExtraData = value
	}
	if value, ok := mc.mutation.ContentVector(); ok {
		_spec.SetField(moment.FieldContentVector, field.TypeJSON, value)
		_node.ContentVector = value
	}
	if nodes := mc.mutation.MomentImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moment.MomentImagesTable,
			Columns: []string{moment.MomentImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentimage.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MomentVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moment.MomentVideosTable,
			Columns: []string{moment.MomentVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(momentvideo.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moment.UserTable,
			Columns: []string{moment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MomentCreateBulk is the builder for creating many Moment entities in bulk.
type MomentCreateBulk struct {
	config
	err      error
	builders []*MomentCreate
}

// Save creates the Moment entities in the database.
func (mcb *MomentCreateBulk) Save(ctx context.Context) ([]*Moment, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Moment, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MomentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MomentCreateBulk) SaveX(ctx context.Context) []*Moment {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MomentCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MomentCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"api.us4ever/internal/ent/moment"
	"api.us4ever/internal/ent/user"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Moment is the model entity for the Moment schema.
type Moment struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// OwnerId holds the value of the "ownerId" field.
	OwnerId string `json:"ownerId,omitempty"`
	// IsPublic holds the value of the "isPublic" field.
	IsPublic bool `json:"isPublic,omitempty"`
	// Likes holds the value of the "likes" field.
	Likes int32 `json:"likes,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags json.RawMessage `json:"tags,omitempty"`
	// Views holds the value of the "views" field.
	Views int32 `json:"views,omitempty"`
	// ExtraData holds the value of the "extraData" field.
	ExtraData json.RawMessage `json:"extraData,omitempty"`
	// ContentVector holds the value of the "content_vector" field.
	ContentVector json.RawMessage `json:"content_vector,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MomentQuery when eager-loading is set.
	Edges        MomentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MomentEdges holds the relations/edges for other nodes in the graph.
type MomentEdges struct {
	// MomentImages holds the value of the moment_images edge.
	MomentImages []*MomentImage `json:"moment_images,omitempty"`
	// MomentVideos holds the value of the moment_videos edge.
	MomentVideos []*MomentVideo `json:"moment_videos,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// MomentImagesOrErr returns the MomentImages value or an error if the edge
// was not loaded in eager-loading.
func (e MomentEdges) MomentImagesOrErr() ([]*MomentImage, error) {
	if e.loadedTypes[0] {
		return e.MomentImages, nil
	}
	return nil, &NotLoadedError{edge: "moment_images"}
}

// MomentVideosOrErr returns the MomentVideos value or an error if the edge
// was not loaded in eager-loading.
func (e MomentEdges) MomentVideosOrErr() ([]*MomentVideo, error) {
	if e.loadedTypes[1] {
		return e.MomentVideos, nil
	}
	return nil, &NotLoadedError{edge: "moment_videos"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MomentEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Moment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case moment.FieldTags, moment.FieldExtraData, moment.FieldContentVector:
			values[i] = new([]byte)
		case moment.FieldIsPublic:
			values[i] = new(sql.NullBool)
		case moment.FieldLikes, moment.FieldViews:
			values[i] = new(sql.NullInt64)
		case moment.FieldID, moment.FieldContent, moment.FieldCategory, moment.FieldOwnerId:
			values[i] = new(sql.NullString)
		case moment.FieldCreatedAt, moment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Moment fields.
func (m *Moment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case moment.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				m.ID = value.String
			}
		case moment.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				m.Content = value.String
			}
		case moment.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				m.Category = value.String
			}
		case moment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case moment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case moment.FieldOwnerId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ownerId", values[i])
			} else if value.Valid {
				m.OwnerId = value.String
			}
		case moment.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isPublic", values[i])
			} else if value.Valid {
				m.IsPublic = value.Bool
			}
		case moment.FieldLikes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field likes", values[i])
			} else if value.Valid {
				m.Likes = int32(value.Int64)
			}
		case moment.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case moment.FieldViews:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field views", values[i])
			} else if value.Valid {
				m.Views = int32(value.Int64)
			}
		case moment.FieldExtraData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extraData", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.ExtraData); err != nil {
					return fmt.Errorf("unmarshal field extraData: %w", err)
				}
			}
		case moment.FieldContentVector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content_vector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.ContentVector); err != nil {
					return fmt.Errorf("unmarshal field content_vector: %w", err)
				}
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Moment.
// This includes values selected through modifiers, order, etc.
func (m *Moment) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryMomentImages queries the "moment_images" edge of the Moment entity.
func (m *Moment) QueryMomentImages() *MomentImageQuery {
	return NewMomentClient(m.config).QueryMomentImages(m)
}

// QueryMomentVideos queries the "moment_videos" edge of the Moment entity.
func (m *Moment) QueryMomentVideos() *MomentVideoQuery {
	return NewMomentClient(m.config).QueryMomentVideos(m)
}

// QueryUser queries the "user" edge of the Moment entity.
func (m *Moment) QueryUser() *UserQuery {
	return NewMomentClient(m.config).QueryUser(m)
}

// Update returns a builder for updating this Moment.
// Note that you need to call Moment.Unwrap() before calling this method if this Moment
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Moment) Update() *MomentUpdateOne {
	return NewMomentClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Moment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Moment) Unwrap() *Moment {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Moment is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Moment) String() string {
	var builder strings.Builder
	builder.WriteString("Moment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("content=")
	builder.WriteString(m.Content)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(m.Category)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ownerId=")
	builder.WriteString(m.OwnerId)
	builder.WriteString(", ")
	builder.WriteString("isPublic=")
	builder.WriteString(fmt.Sprintf("%v", m.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("likes=")
	builder.WriteString(fmt.Sprintf("%v", m.Likes))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", m.Tags))
	builder.WriteString(", ")
	builder.WriteString("views=")
	builder.WriteString(fmt.Sprintf("%v", m.Views))
	builder.WriteString(", ")
	builder.WriteString("extraData=")
	builder.WriteString(fmt.Sprintf("%v", m.ExtraData))
	builder.WriteString(", ")
	builder.WriteString("content_vector=")
	builder.WriteString(fmt.Sprintf("%v", m.ContentVector))
	builder.WriteByte(')')
	return builder.String()
}

// Moments is a parsable slice of Moment.
type Moments []*Moment
